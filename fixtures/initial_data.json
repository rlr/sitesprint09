[
  {
    "pk": "7f4dc6e6e62a134048b27aee01625a86", 
    "model": "sessions.session", 
    "fields": {
      "expire_date": "2009-12-08 14:01:00", 
      "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LjAxZjA3ODUxNzAxZTQ1NWM2ZjAx\nZGEwMzBmNTUyN2Zh\n"
    }
  }, 
  {
    "pk": "96b235f5b46d0d84b35735272b27d670", 
    "model": "sessions.session", 
    "fields": {
      "expire_date": "2009-12-13 22:19:00", 
      "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LjAxZjA3ODUxNzAxZTQ1NWM2ZjAx\nZGEwMzBmNTUyN2Zh\n"
    }
  }, 
  {
    "pk": 1, 
    "model": "sites.site", 
    "fields": {
      "domain": "rickyrosario.com", 
      "name": "rickyrosario.com"
    }
  }, 
  {
    "pk": 1, 
    "model": "flatpages.flatpage", 
    "fields": {
      "registration_required": false, 
      "title": "About Me", 
      "url": "/about/", 
      "template_name": "", 
      "sites": [
        1
      ], 
      "content": "<p>Hi, my name is Ricky Rosario. This is my website. Welcome!</p>\r\n<p>I am a presentation layer (web/front end/ui) architect at <a href=\"http://razorfish.com\">Razorfish</a>. I've programmed professionally in javascript, python, c#, php, c++, java, perl, matlab, etc.</p>\r\n<p>I have experience in a variety of web platforms and frameworks:</p>\r\n<ul>\r\n<li>Django (my current favorite)</li>\r\n<li>ASP.Net MVC</li>\r\n<li>ASP.Net Webforms</li>\r\n<li>Drupal</li>\r\n<li>CodeIgniter</li>\r\n</ul>", 
      "enable_comments": false
    }
  }, 
  {
    "pk": 43, 
    "model": "tagging.tag", 
    "fields": {
      "name": "2008"
    }
  }, 
  {
    "pk": 14, 
    "model": "tagging.tag", 
    "fields": {
      "name": "about"
    }
  }, 
  {
    "pk": 40, 
    "model": "tagging.tag", 
    "fields": {
      "name": "ajax"
    }
  }, 
  {
    "pk": 48, 
    "model": "tagging.tag", 
    "fields": {
      "name": "akismet"
    }
  }, 
  {
    "pk": 33, 
    "model": "tagging.tag", 
    "fields": {
      "name": "aspnet"
    }
  }, 
  {
    "pk": 15, 
    "model": "tagging.tag", 
    "fields": {
      "name": "aspnetmvc"
    }
  }, 
  {
    "pk": 5, 
    "model": "tagging.tag", 
    "fields": {
      "name": "blog"
    }
  }, 
  {
    "pk": 26, 
    "model": "tagging.tag", 
    "fields": {
      "name": "browser"
    }
  }, 
  {
    "pk": 22, 
    "model": "tagging.tag", 
    "fields": {
      "name": "button"
    }
  }, 
  {
    "pk": 27, 
    "model": "tagging.tag", 
    "fields": {
      "name": "chrome"
    }
  }, 
  {
    "pk": 11, 
    "model": "tagging.tag", 
    "fields": {
      "name": "community"
    }
  }, 
  {
    "pk": 2, 
    "model": "tagging.tag", 
    "fields": {
      "name": "connect"
    }
  }, 
  {
    "pk": 24, 
    "model": "tagging.tag", 
    "fields": {
      "name": "cookies"
    }
  }, 
  {
    "pk": 3, 
    "model": "tagging.tag", 
    "fields": {
      "name": "creativity"
    }
  }, 
  {
    "pk": 31, 
    "model": "tagging.tag", 
    "fields": {
      "name": "csharp"
    }
  }, 
  {
    "pk": 23, 
    "model": "tagging.tag", 
    "fields": {
      "name": "css"
    }
  }, 
  {
    "pk": 9, 
    "model": "tagging.tag", 
    "fields": {
      "name": "debug"
    }
  }, 
  {
    "pk": 17, 
    "model": "tagging.tag", 
    "fields": {
      "name": "delicious"
    }
  }, 
  {
    "pk": 6, 
    "model": "tagging.tag", 
    "fields": {
      "name": "django"
    }
  }, 
  {
    "pk": 7, 
    "model": "tagging.tag", 
    "fields": {
      "name": "django-mingus"
    }
  }, 
  {
    "pk": 28, 
    "model": "tagging.tag", 
    "fields": {
      "name": "firefox"
    }
  }, 
  {
    "pk": 50, 
    "model": "tagging.tag", 
    "fields": {
      "name": "geoip"
    }
  }, 
  {
    "pk": 29, 
    "model": "tagging.tag", 
    "fields": {
      "name": "google"
    }
  }, 
  {
    "pk": 13, 
    "model": "tagging.tag", 
    "fields": {
      "name": "helloworld"
    }
  }, 
  {
    "pk": 45, 
    "model": "tagging.tag", 
    "fields": {
      "name": "hover"
    }
  }, 
  {
    "pk": 19, 
    "model": "tagging.tag", 
    "fields": {
      "name": "html"
    }
  }, 
  {
    "pk": 38, 
    "model": "tagging.tag", 
    "fields": {
      "name": "iphone"
    }
  }, 
  {
    "pk": 20, 
    "model": "tagging.tag", 
    "fields": {
      "name": "javascript"
    }
  }, 
  {
    "pk": 8, 
    "model": "tagging.tag", 
    "fields": {
      "name": "jazz"
    }
  }, 
  {
    "pk": 21, 
    "model": "tagging.tag", 
    "fields": {
      "name": "jquery"
    }
  }, 
  {
    "pk": 18, 
    "model": "tagging.tag", 
    "fields": {
      "name": "linq2xml"
    }
  }, 
  {
    "pk": 34, 
    "model": "tagging.tag", 
    "fields": {
      "name": "logging"
    }
  }, 
  {
    "pk": 36, 
    "model": "tagging.tag", 
    "fields": {
      "name": "microsoft"
    }
  }, 
  {
    "pk": 1, 
    "model": "tagging.tag", 
    "fields": {
      "name": "mingus"
    }
  }, 
  {
    "pk": 4, 
    "model": "tagging.tag", 
    "fields": {
      "name": "mistakes"
    }
  }, 
  {
    "pk": 39, 
    "model": "tagging.tag", 
    "fields": {
      "name": "mobile"
    }
  }, 
  {
    "pk": 25, 
    "model": "tagging.tag", 
    "fields": {
      "name": "noscript"
    }
  }, 
  {
    "pk": 37, 
    "model": "tagging.tag", 
    "fields": {
      "name": "pdc"
    }
  }, 
  {
    "pk": 41, 
    "model": "tagging.tag", 
    "fields": {
      "name": "python"
    }
  }, 
  {
    "pk": 46, 
    "model": "tagging.tag", 
    "fields": {
      "name": "rant"
    }
  }, 
  {
    "pk": 32, 
    "model": "tagging.tag", 
    "fields": {
      "name": "regex"
    }
  }, 
  {
    "pk": 44, 
    "model": "tagging.tag", 
    "fields": {
      "name": "review"
    }
  }, 
  {
    "pk": 16, 
    "model": "tagging.tag", 
    "fields": {
      "name": "rss"
    }
  }, 
  {
    "pk": 42, 
    "model": "tagging.tag", 
    "fields": {
      "name": "search"
    }
  }, 
  {
    "pk": 52, 
    "model": "tagging.tag", 
    "fields": {
      "name": "sitesprint"
    }
  }, 
  {
    "pk": 10, 
    "model": "tagging.tag", 
    "fields": {
      "name": "snippet"
    }
  }, 
  {
    "pk": 49, 
    "model": "tagging.tag", 
    "fields": {
      "name": "spam"
    }
  }, 
  {
    "pk": 12, 
    "model": "tagging.tag", 
    "fields": {
      "name": "test"
    }
  }, 
  {
    "pk": 51, 
    "model": "tagging.tag", 
    "fields": {
      "name": "twitapi"
    }
  }, 
  {
    "pk": 30, 
    "model": "tagging.tag", 
    "fields": {
      "name": "twitter"
    }
  }, 
  {
    "pk": 47, 
    "model": "tagging.tag", 
    "fields": {
      "name": "ux"
    }
  }, 
  {
    "pk": 35, 
    "model": "tagging.tag", 
    "fields": {
      "name": "visualstudio"
    }
  }, 
  {
    "pk": 1, 
    "model": "inlines.inlinetype", 
    "fields": {
      "content_type": 22, 
      "title": "Photos"
    }
  }, 
  {
    "pk": 1, 
    "model": "blog.category", 
    "fields": {
      "slug": "django", 
      "title": "Django"
    }
  }, 
  {
    "pk": 34, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>I've decided to start the reimplementation of this site using\r\n<a href=\"http://github.com/montylounge/django-mingus\">django-mingus</a> as a base,\r\nso I went ahead and forked\r\nit. It was very easy to get up and running locally following the\r\n<a href=\"http://github.com/montylounge/django-mingus/blob/master/docs/INSTALL.textile\">instructions provided</a>.\r\nThe first thing I am going to do is rework the templates to my liking.\r\nI am not a big fan of CSS grid frameworks, instead I take the sometimes less DRY\r\nsemantic markup approach and refactor later to DRY up a little. I guess I am a\r\nmasochist with CSS, but I don't like seeing my markup polluted with junk CSS\r\nclasses like grid&#95;*, pull&#95;*, etc&#95;*.</p>\r\n\r\n<p>While I rework the templates and CSS (based on the minimal theme), I will try\r\nto get familiar with all the functionality I get for free with mingus. Then I will\r\ndecide what I want to keep and what I need to add.</p>\r\n\r\n<p>I am already torn about using disqus for comments,\r\ncurrently leaning heavily against it as it is integrated via javascript.\r\nI think comments should definitely be indexed for search, so that\r\njustifies hosting the comments myself (using an existing comments app such as\r\n<a href=\"http://github.com/ericflo/django-threadedcomments\">django-threadedcomments</a>)\r\nand dealing with spam. Another interesting option is implementing disqus using the\r\nserver to server API. This way I wouldn't have to worry about spam at all (assuming\r\ndisqus is good) and I would just have to cache the comments to avoid API calls on\r\nevery request.</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "I will be using django-mingus as the base for the reimplementation of rickyrosario.com", 
      "categories": [], 
      "modified": "2009-12-01 15:39:05", 
      "visits": 5, 
      "created": "2009-12-01 01:19:09", 
      "body_markup": "<p>I've decided to start the reimplementation of this site using\r\n<a href=\"http://github.com/montylounge/django-mingus\">django-mingus</a> as a base,\r\nso I went ahead and forked\r\nit. It was very easy to get up and running locally following the\r\n<a href=\"http://github.com/montylounge/django-mingus/blob/master/docs/INSTALL.textile\">instructions provided</a>.\r\nThe first thing I am going to do is rework the templates to my liking.\r\nI am not a big fan of CSS grid frameworks, instead I take the sometimes less DRY\r\nsemantic markup approach and refactor later to DRY up a little. I guess I am a\r\nmasochist with CSS, but I don't like seeing my markup polluted with junk CSS\r\nclasses like grid&#95;*, pull&#95;*, etc&#95;*.</p>\r\n\r\n<p>While I rework the templates and CSS (based on the minimal theme), I will try\r\nto get familiar with all the functionality I get for free with mingus. Then I will\r\ndecide what I want to keep and what I need to add.</p>\r\n\r\n<p>I am already torn about using disqus for comments,\r\ncurrently leaning heavily against it as it is integrated via javascript.\r\nI think comments should definitely be indexed for search, so that\r\njustifies hosting the comments myself (using an existing comments app such as\r\n<a href=\"http://github.com/ericflo/django-threadedcomments\">django-threadedcomments</a>)\r\nand dealing with spam. Another interesting option is implementing disqus using the\r\nserver to server API. This way I wouldn't have to worry about spam at all (assuming\r\ndisqus is good) and I would just have to cache the comments to avoid API calls on\r\nevery request.</p>", 
      "publish": "2009-11-24 00:00:00", 
      "title": "django-mingus forked #sitesprint", 
      "slug": "django-mingus-forked-sitesprint", 
      "tags": "django sitesprint "
    }
  }, 
  {
    "pk": 33, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>I will be redoing this site (currently a custom ASP.Net MVC application) as part of <a href=\"http://sitesprint.info\">SiteSprint II</a>. I am not exactly sure what I am doing but it will very likely be <a href=\"http://djangoproject.com\">Django</a>-based. I'll probably start with <a href=\"http://github.com/montylounge/django-mingus/tree\">Mingus</a> for the blog and add some sort of lifestream and whatever else I can come up with. The design will probably be minimalist, dark on light, decent sized font, ...</p>\r\n\r\n<p>Stay tuned for progress.</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "I'll be participating in the SiteSprint II to reimplement this site.", 
      "categories": [], 
      "modified": "2009-12-01 01:18:14", 
      "visits": 0, 
      "created": "2009-12-01 01:18:14", 
      "body_markup": "<p>I will be redoing this site (currently a custom ASP.Net MVC application) as part of <a href=\"http://sitesprint.info\">SiteSprint II</a>. I am not exactly sure what I am doing but it will very likely be <a href=\"http://djangoproject.com\">Django</a>-based. I'll probably start with <a href=\"http://github.com/montylounge/django-mingus/tree\">Mingus</a> for the blog and add some sort of lifestream and whatever else I can come up with. The design will probably be minimalist, dark on light, decent sized font, ...</p>\r\n\r\n<p>Stay tuned for progress.</p>", 
      "publish": "2009-11-17 00:00:00", 
      "title": "Sprinting the #sitesprint", 
      "slug": "sprinting-the-sitesprint", 
      "tags": "django sitesprint "
    }
  }, 
  {
    "pk": 32, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nI previously <a href=\"http://rickyrosario.com/blog/converting-a-url-into-a-link-in-csharp-using-regular-expressions\">implemented something similar in C#</a>, and now I have it in JavaScript. Pass in a bunch of text and get it back with the URLs converted into clickable links (&lt;a /&gt;'s).\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>function linkify(text){\r\n    if (text) {\r\n        text = text.replace(\r\n            /((https?\\:\\/\\/)|(www\\.))(\\S+)(\\w{2,4})(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&amp;%@!\\-\\/]))?/gi,\r\n            function(url){\r\n                var full&#95;url = url;\r\n                if (!full&#95;url.match('^https?:\\/\\/')) {\r\n                    full&#95;url = 'http://' + full&#95;url;\r\n                }\r\n                return '&lt;a href=\"' + full&#95;url + '\"&gt;' + url + '&lt;/a&gt;';\r\n            }\r\n        );\r\n    }\r\n    return text;\r\n}\r\n</code></pre>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "A useful function to process text converting all URLs into links", 
      "categories": [], 
      "modified": "2009-12-01 01:17:24", 
      "visits": 0, 
      "created": "2009-12-01 01:17:24", 
      "body_markup": "<p>\r\nI previously <a href=\"http://rickyrosario.com/blog/converting-a-url-into-a-link-in-csharp-using-regular-expressions\">implemented something similar in C#</a>, and now I have it in JavaScript. Pass in a bunch of text and get it back with the URLs converted into clickable links (&lt;a /&gt;'s).\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>function linkify(text){\r\n    if (text) {\r\n        text = text.replace(\r\n            /((https?\\:\\/\\/)|(www\\.))(\\S+)(\\w{2,4})(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&amp;%@!\\-\\/]))?/gi,\r\n            function(url){\r\n                var full&#95;url = url;\r\n                if (!full&#95;url.match('^https?:\\/\\/')) {\r\n                    full&#95;url = 'http://' + full&#95;url;\r\n                }\r\n                return '&lt;a href=\"' + full&#95;url + '\"&gt;' + url + '&lt;/a&gt;';\r\n            }\r\n        );\r\n    }\r\n    return text;\r\n}\r\n</code></pre>", 
      "publish": "2009-08-12 00:00:00", 
      "title": "Converting a URL into a Link in JavaScript - Linkify Function", 
      "slug": "converting-a-url-into-a-link-in-javascript-linkify-function", 
      "tags": "javascript"
    }
  }, 
  {
    "pk": 31, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nJavaScript is missing the sometimes useful startsWith and endsWith functions that are available in Python, C#, etc. One can argue that startsWith is not necessary since its just as easy to check the index of the prefix and compare to 0:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>function strStartsWith(str, prefix) {\r\n    return str.indexOf(prefix) === 0;\r\n}\r\n</code></pre>\r\n\r\n<p>\r\nUsing indexOf to implement endsWith is possible as well but not as cool and short as using regular expressions:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>function strEndsWith(str, suffix) {\r\n    return str.match(suffix+&quot;$&quot;)==suffix;\r\n}\r\n</code></pre>\r\n\r\n<p>\r\nIf you are a fan of monkey-patching JavaScript's builtin classes: \r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>String.prototype.startsWith = function(prefix) {\r\n    return this.indexOf(prefix) === 0;\r\n}\r\n\r\nString.prototype.endsWith = function(suffix) {\r\n    return this.match(suffix+&quot;$&quot;) == suffix;\r\n};\r\n</code></pre>\r\n\r\n<p>\r\nThen you can do:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&gt;&gt;&gt; &quot;rickyrosario.com&quot;.startsWith(&quot;ricky&quot;)\r\ntrue\r\n&gt;&gt;&gt; &quot;rickyrosario.com&quot;.endsWith(&quot;.com&quot;)\r\ntrue\r\n</code></pre>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "An implementation of endsWith and startsWith functions for strings in JavaScript", 
      "categories": [], 
      "modified": "2009-12-01 01:14:43", 
      "visits": 0, 
      "created": "2009-12-01 01:14:43", 
      "body_markup": "<p>\r\nJavaScript is missing the sometimes useful startsWith and endsWith functions that are available in Python, C#, etc. One can argue that startsWith is not necessary since its just as easy to check the index of the prefix and compare to 0:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>function strStartsWith(str, prefix) {\r\n    return str.indexOf(prefix) === 0;\r\n}\r\n</code></pre>\r\n\r\n<p>\r\nUsing indexOf to implement endsWith is possible as well but not as cool and short as using regular expressions:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>function strEndsWith(str, suffix) {\r\n    return str.match(suffix+&quot;$&quot;)==suffix;\r\n}\r\n</code></pre>\r\n\r\n<p>\r\nIf you are a fan of monkey-patching JavaScript's builtin classes: \r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>String.prototype.startsWith = function(prefix) {\r\n    return this.indexOf(prefix) === 0;\r\n}\r\n\r\nString.prototype.endsWith = function(suffix) {\r\n    return this.match(suffix+&quot;$&quot;) == suffix;\r\n};\r\n</code></pre>\r\n\r\n<p>\r\nThen you can do:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&gt;&gt;&gt; &quot;rickyrosario.com&quot;.startsWith(&quot;ricky&quot;)\r\ntrue\r\n&gt;&gt;&gt; &quot;rickyrosario.com&quot;.endsWith(&quot;.com&quot;)\r\ntrue\r\n</code></pre>", 
      "publish": "2009-07-01 00:00:00", 
      "title": "JavaScript startsWith and endsWith Implementation for Strings", 
      "slug": "javascript-startswith-and-endswith-implementation-for-strings", 
      "tags": "javascript "
    }
  }, 
  {
    "pk": 30, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nThe official <a href=\"http://apiwiki.twitter.com/\">Twitter API documentation</a> is not bad, but being in a wiki it's usability isn't great. I found myself frequently clicking back and forth to find different API methods. So, I spent a couple of nights creating a tool to learn and explore the Twitter API interactively.\r\n</p>\r\n\r\n<p>\r\n<strong>\r\n<a href=\"http://twitapi.com\" title=\"Twitter API Explorer\">TwitAPI.com</a>\r\n</strong>\r\n</p>\r\n\r\n<inline type=\"media.photo\" id=\"5\" class=\"\" />\r\n\r\n<p>\r\nIn addition to the (hopefully) better usability, you can enter parameters and call the methods to see the response.\r\n</p>\r\n\r\n<p>\r\nThe site itself was built on <a href=\"http://www.djangoproject.com/\">Django</a> and uses <a href=\"http://apiwiki.twitter.com/OAuth-FAQ\" title=\"Twitter OAuth FAQ\">Twitter OAuth</a> for authentication and for making authenticated API calls.\r\n</p>\r\n", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "markdown", 
      "tease": "A Twitter API Explorer web site/application I built for interacting with the Twitter API calls.", 
      "categories": [], 
      "modified": "2009-12-01 01:11:28", 
      "visits": 0, 
      "created": "2009-12-01 01:08:15", 
      "body_markup": "<p>\nThe official <a href=\"http://apiwiki.twitter.com/\">Twitter API documentation</a> is not bad, but being in a wiki it's usability isn't great. I found myself frequently clicking back and forth to find different API methods. So, I spent a couple of nights creating a tool to learn and explore the Twitter API interactively.\n</p>\n\n<p>\n<strong>\n<a href=\"http://twitapi.com\" title=\"Twitter API Explorer\">TwitAPI.com</a>\n</strong>\n</p>\n\n<inline type=\"media.photo\" id=\"5\" class=\"\" />\n\n<p>\nIn addition to the (hopefully) better usability, you can enter parameters and call the methods to see the response.\n</p>\n\n<p>\nThe site itself was built on <a href=\"http://www.djangoproject.com/\">Django</a> and uses <a href=\"http://apiwiki.twitter.com/OAuth-FAQ\" title=\"Twitter OAuth FAQ\">Twitter OAuth</a> for authentication and for making authenticated API calls.\n</p>", 
      "publish": "2009-05-27 00:00:00", 
      "title": "TwitAPI.com - Twitter API Explorer", 
      "slug": "twitapi-twitter-api-explorer", 
      "tags": "twitter django twitapi "
    }
  }, 
  {
    "pk": 29, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nToday, I came across a Ruby script that <a href=\"http://jerodsanto.net\">Jerod Santo</a> blogged about yesterday: <a href=\"http://blog.jerodsanto.net/2009/05/see-which-twitterers-dont-follow-youback-in-less-than-15-lines-of-ruby/\">See Which Twitterers Don\u2019t Follow You Back In Less Than 15 Lines of Ruby</a>. I quickly felt the need to implement the same in Python to see how much code it would take.\r\n</p>\r\n\r\n<p>\r\nI used the awesome <a href=\"http://github.com/sixohsix/twitter/tree/master\">Minimalist Twitter API for Python</a>, which I have used and <a href=\"http://rickyrosario.com/blog/posting-to-twitter-from-python\" title=\"Posting to Twitter from Python\">blogged about before</a>. After a couple refactorings, I ended up with <a href=\"http://gist.github.com/111409\" title=\"no&#95;follow&#95;back.py gist\">15 lines</a>:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>from twitter.api import Twitter\r\n\r\nUSERNAME = 'r1cky' # set to your/any username\r\n\r\ntwitter = Twitter() # username/password not required for these calls\r\nfriends = twitter.friends.ids(screen&#95;name=USERNAME)\r\nfollowers = twitter.followers.ids(screen&#95;name=USERNAME)\r\nguilty = [x for x in friends if x not in followers]\r\n\r\nprint \"There are %s tweeps you follow who do not follow you\" % len(guilty)\r\n\r\nfor user&#95;id in guilty:\r\n    user = twitter.users.show(user&#95;id=user&#95;id)\r\n    print \"%s follows %s and has %s followers.\" % \\\r\n              (user['name'], user['friends&#95;count'], user['followers&#95;count'] )\r\n</code></pre>\r\n\r\n<p>\r\nIt does seem like more code than the Ruby version. I especially like how you can subtract one array from the another in Ruby:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>guilty = base.friend&#95;ids - base.follower&#95;ids\r\n</code></pre>\r\n\r\n<p>\r\nI am not sure that this can be made as elegant in Python... Can it?\r\n</p>\r\n\r\n<p>\r\nTo make the code re-usable, I created a function that takes a username and returns the users that don't follow back:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>from twitter.api import Twitter\r\n\r\ndef no&#95;follow&#95;back(username):\r\n    twitter = Twitter()   # username/password not required for these calls\r\n    friends = twitter.friends.ids(screen&#95;name=username)\r\n    followers = twitter.followers.ids(screen&#95;name=username)\r\n\r\n    def get&#95;user&#95;by&#95;id(user&#95;id):\r\n        return twitter.users.show(user&#95;id=user&#95;id)\r\n\r\n    return [get&#95;user&#95;by&#95;id(x) for x in friends if x not in followers]\r\n</code></pre>\r\n\r\n<p>\r\nA usage example (I saved the function above in a file called twitfun.py):\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&gt;&gt;&gt; from twitfun import no&#95;follow&#95;back\r\n&gt;&gt;&gt; guilty = no&#95;follow&#95;back('papajuans')\r\n&gt;&gt;&gt; len(guilty)\r\n16\r\n&gt;&gt;&gt; guilty[0][\"screen&#95;name\"]\r\nu'shanselman'\r\n</code></pre>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "Using Python to display which Twitter users you follow don't follow you back.", 
      "categories": [], 
      "modified": "2009-12-01 18:20:15", 
      "visits": 1, 
      "created": "2009-12-01 01:06:37", 
      "body_markup": "<p>\r\nToday, I came across a Ruby script that <a href=\"http://jerodsanto.net\">Jerod Santo</a> blogged about yesterday: <a href=\"http://blog.jerodsanto.net/2009/05/see-which-twitterers-dont-follow-youback-in-less-than-15-lines-of-ruby/\">See Which Twitterers Don\u2019t Follow You Back In Less Than 15 Lines of Ruby</a>. I quickly felt the need to implement the same in Python to see how much code it would take.\r\n</p>\r\n\r\n<p>\r\nI used the awesome <a href=\"http://github.com/sixohsix/twitter/tree/master\">Minimalist Twitter API for Python</a>, which I have used and <a href=\"http://rickyrosario.com/blog/posting-to-twitter-from-python\" title=\"Posting to Twitter from Python\">blogged about before</a>. After a couple refactorings, I ended up with <a href=\"http://gist.github.com/111409\" title=\"no&#95;follow&#95;back.py gist\">15 lines</a>:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>from twitter.api import Twitter\r\n\r\nUSERNAME = 'r1cky' # set to your/any username\r\n\r\ntwitter = Twitter() # username/password not required for these calls\r\nfriends = twitter.friends.ids(screen&#95;name=USERNAME)\r\nfollowers = twitter.followers.ids(screen&#95;name=USERNAME)\r\nguilty = [x for x in friends if x not in followers]\r\n\r\nprint \"There are %s tweeps you follow who do not follow you\" % len(guilty)\r\n\r\nfor user&#95;id in guilty:\r\n    user = twitter.users.show(user&#95;id=user&#95;id)\r\n    print \"%s follows %s and has %s followers.\" % \\\r\n              (user['name'], user['friends&#95;count'], user['followers&#95;count'] )\r\n</code></pre>\r\n\r\n<p>\r\nIt does seem like more code than the Ruby version. I especially like how you can subtract one array from the another in Ruby:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>guilty = base.friend&#95;ids - base.follower&#95;ids\r\n</code></pre>\r\n\r\n<p>\r\nI am not sure that this can be made as elegant in Python... Can it?\r\n</p>\r\n\r\n<p>\r\nTo make the code re-usable, I created a function that takes a username and returns the users that don't follow back:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>from twitter.api import Twitter\r\n\r\ndef no&#95;follow&#95;back(username):\r\n    twitter = Twitter()   # username/password not required for these calls\r\n    friends = twitter.friends.ids(screen&#95;name=username)\r\n    followers = twitter.followers.ids(screen&#95;name=username)\r\n\r\n    def get&#95;user&#95;by&#95;id(user&#95;id):\r\n        return twitter.users.show(user&#95;id=user&#95;id)\r\n\r\n    return [get&#95;user&#95;by&#95;id(x) for x in friends if x not in followers]\r\n</code></pre>\r\n\r\n<p>\r\nA usage example (I saved the function above in a file called twitfun.py):\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&gt;&gt;&gt; from twitfun import no&#95;follow&#95;back\r\n&gt;&gt;&gt; guilty = no&#95;follow&#95;back('papajuans')\r\n&gt;&gt;&gt; len(guilty)\r\n16\r\n&gt;&gt;&gt; guilty[0][\"screen&#95;name\"]\r\nu'shanselman'\r\n</code></pre>", 
      "publish": "2009-05-13 00:00:00", 
      "title": "See Which Twitterers Don\u2019t Follow You Back In 15 Lines of Python", 
      "slug": "see-which-twitterers-dont-follow-you-back-in-15-lines-of-python", 
      "tags": "snippet twitter python "
    }
  }, 
  {
    "pk": 28, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nThe other day I found another <a href=\"http://ipinfodb.com/ip&#95;location&#95;api&#95;json.php\">GeoIP lookup service</a> that happens to also return JSON, which is awesome given the great <a href=\"http://code.google.com/p/simplejson/\" title=\"simplejson\">JSON support</a> in Python. The JSON returned looks like this:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>{\r\n&quot;Ip&quot; : &quot;74.125.45.100&quot;,\r\n&quot;Status&quot; : &quot;OK&quot;,\r\n&quot;CountryCode&quot; : &quot;US&quot;,\r\n&quot;CountryName&quot; : &quot;United States&quot;,\r\n&quot;RegionCode&quot; : &quot;06&quot;,\r\n&quot;RegionName&quot; : &quot;California&quot;,\r\n&quot;City&quot; : &quot;Mountain View&quot;,\r\n&quot;ZipPostalCode&quot; : &quot;94043&quot;,\r\n&quot;Latitude&quot; : &quot;37.4192&quot;,\r\n&quot;Longitude&quot; : &quot;-122.057&quot;,\r\n}\r\n</code></pre>\r\n\r\n<p>Today, the <a href=\"http://www.hostip.info/\" title=\"My IP Address Lookup and GeoTargeting Community Geotarget IP Project \">service</a> I <a href=\"http://rickyrosario.com/blog/quick-and-dirty-geoip-lookup-function-in-python\" title=\"Quick and Dirty GeoIP Lookup Function in Python\">was using</a> seems to be dead so I quickly reimplemented my function and it turned out much cleaner.\r\n</p>\r\n<pre class=\"prettyprint\"><code>from urllib import urlopen, quote\r\nimport simplejson\r\n\r\nGEOIP&#95;LOOKUP&#95;URL = 'http://ipinfodb.com/ip&#95;query.php?ip=%s&amp;output=json'\r\n\r\ndef geo&#95;ip&#95;lookup(ip&#95;address):\r\n    &quot;&quot;&quot;\r\n    Look up the geo information based on the IP address passed in\r\n    &quot;&quot;&quot;\r\n    lookup&#95;url = GEOIP&#95;LOOKUP&#95;URL % ip&#95;address\r\n    json&#95;response = simplejson.loads(urlopen(lookup&#95;url).read())\r\n\r\n    return {\r\n            'country&#95;code': json&#95;response['CountryCode'],\r\n            'country&#95;name': json&#95;response['CountryName'],\r\n            'locality': json&#95;response['City'],\r\n            'region': json&#95;response['RegionName'],\r\n            'longitude': json&#95;response['Longitude'],\r\n            'latitude': json&#95;response['Latitude']\r\n    }\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nJust like before, from the interpreter:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&gt;&gt;&gt; geo&#95;ip&#95;lookup('81.83.5.11')\r\n{'locality': u'Gent', 'region': u'Oost-Vlaanderen', 'longitude': u'3.7167', 'latitude': u'51.05', 'country&#95;code': u'BE', 'country&#95;name': u'Belgium'}\r\n&gt;&gt;&gt;\r\n</code></pre>\r\n\r\n<p>JSON FTW!</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "An improved python function for calling a better Geo IP lookup service", 
      "categories": [], 
      "modified": "2009-12-01 01:04:23", 
      "visits": 0, 
      "created": "2009-12-01 01:04:23", 
      "body_markup": "<p>\r\nThe other day I found another <a href=\"http://ipinfodb.com/ip&#95;location&#95;api&#95;json.php\">GeoIP lookup service</a> that happens to also return JSON, which is awesome given the great <a href=\"http://code.google.com/p/simplejson/\" title=\"simplejson\">JSON support</a> in Python. The JSON returned looks like this:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>{\r\n&quot;Ip&quot; : &quot;74.125.45.100&quot;,\r\n&quot;Status&quot; : &quot;OK&quot;,\r\n&quot;CountryCode&quot; : &quot;US&quot;,\r\n&quot;CountryName&quot; : &quot;United States&quot;,\r\n&quot;RegionCode&quot; : &quot;06&quot;,\r\n&quot;RegionName&quot; : &quot;California&quot;,\r\n&quot;City&quot; : &quot;Mountain View&quot;,\r\n&quot;ZipPostalCode&quot; : &quot;94043&quot;,\r\n&quot;Latitude&quot; : &quot;37.4192&quot;,\r\n&quot;Longitude&quot; : &quot;-122.057&quot;,\r\n}\r\n</code></pre>\r\n\r\n<p>Today, the <a href=\"http://www.hostip.info/\" title=\"My IP Address Lookup and GeoTargeting Community Geotarget IP Project \">service</a> I <a href=\"http://rickyrosario.com/blog/quick-and-dirty-geoip-lookup-function-in-python\" title=\"Quick and Dirty GeoIP Lookup Function in Python\">was using</a> seems to be dead so I quickly reimplemented my function and it turned out much cleaner.\r\n</p>\r\n<pre class=\"prettyprint\"><code>from urllib import urlopen, quote\r\nimport simplejson\r\n\r\nGEOIP&#95;LOOKUP&#95;URL = 'http://ipinfodb.com/ip&#95;query.php?ip=%s&amp;output=json'\r\n\r\ndef geo&#95;ip&#95;lookup(ip&#95;address):\r\n    &quot;&quot;&quot;\r\n    Look up the geo information based on the IP address passed in\r\n    &quot;&quot;&quot;\r\n    lookup&#95;url = GEOIP&#95;LOOKUP&#95;URL % ip&#95;address\r\n    json&#95;response = simplejson.loads(urlopen(lookup&#95;url).read())\r\n\r\n    return {\r\n            'country&#95;code': json&#95;response['CountryCode'],\r\n            'country&#95;name': json&#95;response['CountryName'],\r\n            'locality': json&#95;response['City'],\r\n            'region': json&#95;response['RegionName'],\r\n            'longitude': json&#95;response['Longitude'],\r\n            'latitude': json&#95;response['Latitude']\r\n    }\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nJust like before, from the interpreter:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&gt;&gt;&gt; geo&#95;ip&#95;lookup('81.83.5.11')\r\n{'locality': u'Gent', 'region': u'Oost-Vlaanderen', 'longitude': u'3.7167', 'latitude': u'51.05', 'country&#95;code': u'BE', 'country&#95;name': u'Belgium'}\r\n&gt;&gt;&gt;\r\n</code></pre>\r\n\r\n<p>JSON FTW!</p>", 
      "publish": "2009-04-28 00:00:00", 
      "title": "Improved GeoIP Lookup Function in Python", 
      "slug": "improved-geoip-lookup-function-in-python", 
      "tags": "python geoip "
    }
  }, 
  {
    "pk": 27, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nI found a <a href=\"http://www.hostip.info/\" title=\"My IP Address Lookup and GeoTargeting Community Geotarget IP Project \">free GeoIP lookup service</a>, that happens to have a simple API for getting the result in XML: <a href=\"http://api.hostip.info/?ip=65.34.176.69\">http://api.hostip.info/?ip=65.34.176.69</a>. The returned XML looks like this:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>\r\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; ?&gt;\r\n&lt;HostipLookupResultSet version=&quot;1.0.0&quot; xmlns=&quot;http://www.hostip.info/api&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.hostip.info/api/hostip-1.0.0.xsd&quot;&gt;\r\n &lt;gml:description&lt;This is the Hostip Lookup Service&lt;/gml:description&gt;\r\n &lt;gml:name&gt;hostip&lt;/gml:name&gt;\r\n &lt;gml:boundedBy&gt;\r\n  &lt;gml:Null&gt;inapplicable&lt;/gml:Null&gt;\r\n &lt;/gml:boundedBy&gt;\r\n &lt;gml:featureMember&gt;\r\n\r\n  &lt;Hostip&gt;\r\n   &lt;gml:name&gt;Miami, FL&lt;/gml:name&gt;\r\n   &lt;countryName&gt;UNITED STATES&lt;/countryName&gt;\r\n   &lt;countryAbbrev&gt;US&lt;/countryAbbrev&gt;\r\n   &lt;!-- Co-ordinates are available as lng,lat --&gt;\r\n   &lt;ipLocation&gt;\r\n    &lt;gml:PointProperty&gt;\r\n\r\n     &lt;gml:Point srsName=&quot;http://www.opengis.net/gml/srs/epsg.xml#4326&quot;&gt;\r\n      &lt;gml:coordinates&gt;-80.2108,25.7757&lt;/gml:coordinates&gt;\r\n     &lt;/gml:Point&gt;\r\n    &lt;/gml:PointProperty&gt;\r\n   &lt;/ipLocation&gt;\r\n  &lt;/Hostip&gt;\r\n &lt;/gml:featureMember&gt;\r\n&lt;/HostipLookupResultSet&gt;\r\n</code></pre>\r\n\r\n<p>\r\nI had never done anything with XML in python so I figured I would write a function to wrap the API call. A few google searches led me to <a href=\"http://docs.python.org/library/xml.dom.minidom.html\" title=\"xml.dom.minidom\">minidom</a> and the rest was cake. The function takes in an IP address (string) and returns a dictionary with the geo information. I am a python noob and this code feels a little sketchy to me, so any feedback is more than welcome!\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>\r\nimport urllib\r\nfrom xml.dom import minidom\r\n\r\nGEO&#95;IP&#95;LOOKUP&#95;URL = 'http://api.hostip.info/?ip=%s'\r\nGML&#95;NS = 'http://www.opengis.net/gml'\r\n\r\ndef geo&#95;ip&#95;lookup(ip&#95;address):\r\n    &quot;&quot;&quot;\r\n    Look up the geo information based on the IP address passed in\r\n    &quot;&quot;&quot;\r\n    dom = minidom.parse(urllib.urlopen(GEO&#95;IP&#95;LOOKUP&#95;URL % ip&#95;address))\r\n    elem = dom.getElementsByTagName('Hostip')[0]\r\n    location = elem.getElementsByTagNameNS(GML&#95;NS, 'name')[0].firstChild.data.partition(',')\r\n\r\n    try:\r\n        latlong = elem.getElementsByTagNameNS(GML&#95;NS, 'coordinates')[0].firstChild.data.partition(',')\r\n    except:\r\n        # lat/long isnt always returned\r\n        latlong = None\r\n\r\n    return {\r\n            'country&#95;code': elem.getElementsByTagName('countryAbbrev')[0].firstChild.data,\r\n            'country&#95;name': elem.getElementsByTagName('countryName')[0].firstChild.data,\r\n            'locality': location[0].strip(),\r\n            'region': location[2].strip(),\r\n            'longitude': latlong[0].strip() if latlong else '',\r\n            'latitude': latlong[2].strip() if latlong else ''\r\n    }\r\n</code></pre>\r\n\r\n<p> Calling it from the interpreter: </p>\r\n\r\n<pre><code>&gt;&gt;&gt; geo&#95;ip&#95;lookup('65.34.176.69')\r\n{'locality': u'Miami', 'region': u'FL', 'longitude': u'-80.2108', 'latitude': u'25.7757', 'country&#95;code': u'US', 'country&#95;name': u'UNITED STATES'}\r\n&gt;&gt;&gt;\r\n</code></pre>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "A python function for calling Geo IP lookup service", 
      "categories": [], 
      "modified": "2009-12-01 01:02:58", 
      "visits": 0, 
      "created": "2009-12-01 01:02:58", 
      "body_markup": "<p>\r\nI found a <a href=\"http://www.hostip.info/\" title=\"My IP Address Lookup and GeoTargeting Community Geotarget IP Project \">free GeoIP lookup service</a>, that happens to have a simple API for getting the result in XML: <a href=\"http://api.hostip.info/?ip=65.34.176.69\">http://api.hostip.info/?ip=65.34.176.69</a>. The returned XML looks like this:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>\r\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; ?&gt;\r\n&lt;HostipLookupResultSet version=&quot;1.0.0&quot; xmlns=&quot;http://www.hostip.info/api&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.hostip.info/api/hostip-1.0.0.xsd&quot;&gt;\r\n &lt;gml:description&lt;This is the Hostip Lookup Service&lt;/gml:description&gt;\r\n &lt;gml:name&gt;hostip&lt;/gml:name&gt;\r\n &lt;gml:boundedBy&gt;\r\n  &lt;gml:Null&gt;inapplicable&lt;/gml:Null&gt;\r\n &lt;/gml:boundedBy&gt;\r\n &lt;gml:featureMember&gt;\r\n\r\n  &lt;Hostip&gt;\r\n   &lt;gml:name&gt;Miami, FL&lt;/gml:name&gt;\r\n   &lt;countryName&gt;UNITED STATES&lt;/countryName&gt;\r\n   &lt;countryAbbrev&gt;US&lt;/countryAbbrev&gt;\r\n   &lt;!-- Co-ordinates are available as lng,lat --&gt;\r\n   &lt;ipLocation&gt;\r\n    &lt;gml:PointProperty&gt;\r\n\r\n     &lt;gml:Point srsName=&quot;http://www.opengis.net/gml/srs/epsg.xml#4326&quot;&gt;\r\n      &lt;gml:coordinates&gt;-80.2108,25.7757&lt;/gml:coordinates&gt;\r\n     &lt;/gml:Point&gt;\r\n    &lt;/gml:PointProperty&gt;\r\n   &lt;/ipLocation&gt;\r\n  &lt;/Hostip&gt;\r\n &lt;/gml:featureMember&gt;\r\n&lt;/HostipLookupResultSet&gt;\r\n</code></pre>\r\n\r\n<p>\r\nI had never done anything with XML in python so I figured I would write a function to wrap the API call. A few google searches led me to <a href=\"http://docs.python.org/library/xml.dom.minidom.html\" title=\"xml.dom.minidom\">minidom</a> and the rest was cake. The function takes in an IP address (string) and returns a dictionary with the geo information. I am a python noob and this code feels a little sketchy to me, so any feedback is more than welcome!\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>\r\nimport urllib\r\nfrom xml.dom import minidom\r\n\r\nGEO&#95;IP&#95;LOOKUP&#95;URL = 'http://api.hostip.info/?ip=%s'\r\nGML&#95;NS = 'http://www.opengis.net/gml'\r\n\r\ndef geo&#95;ip&#95;lookup(ip&#95;address):\r\n    &quot;&quot;&quot;\r\n    Look up the geo information based on the IP address passed in\r\n    &quot;&quot;&quot;\r\n    dom = minidom.parse(urllib.urlopen(GEO&#95;IP&#95;LOOKUP&#95;URL % ip&#95;address))\r\n    elem = dom.getElementsByTagName('Hostip')[0]\r\n    location = elem.getElementsByTagNameNS(GML&#95;NS, 'name')[0].firstChild.data.partition(',')\r\n\r\n    try:\r\n        latlong = elem.getElementsByTagNameNS(GML&#95;NS, 'coordinates')[0].firstChild.data.partition(',')\r\n    except:\r\n        # lat/long isnt always returned\r\n        latlong = None\r\n\r\n    return {\r\n            'country&#95;code': elem.getElementsByTagName('countryAbbrev')[0].firstChild.data,\r\n            'country&#95;name': elem.getElementsByTagName('countryName')[0].firstChild.data,\r\n            'locality': location[0].strip(),\r\n            'region': location[2].strip(),\r\n            'longitude': latlong[0].strip() if latlong else '',\r\n            'latitude': latlong[2].strip() if latlong else ''\r\n    }\r\n</code></pre>\r\n\r\n<p> Calling it from the interpreter: </p>\r\n\r\n<pre><code>&gt;&gt;&gt; geo&#95;ip&#95;lookup('65.34.176.69')\r\n{'locality': u'Miami', 'region': u'FL', 'longitude': u'-80.2108', 'latitude': u'25.7757', 'country&#95;code': u'US', 'country&#95;name': u'UNITED STATES'}\r\n&gt;&gt;&gt;\r\n</code></pre>", 
      "publish": "2009-03-10 00:00:00", 
      "title": "Quick and Dirty GeoIP Lookup Function in Python", 
      "slug": "quick-and-dirty-geoip-lookup-function-in-python", 
      "tags": "python geoip "
    }
  }, 
  {
    "pk": 26, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nI finally got fed up with the amount of spam that is coming in through the comments form so decided to look into spam detection. It seems that <a href=\"http://akismet.com/\">Akismet</a> is pretty much the standard for this. There is a <a href=\"http://www.codeplex.com/AkismetApi\" title=\"Akismet .Net 2.0 API\">.Net library</a> that wraps around the Akismet API and I am pretty happy with how easy it was to get it hooked up.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>Akismet api = new Akismet(&quot;AKISMET&#95;API&#95;KEY&quot;, &quot;http://rickyrosario.com&quot;, &quot;Ricky's Custom Blog/v1 | Akismet.Net 1.0.1&quot;);\r\nAkismetComment c = new AkismetComment();\r\nc.Blog = &quot;http://rickyrosario.com&quot;;\r\nc.UserIp = comment.AuthorIP;\r\nc.UserAgent = comment.AuthorUserAgentString;\r\nc.CommentContent = comment.Content;\r\nc.CommentType = &quot;comment&quot;;\r\nc.CommentAuthor = comment.Author;\r\nc.CommentAuthorEmail = comment.AuthorEmail;\r\nc.CommentAuthorUrl = comment.AuthorUrl;\r\n\r\nisSpam = api.CommentCheck(c);\r\n\r\nif (!isSpam) {\r\n   comment.IsRejected = false;\r\n} else {\r\n   comment.IsRejected = true;\r\n}\r\n</code></pre>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "A code sample for spam detection in .net using akismet api.", 
      "categories": [], 
      "modified": "2009-12-01 18:20:38", 
      "visits": 1, 
      "created": "2009-12-01 01:01:55", 
      "body_markup": "<p>\r\nI finally got fed up with the amount of spam that is coming in through the comments form so decided to look into spam detection. It seems that <a href=\"http://akismet.com/\">Akismet</a> is pretty much the standard for this. There is a <a href=\"http://www.codeplex.com/AkismetApi\" title=\"Akismet .Net 2.0 API\">.Net library</a> that wraps around the Akismet API and I am pretty happy with how easy it was to get it hooked up.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>Akismet api = new Akismet(&quot;AKISMET&#95;API&#95;KEY&quot;, &quot;http://rickyrosario.com&quot;, &quot;Ricky's Custom Blog/v1 | Akismet.Net 1.0.1&quot;);\r\nAkismetComment c = new AkismetComment();\r\nc.Blog = &quot;http://rickyrosario.com&quot;;\r\nc.UserIp = comment.AuthorIP;\r\nc.UserAgent = comment.AuthorUserAgentString;\r\nc.CommentContent = comment.Content;\r\nc.CommentType = &quot;comment&quot;;\r\nc.CommentAuthor = comment.Author;\r\nc.CommentAuthorEmail = comment.AuthorEmail;\r\nc.CommentAuthorUrl = comment.AuthorUrl;\r\n\r\nisSpam = api.CommentCheck(c);\r\n\r\nif (!isSpam) {\r\n   comment.IsRejected = false;\r\n} else {\r\n   comment.IsRejected = true;\r\n}\r\n</code></pre>", 
      "publish": "2009-02-07 00:00:00", 
      "title": "Akismet Spam Detection in .Net", 
      "slug": "akismet-spam-detection-in-dot-net", 
      "tags": "csharp aspnet akismet spam "
    }
  }, 
  {
    "pk": 25, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nI found this little known <a href=\"http://mike.verdone.ca/twitter/\">Twitter API library for Python</a> (<a href=\"http://github.com/sixohsix/twitter/tree/master\">on github</a>). It is minimalist and very simple which I love. It's so easy to interact with the Twitter API from your Python application, that I am almost embarrassed to blog about it.\r\n</p>\r\n\r\n<p>\r\nAfter <a href=\"http://github.com/sixohsix/twitter/tree/master\">downloading the library</a> and putting the twitter/ directory on your Python path, this is all code you have to write to update your Twitter status:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>from twitter.api import Twitter\r\n\r\ntwitter = Twitter('username','password')\r\ntwitter.statuses.update(status='I am tweeting from Python!')\r\n</code></pre>\r\n\r\n<p>\r\n<strong>Happy tweeting from Python!</strong>\r\n</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "Using this minimalist Twitter API library for Python makes tweeting from code a breeze.", 
      "categories": [], 
      "modified": "2009-12-01 15:26:32", 
      "visits": 1, 
      "created": "2009-12-01 00:59:20", 
      "body_markup": "<p>\r\nI found this little known <a href=\"http://mike.verdone.ca/twitter/\">Twitter API library for Python</a> (<a href=\"http://github.com/sixohsix/twitter/tree/master\">on github</a>). It is minimalist and very simple which I love. It's so easy to interact with the Twitter API from your Python application, that I am almost embarrassed to blog about it.\r\n</p>\r\n\r\n<p>\r\nAfter <a href=\"http://github.com/sixohsix/twitter/tree/master\">downloading the library</a> and putting the twitter/ directory on your Python path, this is all code you have to write to update your Twitter status:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>from twitter.api import Twitter\r\n\r\ntwitter = Twitter('username','password')\r\ntwitter.statuses.update(status='I am tweeting from Python!')\r\n</code></pre>\r\n\r\n<p>\r\n<strong>Happy tweeting from Python!</strong>\r\n</p>", 
      "publish": "2009-01-29 00:00:00", 
      "title": "Posting to Twitter from Python", 
      "slug": "posting-to-twitter-from-python", 
      "tags": "snippet twitter python "
    }
  }, 
  {
    "pk": 24, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nOne of the common practices of &quot;web 2.0 sites&quot; (a kitten just died) is to have hidden user interface elements\r\nsuddenly show up on hover. This is horrible for many reasons:\r\n</p>\r\n\r\n<ul>\r\n<li>\r\n    It makes functionality harder to discover.\r\n</li>\r\n<li>\r\n    It is very annoying to have things showing up when casually moving the mouse pointer\r\n    over a web page.\r\n</li>\r\n<li>\r\n    There is no hover on touchscreen devices. This is becoming more and more important\r\n    with the popularity of the iPhone and other touchscreen phones. Also, with Windows 7\r\n    natively supporting multi-touch, we are likely to see much more touch devices for the\r\n    home in the near future.\r\n</li>\r\n<li>\r\n    It isn't accessible. If you can't access the functionality with your keyboard, it just\r\n    isn't going to be accessible to those using screenreaders.\r\n</li>\r\n</ul>\r\n\r\n<p>\r\n    A <del class=\"strike\">good</del> bad example of this is the <a href=\"http://twitter.com\">twitter web interface</a>.\r\n    When you hover over individual tweets in your feed, notice how the favorite and reply\r\n    icons show up on hover.\r\n</p>\r\n<inline type=\"media.photo\" id=\"4\" class=\"\" />\r\n<p>\r\n    Pretty cool right? Now turn on a screenreader, turn off your monitor, unplug your mouse,\r\n    and try replying or fav'ing a tweet. It's impossible. Was it really necessary to hide\r\n    those icons in the first place?\r\n</p>\r\n\r\n<p>\r\n&lt;/endofrant&gt;\r\n</p>\r\n\r\n<p>\r\nSave the <a href=\"http://icanhascheezburger.com/\">kittens</a>, save the World!\r\n</p>\r\n", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "I am really starting to hate when sites hide functionality beneath hover effects.", 
      "categories": [], 
      "modified": "2009-12-01 00:57:14", 
      "visits": 0, 
      "created": "2009-12-01 00:57:14", 
      "body_markup": "<p>\r\nOne of the common practices of &quot;web 2.0 sites&quot; (a kitten just died) is to have hidden user interface elements\r\nsuddenly show up on hover. This is horrible for many reasons:\r\n</p>\r\n\r\n<ul>\r\n<li>\r\n    It makes functionality harder to discover.\r\n</li>\r\n<li>\r\n    It is very annoying to have things showing up when casually moving the mouse pointer\r\n    over a web page.\r\n</li>\r\n<li>\r\n    There is no hover on touchscreen devices. This is becoming more and more important\r\n    with the popularity of the iPhone and other touchscreen phones. Also, with Windows 7\r\n    natively supporting multi-touch, we are likely to see much more touch devices for the\r\n    home in the near future.\r\n</li>\r\n<li>\r\n    It isn't accessible. If you can't access the functionality with your keyboard, it just\r\n    isn't going to be accessible to those using screenreaders.\r\n</li>\r\n</ul>\r\n\r\n<p>\r\n    A <del class=\"strike\">good</del> bad example of this is the <a href=\"http://twitter.com\">twitter web interface</a>.\r\n    When you hover over individual tweets in your feed, notice how the favorite and reply\r\n    icons show up on hover.\r\n</p>\r\n<inline type=\"media.photo\" id=\"4\" class=\"\" />\r\n<p>\r\n    Pretty cool right? Now turn on a screenreader, turn off your monitor, unplug your mouse,\r\n    and try replying or fav'ing a tweet. It's impossible. Was it really necessary to hide\r\n    those icons in the first place?\r\n</p>\r\n\r\n<p>\r\n&lt;/endofrant&gt;\r\n</p>\r\n\r\n<p>\r\nSave the <a href=\"http://icanhascheezburger.com/\">kittens</a>, save the World!\r\n</p>\r\n", 
      "publish": "2009-01-19 00:00:00", 
      "title": "(DHTML) Hover Magic Sucks", 
      "slug": "dhtml-hover-magic-sucks", 
      "tags": "hover rant ux "
    }
  }, 
  {
    "pk": 23, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\n    I really can't think of anything to complain about this year that is about to end. What happened in 2008?\r\n</p>\r\n<ul>\r\n    <li>\r\n        <p>\r\n            My daughter had her first birthday and my wife and I completed our <a href=\"http://www.flickr.com/photos/boricua/sets/72157594444846251/\" title=\"natalia 365 flickr set\">Project 365</a>, where we took a picture of <a href=\"http://natalia365.com\" title=\"Natalia's Photo Blog\">our daughter</a>\r\n            every day in her first year of life. My daughter went on to grow from a baby to a toddler to a beautiful young girl.\r\n        </p>\r\n<p>\r\nhttp://www.flickr.com/photos/boricua/3102592560/\r\n</p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I bought a house and have been really enjoying it, and the pool that came along with it ;).\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I got promoted at <a href=\"http://razorfish.com\" title=\"razorfish\">work</a>\r\n            to <em>Presentation Layer Architect</em>.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            A <a href=\"http://belk.com\" title=\"Belk\">web site</a>\r\n            I worked on for 8-10 months (who's counting?) had a pretty successful launch.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I <a href=\"http://rickyrosario.com/blog/hello-world\" title=\"Hello World\">started</a>\r\n            <a href=\"http://rickyrosario.com\">this blog</a>\r\n            and posted 23 times including this last post\r\n            of the year.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I gave <a href=\"http://twitter.com/r1cky\">Twitter</a>\r\n            a try and got addicted. I am still loving it! As of right now I am following 66, have 47 followers and I updated 933 times.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I went to <a href=\"http://rickyrosario.com/blog/five-quotes-from-pdc08\" title=\"Five Quotes from #PDC08\">Microsoft PDC</a>\r\n            and it was awesome.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I got an <a href=\"http://rickyrosario.com/blog/got-iphone-bug\" title=\"http://rickyrosario.com/blog/got-iphone-bug\">iPhone</a>\r\n            and love it. Best app? <a href=\"http://ifartmobile.com\">iFart mobile</a>\r\n            ;)\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I picked up the basics of <a href=\"http://rickyrosario.com/blog/another-dotnet-dev-defects-to-python\" title=\"Another .Net Dev Defects to Python?\">python and django</a>\r\n            and am looking forward to doing some harm with them in 2009.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I feel that I am much better at web development, javascript, and software development in general by paying more attention to <a href=\"http://en.wikipedia.org/wiki/Design&#95;Patterns\">design patterns</a>, <a href=\"http://en.wikipedia.org/wiki/Object-oriented&#95;design\" title=\"Object Oriented Design\">OOD</a>\r\n            and <a href=\"http://en.wikipedia.org/wiki/Single&#95;responsibility&#95;principle\" title=\"Single responsibility principle\">S</a>.<a href=\"http://en.wikipedia.org/wiki/Open/closed&#95;principle\" title=\"Open/closed principle\">O</a>.<a href=\"http://en.wikipedia.org/wiki/Liskov&#95;substitution&#95;principle\" title=\"Liskov substitution principle\">L</a>.<a href=\"http://en.wikipedia.org/wiki/Interface&#95;segregation&#95;principle\" title=\"Interface segregation principle\">I</a>.<a href=\"http://en.wikipedia.org/wiki/Dependency&#95;inversion&#95;principle\" title=\"Dependency inversion principle\">D</a>. principles.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I dropped over 20 pounds from my all-time high weight last winter.\r\n            </p>\r\n        </li>\r\n        <li>\r\n            <p>\r\n                I went from barely being able to run 1 mile without stopping to recently completing 8 miles averaging 11 minutes/mile. Huge thanks to my <a href=\"http://nikeplus.com\">Nike+</a>\r\n                for keeping me motivated. I started using it in mid August and logged ~210 miles.\r\n            </p>\r\n        </li>\r\n    </ul>\r\n    <p style=\"font-size:116%;font-weight:bold;\">\r\n        Here is to a great 2009! KTHXBAI\r\n    </p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "A short summary of the highlights of 2008 as I remember them today.", 
      "categories": [], 
      "modified": "2009-12-01 00:52:56", 
      "visits": 0, 
      "created": "2009-12-01 00:45:54", 
      "body_markup": "<p>\r\n    I really can't think of anything to complain about this year that is about to end. What happened in 2008?\r\n</p>\r\n<ul>\r\n    <li>\r\n        <p>\r\n            My daughter had her first birthday and my wife and I completed our <a href=\"http://www.flickr.com/photos/boricua/sets/72157594444846251/\" title=\"natalia 365 flickr set\">Project 365</a>, where we took a picture of <a href=\"http://natalia365.com\" title=\"Natalia's Photo Blog\">our daughter</a>\r\n            every day in her first year of life. My daughter went on to grow from a baby to a toddler to a beautiful young girl.\r\n        </p>\r\n<p>\r\nhttp://www.flickr.com/photos/boricua/3102592560/\r\n</p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I bought a house and have been really enjoying it, and the pool that came along with it ;).\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I got promoted at <a href=\"http://razorfish.com\" title=\"razorfish\">work</a>\r\n            to <em>Presentation Layer Architect</em>.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            A <a href=\"http://belk.com\" title=\"Belk\">web site</a>\r\n            I worked on for 8-10 months (who's counting?) had a pretty successful launch.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I <a href=\"http://rickyrosario.com/blog/hello-world\" title=\"Hello World\">started</a>\r\n            <a href=\"http://rickyrosario.com\">this blog</a>\r\n            and posted 23 times including this last post\r\n            of the year.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I gave <a href=\"http://twitter.com/r1cky\">Twitter</a>\r\n            a try and got addicted. I am still loving it! As of right now I am following 66, have 47 followers and I updated 933 times.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I went to <a href=\"http://rickyrosario.com/blog/five-quotes-from-pdc08\" title=\"Five Quotes from #PDC08\">Microsoft PDC</a>\r\n            and it was awesome.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I got an <a href=\"http://rickyrosario.com/blog/got-iphone-bug\" title=\"http://rickyrosario.com/blog/got-iphone-bug\">iPhone</a>\r\n            and love it. Best app? <a href=\"http://ifartmobile.com\">iFart mobile</a>\r\n            ;)\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I picked up the basics of <a href=\"http://rickyrosario.com/blog/another-dotnet-dev-defects-to-python\" title=\"Another .Net Dev Defects to Python?\">python and django</a>\r\n            and am looking forward to doing some harm with them in 2009.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I feel that I am much better at web development, javascript, and software development in general by paying more attention to <a href=\"http://en.wikipedia.org/wiki/Design&#95;Patterns\">design patterns</a>, <a href=\"http://en.wikipedia.org/wiki/Object-oriented&#95;design\" title=\"Object Oriented Design\">OOD</a>\r\n            and <a href=\"http://en.wikipedia.org/wiki/Single&#95;responsibility&#95;principle\" title=\"Single responsibility principle\">S</a>.<a href=\"http://en.wikipedia.org/wiki/Open/closed&#95;principle\" title=\"Open/closed principle\">O</a>.<a href=\"http://en.wikipedia.org/wiki/Liskov&#95;substitution&#95;principle\" title=\"Liskov substitution principle\">L</a>.<a href=\"http://en.wikipedia.org/wiki/Interface&#95;segregation&#95;principle\" title=\"Interface segregation principle\">I</a>.<a href=\"http://en.wikipedia.org/wiki/Dependency&#95;inversion&#95;principle\" title=\"Dependency inversion principle\">D</a>. principles.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I dropped over 20 pounds from my all-time high weight last winter.\r\n            </p>\r\n        </li>\r\n        <li>\r\n            <p>\r\n                I went from barely being able to run 1 mile without stopping to recently completing 8 miles averaging 11 minutes/mile. Huge thanks to my <a href=\"http://nikeplus.com\">Nike+</a>\r\n                for keeping me motivated. I started using it in mid August and logged ~210 miles.\r\n            </p>\r\n        </li>\r\n    </ul>\r\n    <p style=\"font-size:116%;font-weight:bold;\">\r\n        Here is to a great 2009! KTHXBAI\r\n    </p>", 
      "publish": "2008-12-31 00:00:00", 
      "title": "2008: Thanks and Goodbye!", 
      "slug": "2008-thanks-and-goodbye", 
      "tags": "2008 review "
    }
  }, 
  {
    "pk": 22, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>One of the features that I have been procrastinating to implement is search. Every site needs some kind of search. For a site with basic needs (like a blog), <a href=\"http://www.google.com/coop/cse/\" title=\"Go to Google Custom Search Engine site\">Google Custom Search Engine</a> is a great option. You offload all the indexing to the company that does it best, and its free! You can even make some money by enabling adsense in your search results.</p>\r\n\r\n<p>It was super easy to do, just fill in a form and copy/paste the html into the master page.</p>\r\n\r\n<p>I did find something a little funny and annoying on the custom search engine site (control panel). I was using the Chrome browser and got a great message at the top of the site saying that the site didn't support my browser:</p>\r\n\r\n<blockquote>\r\nThe control panel does not fully support this Web browser. We recommend\r\nat least Firefox 2 or Internet Explorer 6.\r\n</blockquote>\r\n\r\n<p></p>\r\n\r\n<inline type=\"media.photo\" id=\"2\" class=\"\" />\r\n\r\n<p>REALLY GOOGLE, WTF?</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "Google Custom Search Engine is a great option for a blog's search feature.", 
      "categories": [], 
      "modified": "2009-12-01 00:42:10", 
      "visits": 0, 
      "created": "2009-12-01 00:42:10", 
      "body_markup": "<p>One of the features that I have been procrastinating to implement is search. Every site needs some kind of search. For a site with basic needs (like a blog), <a href=\"http://www.google.com/coop/cse/\" title=\"Go to Google Custom Search Engine site\">Google Custom Search Engine</a> is a great option. You offload all the indexing to the company that does it best, and its free! You can even make some money by enabling adsense in your search results.</p>\r\n\r\n<p>It was super easy to do, just fill in a form and copy/paste the html into the master page.</p>\r\n\r\n<p>I did find something a little funny and annoying on the custom search engine site (control panel). I was using the Chrome browser and got a great message at the top of the site saying that the site didn't support my browser:</p>\r\n\r\n<blockquote>\r\nThe control panel does not fully support this Web browser. We recommend\r\nat least Firefox 2 or Internet Explorer 6.\r\n</blockquote>\r\n\r\n<p></p>\r\n\r\n<inline type=\"media.photo\" id=\"2\" class=\"\" />\r\n\r\n<p>REALLY GOOGLE, WTF?</p>", 
      "publish": "2008-12-14 00:00:00", 
      "title": "Google Custom Search Engine for Your Site/Blog", 
      "slug": "google-custom-search-engine-for-your-site-blog", 
      "tags": "google chrome search "
    }
  }, 
  {
    "pk": 21, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nI've spent the past week tinkering with Python and Django. I went through the <a href=\"http://docs.python.org/tutorial/\" title=\"The Python Tutorial\">Python tutorial</a> and <a href=\"http://docs.djangoproject.com/en/dev/intro/tutorial01/?from=olddocs\" title=\"Writing your first Django app\">Django tutorial</a>.\r\n</p>\r\n\r\n<p>\r\nSo far I love it, so I'll be posting more about python/django in the near future. The good thing is that <a href=\"http://www.codeplex.com/IronPython\" title=\"IronPython Home\">Python</a> (and <a href=\"http://www.ironruby.net/\" title=\"IronRuby Home\">Ruby</a>) are now part of the .Net stack as well and play well with C# (or your favorite .Net language).\r\n</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "I have started playing with python and django and love it.", 
      "categories": [], 
      "modified": "2009-12-01 00:37:20", 
      "visits": 0, 
      "created": "2009-12-01 00:37:20", 
      "body_markup": "<p>\r\nI've spent the past week tinkering with Python and Django. I went through the <a href=\"http://docs.python.org/tutorial/\" title=\"The Python Tutorial\">Python tutorial</a> and <a href=\"http://docs.djangoproject.com/en/dev/intro/tutorial01/?from=olddocs\" title=\"Writing your first Django app\">Django tutorial</a>.\r\n</p>\r\n\r\n<p>\r\nSo far I love it, so I'll be posting more about python/django in the near future. The good thing is that <a href=\"http://www.codeplex.com/IronPython\" title=\"IronPython Home\">Python</a> (and <a href=\"http://www.ironruby.net/\" title=\"IronRuby Home\">Ruby</a>) are now part of the .Net stack as well and play well with C# (or your favorite .Net language).\r\n</p>", 
      "publish": "2008-12-05 00:00:00", 
      "title": "Another .Net Dev Defects to Python?", 
      "slug": "another-dotnet-dev-defects-to-python", 
      "tags": "python django "
    }
  }, 
  {
    "pk": 20, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nWhen it comes to updating a specific region of a page, there are many possible approaches. The most obvious and simple of them being AJAH (Asynchronous \r\n\r\nJavascript and HTML). Make a request to the server and replace a part of the page with the HTML response:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>\r\n// using jQuery for the ajax calls and CSS selectors\r\n$.get(\r\n    'ajah.html',\r\n    function(data){\r\n        $('#id-of-element-to-update').html(data);\r\n    }\r\n);\r\n</code></pre>\r\n\r\n<p>\r\nCool, but what if you want to update multiple regions of a page as a result of the one call? Then using plain AJAH doesn't really work as above. So what are \r\n\r\nyour options?\r\n</p>\r\n\r\n<ul>\r\n<li>\r\n<h3>AJAJ (Asynchronous Javascript and JSON)</h3>\r\n<p>\r\nThe server can return JSON for an object with properties that contain the HTML for each region. Like, for example:\r\n</p>\r\n<pre class=\"prettyprint\"><code>\r\n{\r\n    &quot;region-1&quot;: &quot;&lt;div&gt;some html to replace region 1 on the page&lt;\\/div&gt;&quot;,\r\n    &quot;region-2&quot;: &quot;&lt;div&gt;more html to replace region 2 on the page&lt;\\/div&gt;&quot;,\r\n}\r\n</code></pre>\r\n<p>\r\nNow all you need to do is update the regions with the property values of the response object:\r\n</p>\r\n<pre class=\"prettyprint\"><code>\r\n$.getJSON(\r\n    'ajaj.json',\r\n    function(data){\r\n        $('#region-1-id').html(data[\"region-1\"]);\r\n        $('#region-2-id').html(data[\"region-2\"]);\r\n    }\r\n);\r\n</code></pre>\r\n<p>\r\n<strong>NOTE:</strong> You have to &quot;<a href=\"/tools/html-jsonifier\" title=\"My HTML JSONifier\">JSONify you HTML</a>&quot; (javascript escape?) so that \r\n\r\nthe JSON remains valid. This means escaping the backslash and forward slash, double quotes, removing line-breaks, etc.\r\n</p>\r\n<p>\r\nThere are also quite a <a href=\"http://jtemplates.tpython.com/\" title=\"jTemplates is a template engine for JavaScript.\">few</a> <a \r\n\r\nhref=\"http://www.devhd.com/item0002.htm\" title=\"Reference: Miro, A Light-weight Javascript Template Engine\">client-side</a> <a \r\n\r\nhref=\"http://ejohn.org/blog/javascript-micro-templating/\" title=\"JavaScript Micro-Templating\">template</a> libraries out there. You can apply those to your \r\n\r\nJSON response and update the regions appropriately. What I don't like about client-side templates is that it usually means that you have two versions of the \r\n\r\nui rendering logic for those page regions, one for the server-side and one for the client-side.\r\n</p>\r\n\r\n<p>\r\nI should also mention that you can just put the ui rendering logic for updating the regions inline (using DOM manipulation or building HTML strings and using \r\n\r\ninnerHTML) with the rest of your JavaScript. But this isn't recommended because it is hard to maintain.\r\n</p>\r\n</li>\r\n<li>\r\n<h3>AJAH (Asynchronous Javascript and HTML</h3>\r\n<p>\r\nYou can also update multiple page regions by returning the HTML of each of these regions in the response, wrapped in a containing div for convenience:\r\n</p>\r\n<pre class=\"prettyprint\"><code>\r\n&lt;div class=&quot;ajah-response&quot;&gt;\r\n    &lt;div id=&quot;region-1&quot;&gt;\r\n        &lt;strong&gt;Region 1 updated via AJAH&lt;/strong&gt;\r\n    &lt;/div&gt;\r\n    &lt;div id=&quot;region-2&quot;&gt;\r\n        &lt;strong&gt;Region 2 updated via AJAH&lt;/strong&gt;\r\n    &lt;/div&gt;\r\n&lt;/div>\r\n</code></pre>\r\nThen we can update the regions with this new content from the response:\r\n<pre class=\"prettyprint\"><code>\r\n$.get(\r\n    'ajah.html',\r\n    function(data){\r\n        var $ajah = $(data);\r\n        $('#region-1-id').replaceWith($('#region-1',$ajah));\r\n        $('#region-2-id').replaceWith($('#region-2',$ajah));\r\n    }\r\n);\r\n</code></pre>\r\n</li>\r\n</ul>\r\n\r\n<h3>Recommendation?</h3>\r\n\r\n<p>\r\nAs usual, <strong>it depends</strong>...\r\n</p>\r\n\r\n<p>\r\nIn terms of client-side performance, the AJAH approach will be the fastest because there is no need to eval the JSON first. You just put the response into \r\n\r\nthe DOM and replace the appropriate nodes. It also is the simplest, especially if you are reusing the server side ui components that you used to render the \r\n\r\npage initially.\r\n</p>\r\n\r\n<p>\r\nIf there is a need to return additional state information or data that the client-side needs keep track of, then definitely an AJAJ approach is the way to \r\n\r\ngo. And in many Rich Internet Application cases where there is no need for the server-side ui code, the best approach is to do client-side templating and \r\n\r\nkeep the bulk of the html generation on the client-side.\r\n</p>\r\n\r\n<p>\r\nIsn't it funny that the universal term for XHR is AJAX and AJAX is probably the least common of AJAJ, AJAH, AJAX, etc? We all know that in practice HTML !== \r\n\r\nXML :).\r\n</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "Different approaches for asynchronously updating multiple regions of a page.", 
      "categories": [], 
      "modified": "2009-12-01 00:35:46", 
      "visits": 0, 
      "created": "2009-12-01 00:35:46", 
      "body_markup": "<p>\r\nWhen it comes to updating a specific region of a page, there are many possible approaches. The most obvious and simple of them being AJAH (Asynchronous \r\n\r\nJavascript and HTML). Make a request to the server and replace a part of the page with the HTML response:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>\r\n// using jQuery for the ajax calls and CSS selectors\r\n$.get(\r\n    'ajah.html',\r\n    function(data){\r\n        $('#id-of-element-to-update').html(data);\r\n    }\r\n);\r\n</code></pre>\r\n\r\n<p>\r\nCool, but what if you want to update multiple regions of a page as a result of the one call? Then using plain AJAH doesn't really work as above. So what are \r\n\r\nyour options?\r\n</p>\r\n\r\n<ul>\r\n<li>\r\n<h3>AJAJ (Asynchronous Javascript and JSON)</h3>\r\n<p>\r\nThe server can return JSON for an object with properties that contain the HTML for each region. Like, for example:\r\n</p>\r\n<pre class=\"prettyprint\"><code>\r\n{\r\n    &quot;region-1&quot;: &quot;&lt;div&gt;some html to replace region 1 on the page&lt;\\/div&gt;&quot;,\r\n    &quot;region-2&quot;: &quot;&lt;div&gt;more html to replace region 2 on the page&lt;\\/div&gt;&quot;,\r\n}\r\n</code></pre>\r\n<p>\r\nNow all you need to do is update the regions with the property values of the response object:\r\n</p>\r\n<pre class=\"prettyprint\"><code>\r\n$.getJSON(\r\n    'ajaj.json',\r\n    function(data){\r\n        $('#region-1-id').html(data[\"region-1\"]);\r\n        $('#region-2-id').html(data[\"region-2\"]);\r\n    }\r\n);\r\n</code></pre>\r\n<p>\r\n<strong>NOTE:</strong> You have to &quot;<a href=\"/tools/html-jsonifier\" title=\"My HTML JSONifier\">JSONify you HTML</a>&quot; (javascript escape?) so that \r\n\r\nthe JSON remains valid. This means escaping the backslash and forward slash, double quotes, removing line-breaks, etc.\r\n</p>\r\n<p>\r\nThere are also quite a <a href=\"http://jtemplates.tpython.com/\" title=\"jTemplates is a template engine for JavaScript.\">few</a> <a \r\n\r\nhref=\"http://www.devhd.com/item0002.htm\" title=\"Reference: Miro, A Light-weight Javascript Template Engine\">client-side</a> <a \r\n\r\nhref=\"http://ejohn.org/blog/javascript-micro-templating/\" title=\"JavaScript Micro-Templating\">template</a> libraries out there. You can apply those to your \r\n\r\nJSON response and update the regions appropriately. What I don't like about client-side templates is that it usually means that you have two versions of the \r\n\r\nui rendering logic for those page regions, one for the server-side and one for the client-side.\r\n</p>\r\n\r\n<p>\r\nI should also mention that you can just put the ui rendering logic for updating the regions inline (using DOM manipulation or building HTML strings and using \r\n\r\ninnerHTML) with the rest of your JavaScript. But this isn't recommended because it is hard to maintain.\r\n</p>\r\n</li>\r\n<li>\r\n<h3>AJAH (Asynchronous Javascript and HTML</h3>\r\n<p>\r\nYou can also update multiple page regions by returning the HTML of each of these regions in the response, wrapped in a containing div for convenience:\r\n</p>\r\n<pre class=\"prettyprint\"><code>\r\n&lt;div class=&quot;ajah-response&quot;&gt;\r\n    &lt;div id=&quot;region-1&quot;&gt;\r\n        &lt;strong&gt;Region 1 updated via AJAH&lt;/strong&gt;\r\n    &lt;/div&gt;\r\n    &lt;div id=&quot;region-2&quot;&gt;\r\n        &lt;strong&gt;Region 2 updated via AJAH&lt;/strong&gt;\r\n    &lt;/div&gt;\r\n&lt;/div>\r\n</code></pre>\r\nThen we can update the regions with this new content from the response:\r\n<pre class=\"prettyprint\"><code>\r\n$.get(\r\n    'ajah.html',\r\n    function(data){\r\n        var $ajah = $(data);\r\n        $('#region-1-id').replaceWith($('#region-1',$ajah));\r\n        $('#region-2-id').replaceWith($('#region-2',$ajah));\r\n    }\r\n);\r\n</code></pre>\r\n</li>\r\n</ul>\r\n\r\n<h3>Recommendation?</h3>\r\n\r\n<p>\r\nAs usual, <strong>it depends</strong>...\r\n</p>\r\n\r\n<p>\r\nIn terms of client-side performance, the AJAH approach will be the fastest because there is no need to eval the JSON first. You just put the response into \r\n\r\nthe DOM and replace the appropriate nodes. It also is the simplest, especially if you are reusing the server side ui components that you used to render the \r\n\r\npage initially.\r\n</p>\r\n\r\n<p>\r\nIf there is a need to return additional state information or data that the client-side needs keep track of, then definitely an AJAJ approach is the way to \r\n\r\ngo. And in many Rich Internet Application cases where there is no need for the server-side ui code, the best approach is to do client-side templating and \r\n\r\nkeep the bulk of the html generation on the client-side.\r\n</p>\r\n\r\n<p>\r\nIsn't it funny that the universal term for XHR is AJAX and AJAX is probably the least common of AJAJ, AJAH, AJAX, etc? We all know that in practice HTML !== \r\n\r\nXML :).\r\n</p>", 
      "publish": "2008-11-30 00:00:00", 
      "title": "AJAH or AJAJ for Updating Multiple Page Regions", 
      "slug": "ajah-or-ajaj-for-udating-multiple-page-regions", 
      "tags": "jquery ajax "
    }
  }, 
  {
    "pk": 19, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>I finally got myself an iphone today and this is my\r\nfirst attempt at blogging from it... So hard!</p>\r\n\r\n<p>Now I need to learn me some objective c.</p>\r\n\r\n<p>Oh, and make a mobile friendly version of this site.</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "I bought an iPhone today and am blogging from it", 
      "categories": [], 
      "modified": "2009-12-01 00:32:00", 
      "visits": 0, 
      "created": "2009-12-01 00:32:00", 
      "body_markup": "<p>I finally got myself an iphone today and this is my\r\nfirst attempt at blogging from it... So hard!</p>\r\n\r\n<p>Now I need to learn me some objective c.</p>\r\n\r\n<p>Oh, and make a mobile friendly version of this site.</p>", 
      "publish": "2008-11-09 00:00:00", 
      "title": "Got iphone bug", 
      "slug": "got-iphone-bug", 
      "tags": "iphone mobile "
    }
  }, 
  {
    "pk": 18, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>I went to my first <a href=\"http://microsoftpdc.com\" title=\"PDC site\">PDC</a> last week and it didn't disappoint. The food was ok, the snacks and booze were good, and the talks were great!</p>\r\n\r\n<p>By now there are probably a <a href=\"http://www.iunknown.com/2008/10/pdc-2008-wrap-up.html\" title=\"PDC 2008 Wrap-up\">bunch</a> of <a href=\"http://www.lazycoder.com/weblog/2008/10/27/where-do-you-want-to-go-today-the-cloud-azure/\" title=\"WHERE DO YOU WANT TO GO TODAY? THE CLOUD - AZURE\">blogs</a> <a href=\"http://haacked.com/archive/2008/11/01/pdc2008.aspx\" title=\"Hazy Recollections of PDC 2008\">posts</a> about what went down (cloud computing/Azure, Win 7), so I will just list some great quotes I heard in the talks at PDC08 (they were funny in context at the time, now they don't seem so funny anymore).</p>\r\n\r\n<ul>\r\n<li>\r\n<em>\"this is real world development, it isnt always pretty... it's a sausage factory\"</em> - <a href=\"http://codinghorror.com\" title=\"coding horror - programming and human factors\">Jeff Atwood</a> while explaining the current ~5% test coverage of <a href=\"http://stackoverflow.com\" title=\"Check out the sweetness that is Stack Overflow\">stackoverflow</a>.</li>\r\n<li>\r\n<em>\"MVC is manual transmission and webforms is automatic\"</em> - <a href=\"http://haacked.com/\" title=\"you've been haacked and you like it\">Phil Haack</a> explain the MVC pattern.</li>\r\n<li>\r\n<em>\"there is some goodness in the language... suprisingly\"</em> - <a href=\"http://www.crockford.com/\" title=\"Douglas Crockford's Wrrrld Wide Web\">Douglas Crockford</a> referring to javascript during the future of programming languages panel.</li>\r\n<li>\r\n<em>\"This is available today, so you don't have to wait until 2012\"</em> - <a href=\"http://tirania.org/blog/\" title=\"Miguel de Icaza's web log\">Miguel de Icaza</a> during his Mono and .Net talk.</li>\r\n<li>\r\n<em>\"writing code is fun, we don't do it for money</em> - <a href=\"http://blogs.msdn.com/lucabol/default.aspx\" title=\"Luca Bolognese's WebLog\">Luca Bolognese</a> during his F# talk.\r\n</li>\r\n</ul>\r\n\r\n<p>I had a great time at PDC08 and am ready to book my tix for next year :). Be sure to check out all the talks on <a href=\"http://channel9.msdn.com/\" title=\"Channel 9 site\">channel 9</a> for <strong>FREEEEEEEEEEE</strong>.</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "Great quotes I heard in the talks at PDC08", 
      "categories": [], 
      "modified": "2009-12-01 00:27:55", 
      "visits": 0, 
      "created": "2009-12-01 00:27:55", 
      "body_markup": "<p>I went to my first <a href=\"http://microsoftpdc.com\" title=\"PDC site\">PDC</a> last week and it didn't disappoint. The food was ok, the snacks and booze were good, and the talks were great!</p>\r\n\r\n<p>By now there are probably a <a href=\"http://www.iunknown.com/2008/10/pdc-2008-wrap-up.html\" title=\"PDC 2008 Wrap-up\">bunch</a> of <a href=\"http://www.lazycoder.com/weblog/2008/10/27/where-do-you-want-to-go-today-the-cloud-azure/\" title=\"WHERE DO YOU WANT TO GO TODAY? THE CLOUD - AZURE\">blogs</a> <a href=\"http://haacked.com/archive/2008/11/01/pdc2008.aspx\" title=\"Hazy Recollections of PDC 2008\">posts</a> about what went down (cloud computing/Azure, Win 7), so I will just list some great quotes I heard in the talks at PDC08 (they were funny in context at the time, now they don't seem so funny anymore).</p>\r\n\r\n<ul>\r\n<li>\r\n<em>\"this is real world development, it isnt always pretty... it's a sausage factory\"</em> - <a href=\"http://codinghorror.com\" title=\"coding horror - programming and human factors\">Jeff Atwood</a> while explaining the current ~5% test coverage of <a href=\"http://stackoverflow.com\" title=\"Check out the sweetness that is Stack Overflow\">stackoverflow</a>.</li>\r\n<li>\r\n<em>\"MVC is manual transmission and webforms is automatic\"</em> - <a href=\"http://haacked.com/\" title=\"you've been haacked and you like it\">Phil Haack</a> explain the MVC pattern.</li>\r\n<li>\r\n<em>\"there is some goodness in the language... suprisingly\"</em> - <a href=\"http://www.crockford.com/\" title=\"Douglas Crockford's Wrrrld Wide Web\">Douglas Crockford</a> referring to javascript during the future of programming languages panel.</li>\r\n<li>\r\n<em>\"This is available today, so you don't have to wait until 2012\"</em> - <a href=\"http://tirania.org/blog/\" title=\"Miguel de Icaza's web log\">Miguel de Icaza</a> during his Mono and .Net talk.</li>\r\n<li>\r\n<em>\"writing code is fun, we don't do it for money</em> - <a href=\"http://blogs.msdn.com/lucabol/default.aspx\" title=\"Luca Bolognese's WebLog\">Luca Bolognese</a> during his F# talk.\r\n</li>\r\n</ul>\r\n\r\n<p>I had a great time at PDC08 and am ready to book my tix for next year :). Be sure to check out all the talks on <a href=\"http://channel9.msdn.com/\" title=\"Channel 9 site\">channel 9</a> for <strong>FREEEEEEEEEEE</strong>.</p>", 
      "publish": "2008-11-02 00:00:00", 
      "title": "Five Quotes from #PDC08", 
      "slug": "five-quotes-from-pdc08", 
      "tags": "pdc microsoft "
    }
  }, 
  {
    "pk": 17, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>Apparently, ASP.Net MVC Beta 1 was quietly released yesterday and announced at VSLive in Vegas. Today, the blog posts came out and appeared in my reader:</p>\r\n\r\n<ul>\r\n<li><a href=\"http://weblogs.asp.net/scottgu/archive/2008/10/16/asp-net-mvc-beta-released.aspx\" title=\"ScottGu's Blog\">ScottGu's mandatory monster post - ASP.NET MVC Beta Released </a></li>\r\n<li><a href=\"http://haacked.com/archive/2008/10/16/aspnetmvc-beta-release.aspx\" title=\"Phil Haack's blog\">Phil Haack's (PM for ASP.NET MVC) post - ASP.NET MVC Beta Released!</a></li>\r\n<li><a href=\"http://www.hanselman.com/blog/ASPNETMVCBetaReleasedCoolnessEnsues.aspx\" title=\"Hanselman Powers\">ScottHa's post - ASP.NET MVC Beta released - Coolness Ensues</a></li>\r\n</ul>\r\n\r\n<p>I quickly downloaded the <a href=\"http://www.microsoft.com/downloads/details.aspx?FamilyId=A24D1E00-CD35-4F66-BAA0-2362BDDE0766&amp;displaylang=en\" title=\"Microsoft ASP.NET MVC Beta\">latest bits</a>, which for some reason are now hosted on microsoft.com instead of CodePlex (not sure why??). Also, since I am using extensions from the &quot;futures&quot; assembly, I downloaded the <a href=\"http://www.codeplex.com/aspnet/Release/ProjectReleases.aspx?ReleaseId=18459\" title=\"ASP.NET MVC Beta Futures \">latest Microsoft.Web.Mvc library</a> which is still available on codeplex.</p>\r\n\r\n<p>As far as updating my code for this site, it was pretty straightforward. I added the System.Web.Mvc.Html namespace to my Web.config:</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;namespaces&gt;\r\n  &lt;add namespace=\"System.Web.Mvc\"/&gt;\r\n  &lt;add namespace=\"System.Web.Mvc.Html\"/&gt;\r\n  &lt;add namespace=\"Microsoft.Web.Mvc\"/&gt;\r\n</code></pre>\r\n\r\n<p>The reason for this new namespace is that a lot of the HtmlHelper methods are now implemented as extensions in this namesapce.</p>\r\n\r\n<p>The final change I had to make was changing the Html.Form() helper which is now Html.BeginForm(). ScottGu has all the juicy details in his <a href=\"http://weblogs.asp.net/scottgu/archive/2008/10/16/asp-net-mvc-beta-released.aspx\" title=\"ScottGu's Blog\">post</a>.</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "The latest release of ASP.NET MVC (Beta 1) is out and I just updated the site to it.", 
      "categories": [], 
      "modified": "2009-12-01 00:25:55", 
      "visits": 0, 
      "created": "2009-12-01 00:25:55", 
      "body_markup": "<p>Apparently, ASP.Net MVC Beta 1 was quietly released yesterday and announced at VSLive in Vegas. Today, the blog posts came out and appeared in my reader:</p>\r\n\r\n<ul>\r\n<li><a href=\"http://weblogs.asp.net/scottgu/archive/2008/10/16/asp-net-mvc-beta-released.aspx\" title=\"ScottGu's Blog\">ScottGu's mandatory monster post - ASP.NET MVC Beta Released </a></li>\r\n<li><a href=\"http://haacked.com/archive/2008/10/16/aspnetmvc-beta-release.aspx\" title=\"Phil Haack's blog\">Phil Haack's (PM for ASP.NET MVC) post - ASP.NET MVC Beta Released!</a></li>\r\n<li><a href=\"http://www.hanselman.com/blog/ASPNETMVCBetaReleasedCoolnessEnsues.aspx\" title=\"Hanselman Powers\">ScottHa's post - ASP.NET MVC Beta released - Coolness Ensues</a></li>\r\n</ul>\r\n\r\n<p>I quickly downloaded the <a href=\"http://www.microsoft.com/downloads/details.aspx?FamilyId=A24D1E00-CD35-4F66-BAA0-2362BDDE0766&amp;displaylang=en\" title=\"Microsoft ASP.NET MVC Beta\">latest bits</a>, which for some reason are now hosted on microsoft.com instead of CodePlex (not sure why??). Also, since I am using extensions from the &quot;futures&quot; assembly, I downloaded the <a href=\"http://www.codeplex.com/aspnet/Release/ProjectReleases.aspx?ReleaseId=18459\" title=\"ASP.NET MVC Beta Futures \">latest Microsoft.Web.Mvc library</a> which is still available on codeplex.</p>\r\n\r\n<p>As far as updating my code for this site, it was pretty straightforward. I added the System.Web.Mvc.Html namespace to my Web.config:</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;namespaces&gt;\r\n  &lt;add namespace=\"System.Web.Mvc\"/&gt;\r\n  &lt;add namespace=\"System.Web.Mvc.Html\"/&gt;\r\n  &lt;add namespace=\"Microsoft.Web.Mvc\"/&gt;\r\n</code></pre>\r\n\r\n<p>The reason for this new namespace is that a lot of the HtmlHelper methods are now implemented as extensions in this namesapce.</p>\r\n\r\n<p>The final change I had to make was changing the Html.Form() helper which is now Html.BeginForm(). ScottGu has all the juicy details in his <a href=\"http://weblogs.asp.net/scottgu/archive/2008/10/16/asp-net-mvc-beta-released.aspx\" title=\"ScottGu's Blog\">post</a>.</p>", 
      "publish": "2008-10-16 00:00:00", 
      "title": "ASP.NET MVC Beta 1 Released", 
      "slug": "asp-net-mvc-beta-1-released", 
      "tags": "aspnetmvc "
    }
  }, 
  {
    "pk": 16, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>Lots of buzz around the two technologies I use the most: jQuery and ASP.Net... No need to repeat what has already been said:</p>\r\n\r\n<ul>\r\n<li>\r\n<a href=\"http://jquery.com/blog/2008/09/28/jquery-microsoft-nokia/\" title=\"Go to the jQuery Blog\">jQuery, Microsoft, and Nokia</a> - jQuery blog\r\n</li>\r\n<li>\r\n<a href=\"http://weblogs.asp.net/scottgu/archive/2008/09/28/jquery-and-microsoft.aspx\" title=\"Go to ScottGu's blog\">jQuery and Microsoft</a> - ScottGu's blog\r\n</li>\r\n<li>\r\n<a href=\"http://www.hanselman.com/blog/jQueryToShipWithASPNETMVCAndVisualStudio.aspx\" title=\"Go to ScottHa's blog\">jQuery to ship with ASP.NET MVC and Visual Studio</a> - ScottHa's blog\r\n</li>\r\n<li>\r\n<a href=\"http://blog.wekeroad.com/blog/jquery-and-visual-studio-bff/\" title=\"Go to RobCon's blog\">jQuery and Visual Studio BFF</a> - RobCon's blog\r\n</li>\r\n</ul>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "jQuery to be integrated into Visual Studio and officially supported by Microsoft.", 
      "categories": [], 
      "modified": "2009-12-01 00:24:23", 
      "visits": 0, 
      "created": "2009-12-01 00:24:23", 
      "body_markup": "<p>Lots of buzz around the two technologies I use the most: jQuery and ASP.Net... No need to repeat what has already been said:</p>\r\n\r\n<ul>\r\n<li>\r\n<a href=\"http://jquery.com/blog/2008/09/28/jquery-microsoft-nokia/\" title=\"Go to the jQuery Blog\">jQuery, Microsoft, and Nokia</a> - jQuery blog\r\n</li>\r\n<li>\r\n<a href=\"http://weblogs.asp.net/scottgu/archive/2008/09/28/jquery-and-microsoft.aspx\" title=\"Go to ScottGu's blog\">jQuery and Microsoft</a> - ScottGu's blog\r\n</li>\r\n<li>\r\n<a href=\"http://www.hanselman.com/blog/jQueryToShipWithASPNETMVCAndVisualStudio.aspx\" title=\"Go to ScottHa's blog\">jQuery to ship with ASP.NET MVC and Visual Studio</a> - ScottHa's blog\r\n</li>\r\n<li>\r\n<a href=\"http://blog.wekeroad.com/blog/jquery-and-visual-studio-bff/\" title=\"Go to RobCon's blog\">jQuery and Visual Studio BFF</a> - RobCon's blog\r\n</li>\r\n</ul>", 
      "publish": "2008-09-28 00:00:00", 
      "title": "ASP.Net and jQuery Get Married", 
      "slug": "asp-net-and-jquery-get-married", 
      "tags": "jquery aspnet visualstudio "
    }
  }, 
  {
    "pk": 15, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>I should have been logging information and errors from day 1, but I guess its never too late to start. Based on <a href=\"http://blog.wekeroad.com/mvc-storefront/mvcstore-part-20/\" title=\"MVC Storefront Part 20: Logging\">Rob Conery's &quot;endorsement&quot;</a>, I chose to try <a href=\"http://www.nlog-project.org/\" title=\"NLog - A .NET Logging Library\">NLog</a>.</p>\r\n\r\n<p>Step 1 was obviously to <a href=\"http://www.nlog-project.org/download.html\" title=\"Downloading NLog\">download</a> the library. Then, I added the reference to NLog.dll in my web project and configured it. For configuration, NLog uses its own configuration file separate from Web.config and you don't have to do any modifications to Web.config at all. Below is my NLog.config, which is set up to log everything of level Info and above to the file specified (NLog.config goes in the root of the web app). As you can see, it is very straightforward to configure for your own needs:</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\r\n&lt;nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" &gt;\r\n  &lt;targets&gt;\r\n    &lt;target name=\"console\" xsi:type=\"ColoredConsole\"\r\n      layout=\"${date:format=HH\\:mm\\:ss}|${level}|${stacktrace}|${message}\" /&gt;\r\n    &lt;target name=\"file\" xsi:type=\"File\" fileName=\"${basedir}/Logs/rrLog.log\"\r\n      layout=\"${date}: ${message}\" /&gt;\r\n  &lt;/targets&gt;\r\n  &lt;rules&gt;\r\n    &lt;logger name=\"*\" minlevel=\"Info\" writeTo=\"file\" /&gt;\r\n  &lt;/rules&gt;\r\n&lt;/nlog&gt;\r\n</code></pre>\r\n\r\n<p>After this, all that is left is to actually put in your log statements. So for example, to log all unhandled exceptions in your ASP.Net application, put the following in Global.asax.cs:</p>\r\n\r\n<pre class=\"prettyprint\"><code>protected void Application&#95;Error() {\r\n   Exception lastException = Server.GetLastError();\r\n   NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();\r\n   logger.Fatal(lastException);\r\n}\r\n</code></pre>\r\n\r\n<p>And that's it! It can't be any easier than that, so I am pretty happy with NLog right now. I might checkout <a href=\"http://logging.apache.org/log4net/index.html\" title=\"Apache Log4Net Home Page\">Log4Net</a> sometime to make a comparison, but I don't have any reason to do so at this point. BTW, I recommend creating your own Logger service that wraps NLog so that you can easily switch to a different library if needed. I'll be doing that right now.</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "My experience implementing logging on this site using NLog. It was very easy!", 
      "categories": [], 
      "modified": "2009-12-01 00:22:15", 
      "visits": 0, 
      "created": "2009-12-01 00:22:15", 
      "body_markup": "<p>I should have been logging information and errors from day 1, but I guess its never too late to start. Based on <a href=\"http://blog.wekeroad.com/mvc-storefront/mvcstore-part-20/\" title=\"MVC Storefront Part 20: Logging\">Rob Conery's &quot;endorsement&quot;</a>, I chose to try <a href=\"http://www.nlog-project.org/\" title=\"NLog - A .NET Logging Library\">NLog</a>.</p>\r\n\r\n<p>Step 1 was obviously to <a href=\"http://www.nlog-project.org/download.html\" title=\"Downloading NLog\">download</a> the library. Then, I added the reference to NLog.dll in my web project and configured it. For configuration, NLog uses its own configuration file separate from Web.config and you don't have to do any modifications to Web.config at all. Below is my NLog.config, which is set up to log everything of level Info and above to the file specified (NLog.config goes in the root of the web app). As you can see, it is very straightforward to configure for your own needs:</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\r\n&lt;nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" &gt;\r\n  &lt;targets&gt;\r\n    &lt;target name=\"console\" xsi:type=\"ColoredConsole\"\r\n      layout=\"${date:format=HH\\:mm\\:ss}|${level}|${stacktrace}|${message}\" /&gt;\r\n    &lt;target name=\"file\" xsi:type=\"File\" fileName=\"${basedir}/Logs/rrLog.log\"\r\n      layout=\"${date}: ${message}\" /&gt;\r\n  &lt;/targets&gt;\r\n  &lt;rules&gt;\r\n    &lt;logger name=\"*\" minlevel=\"Info\" writeTo=\"file\" /&gt;\r\n  &lt;/rules&gt;\r\n&lt;/nlog&gt;\r\n</code></pre>\r\n\r\n<p>After this, all that is left is to actually put in your log statements. So for example, to log all unhandled exceptions in your ASP.Net application, put the following in Global.asax.cs:</p>\r\n\r\n<pre class=\"prettyprint\"><code>protected void Application&#95;Error() {\r\n   Exception lastException = Server.GetLastError();\r\n   NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();\r\n   logger.Fatal(lastException);\r\n}\r\n</code></pre>\r\n\r\n<p>And that's it! It can't be any easier than that, so I am pretty happy with NLog right now. I might checkout <a href=\"http://logging.apache.org/log4net/index.html\" title=\"Apache Log4Net Home Page\">Log4Net</a> sometime to make a comparison, but I don't have any reason to do so at this point. BTW, I recommend creating your own Logger service that wraps NLog so that you can easily switch to a different library if needed. I'll be doing that right now.</p>", 
      "publish": "2008-09-21 00:00:00", 
      "title": "ASP.Net Logging Using NLog", 
      "slug": "asp-net-logging-using-nlog", 
      "tags": "aspnet logging "
    }
  }, 
  {
    "pk": 14, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>I am on my third implementation of paging for blog posts, and finally am happy~ish with the implementation :). I first had an inline for loop (not very reusable), then I moved the code to a partial view (it was ok, but didn't feel quite right), and now I have finally settled on extending the HtmlHelper object.</p>\r\n\r\n<p>I started off with <a href=\"http://weblogs.asp.net/scottgu/\" title=\"The Gu's Blog\">ScottGu</a>'s PagedList&lt;T&gt; that I found on <a href=\"http://blog.wekeroad.com/2007/12/10/aspnet-mvc-pagedlistt/\" title=\"ASP.NET MVC: PagedList&lt;T&gt;\">Rob Conery's blog</a>. I made some small modifications based on my needs and preferences: <a href=\"/Content/assets/mvc-paging/PagedList.cs.txt\" title=\"download PagedList.cs\">download here</a>. I basically ended up with IPagedList and IPagedList&lt;T&gt; interfaces and the PagedList&lt;T&gt; implementation itself. I needed the IPagedList&lt;T&gt; so that I could have strongly typed objects in the View, but the pager itself doesn't need to know the type. So, it gets the plain IPagedList.</p>\r\n\r\n<p>Here is my Paging extension method:</p>\r\n\r\n<pre class=\"prettyprint\"><code>public static string Paging(this HtmlHelper html, IPagedList pagedList,\r\n     string url, string pagePlaceHolder) {\r\n\r\n     StringBuilder sb = new StringBuilder();\r\n\r\n     // only show paging if we have more items than the page size\r\n     if (pagedList.ItemCount &gt; pagedList.PageSize) {\r\n\r\n        sb.Append(\"&lt;ul class=\\\"paging\\\"&gt;\");\r\n\r\n        if (pagedList.IsPreviousPage) { // previous link\r\n           sb.Append(\"&lt;li class=\\\"prev\\\"&gt;&lt;a href=\\\"\");\r\n           sb.Append(url.Replace(pagePlaceHolder, pagedList.PageIndex.ToString()));\r\n           sb.Append(\"\\\" title=\\\"Go to Previous Page\\\"&gt;prev&lt;/a&gt;&lt;/li&gt;\");\r\n        }\r\n\r\n        for (int i = 0; i &lt; pagedList.PageCount; i++) {\r\n           sb.Append(\"&lt;li&gt;\");\r\n           if (i == pagedList.PageIndex) {\r\n              sb.Append(\"&lt;span&gt;\").Append( (i+1).ToString() ).Append(\"&lt;/span&gt;\");\r\n           } else {\r\n              sb.Append(\"&lt;a href=\\\"\");\r\n              sb.Append(url.Replace(pagePlaceHolder, (i+1).ToString()));\r\n              sb.Append(\"\\\" title=\\\"Go to Page \").Append( (i+1).ToString() );\r\n              sb.Append(\"\\\"&gt;\").Append( (i+1).ToString() ).Append(\"&lt;/a&gt;\");\r\n           }\r\n           sb.Append(\"&lt;/li&gt;\");\r\n        }\r\n\r\n        if (pagedList.IsNextPage) { // next link\r\n           sb.Append(\"&lt;li class=\\\"next\\\"&gt;&lt;a href=\\\"\");\r\n           sb.Append(url.Replace(pagePlaceHolder, (pagedList.PageIndex + 2).ToString()));\r\n           sb.Append(\"\\\" title=\\\"Go to Next Page\\\"&gt;next&lt;/a&gt;&lt;/li&gt;\");\r\n        }\r\n\r\n        sb.Append(\"&lt;/ul&gt;\");\r\n     }\r\n\r\n     return sb.ToString();\r\n  }\r\n</code></pre>\r\n\r\n<p>This is how you would invoke the method from a view:</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;%= Html.Paging(ViewData.Model, Url.Action(&quot;Index&quot;,&quot;Blog&quot;, new { page = &quot;&#95;&#95;PAGENUM&#95;&#95;&quot; }), &quot;&#95;&#95;PAGENUM&#95;&#95;&quot;) %&gt;\r\n</code></pre>\r\n\r\n<p>\r\nAs you can see, the method takes in an IPagedList, a URL with a placeholder for the page number, and the placeholder value itself. This way the pager can easily create links to the pages by simple replacing the placeholder with the page number desired.\r\n</p>\r\n\r\n<p>\r\nAfter implementing this, I googled around to see if I had reinvented the wheel. I did find that <a href=\"http://blogs.taiga.nl/martijn/archive/2008/08/27/paging-with-asp.net-mvc.aspx\" title=\"Paging with ASP.NET MVC\">Martijn Boland implemented a pager thats a bit more sophisticated</a>. But does a pager class/method really need to know how to use the RouteTable to create URLs? I would prefer that it not. In fact, my code can be used in web forms and other non asp.net mvc projects.\r\n</p>\r\n\r\n<p>\r\n<strong>Update (9/18/2008):</strong> Two more MVC paging related blog posts:\r\n</p>\r\n\r\n<ul>\r\n<li><a href=\"http://weblogs.asp.net/stephenwalther/archive/2008/09/18/asp-net-mvc-tip-44-create-a-pager-html-helper.aspx\" title=\"ASP.NET MVC Tip #44 \u2013 Create a Pager HTML Helper\">ASP.NET MVC Tip #44 \u2013 Create a Pager HTML Helper</a></li>\r\n<li><a href=\"http://www.squaredroot.com/post/2008/07/08/PagedList-Strikes-Back.aspx\" title=\"PagedList Strikes Back\">PagedList Strikes Back</a></li>\r\n</ul>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "This post discusses modifications to the (I)PagedList and extending HtmlHelper for simple paging.", 
      "categories": [], 
      "modified": "2009-12-01 00:16:32", 
      "visits": 0, 
      "created": "2009-12-01 00:16:32", 
      "body_markup": "<p>I am on my third implementation of paging for blog posts, and finally am happy~ish with the implementation :). I first had an inline for loop (not very reusable), then I moved the code to a partial view (it was ok, but didn't feel quite right), and now I have finally settled on extending the HtmlHelper object.</p>\r\n\r\n<p>I started off with <a href=\"http://weblogs.asp.net/scottgu/\" title=\"The Gu's Blog\">ScottGu</a>'s PagedList&lt;T&gt; that I found on <a href=\"http://blog.wekeroad.com/2007/12/10/aspnet-mvc-pagedlistt/\" title=\"ASP.NET MVC: PagedList&lt;T&gt;\">Rob Conery's blog</a>. I made some small modifications based on my needs and preferences: <a href=\"/Content/assets/mvc-paging/PagedList.cs.txt\" title=\"download PagedList.cs\">download here</a>. I basically ended up with IPagedList and IPagedList&lt;T&gt; interfaces and the PagedList&lt;T&gt; implementation itself. I needed the IPagedList&lt;T&gt; so that I could have strongly typed objects in the View, but the pager itself doesn't need to know the type. So, it gets the plain IPagedList.</p>\r\n\r\n<p>Here is my Paging extension method:</p>\r\n\r\n<pre class=\"prettyprint\"><code>public static string Paging(this HtmlHelper html, IPagedList pagedList,\r\n     string url, string pagePlaceHolder) {\r\n\r\n     StringBuilder sb = new StringBuilder();\r\n\r\n     // only show paging if we have more items than the page size\r\n     if (pagedList.ItemCount &gt; pagedList.PageSize) {\r\n\r\n        sb.Append(\"&lt;ul class=\\\"paging\\\"&gt;\");\r\n\r\n        if (pagedList.IsPreviousPage) { // previous link\r\n           sb.Append(\"&lt;li class=\\\"prev\\\"&gt;&lt;a href=\\\"\");\r\n           sb.Append(url.Replace(pagePlaceHolder, pagedList.PageIndex.ToString()));\r\n           sb.Append(\"\\\" title=\\\"Go to Previous Page\\\"&gt;prev&lt;/a&gt;&lt;/li&gt;\");\r\n        }\r\n\r\n        for (int i = 0; i &lt; pagedList.PageCount; i++) {\r\n           sb.Append(\"&lt;li&gt;\");\r\n           if (i == pagedList.PageIndex) {\r\n              sb.Append(\"&lt;span&gt;\").Append( (i+1).ToString() ).Append(\"&lt;/span&gt;\");\r\n           } else {\r\n              sb.Append(\"&lt;a href=\\\"\");\r\n              sb.Append(url.Replace(pagePlaceHolder, (i+1).ToString()));\r\n              sb.Append(\"\\\" title=\\\"Go to Page \").Append( (i+1).ToString() );\r\n              sb.Append(\"\\\"&gt;\").Append( (i+1).ToString() ).Append(\"&lt;/a&gt;\");\r\n           }\r\n           sb.Append(\"&lt;/li&gt;\");\r\n        }\r\n\r\n        if (pagedList.IsNextPage) { // next link\r\n           sb.Append(\"&lt;li class=\\\"next\\\"&gt;&lt;a href=\\\"\");\r\n           sb.Append(url.Replace(pagePlaceHolder, (pagedList.PageIndex + 2).ToString()));\r\n           sb.Append(\"\\\" title=\\\"Go to Next Page\\\"&gt;next&lt;/a&gt;&lt;/li&gt;\");\r\n        }\r\n\r\n        sb.Append(\"&lt;/ul&gt;\");\r\n     }\r\n\r\n     return sb.ToString();\r\n  }\r\n</code></pre>\r\n\r\n<p>This is how you would invoke the method from a view:</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;%= Html.Paging(ViewData.Model, Url.Action(&quot;Index&quot;,&quot;Blog&quot;, new { page = &quot;&#95;&#95;PAGENUM&#95;&#95;&quot; }), &quot;&#95;&#95;PAGENUM&#95;&#95;&quot;) %&gt;\r\n</code></pre>\r\n\r\n<p>\r\nAs you can see, the method takes in an IPagedList, a URL with a placeholder for the page number, and the placeholder value itself. This way the pager can easily create links to the pages by simple replacing the placeholder with the page number desired.\r\n</p>\r\n\r\n<p>\r\nAfter implementing this, I googled around to see if I had reinvented the wheel. I did find that <a href=\"http://blogs.taiga.nl/martijn/archive/2008/08/27/paging-with-asp.net-mvc.aspx\" title=\"Paging with ASP.NET MVC\">Martijn Boland implemented a pager thats a bit more sophisticated</a>. But does a pager class/method really need to know how to use the RouteTable to create URLs? I would prefer that it not. In fact, my code can be used in web forms and other non asp.net mvc projects.\r\n</p>\r\n\r\n<p>\r\n<strong>Update (9/18/2008):</strong> Two more MVC paging related blog posts:\r\n</p>\r\n\r\n<ul>\r\n<li><a href=\"http://weblogs.asp.net/stephenwalther/archive/2008/09/18/asp-net-mvc-tip-44-create-a-pager-html-helper.aspx\" title=\"ASP.NET MVC Tip #44 \u2013 Create a Pager HTML Helper\">ASP.NET MVC Tip #44 \u2013 Create a Pager HTML Helper</a></li>\r\n<li><a href=\"http://www.squaredroot.com/post/2008/07/08/PagedList-Strikes-Back.aspx\" title=\"PagedList Strikes Back\">PagedList Strikes Back</a></li>\r\n</ul>", 
      "publish": "2008-09-16 00:00:00", 
      "title": "Simple HtmlHelper Extension for Paging in ASP.Net MVC", 
      "slug": "simple-htmlhelper-extension-for-paging-in-asp-net-mvc", 
      "tags": "aspnetmvc "
    }
  }, 
  {
    "pk": 13, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>I added the Twitter updates to the site and then realized that the URL's in the tweets come as plain text and not as &lt;a /&gt; links. So I created a function to detect URLs in a given string and convert them into links. It uses a regular expression for the URL detection...</p>\r\n\r\n<pre class=\"prettyprint\"><code>private string ConvertUrlsToLinks(string msg) {\r\n        string regex = @\"((www\\.|(http|https|ftp|news|file)+\\:\\/\\/)[&amp;#95;.a-z0-9-]+\\.[a-z0-9\\/&amp;#95;:@=.+?,##%&amp;~-]*[^.|\\'|\\# |!|\\(|?|,| |&gt;|&lt;|;|\\)])\";\r\n        Regex r = new Regex(regex, RegexOptions.IgnoreCase);\r\n        return r.Replace(msg, \"&lt;a href=\\\"$1\\\" title=\\\"Click to open in a new window or tab\\\" target=\\\"&amp;#95;blank\\\"&gt;$1&lt;/a&gt;\").Replace(\"href=\\\"www\", \"href=\\\"http://www\");\r\n    }\r\n</code></pre>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "A C# code snippet that detects URLs and coverts them to links.", 
      "categories": [], 
      "modified": "2009-12-01 00:14:47", 
      "visits": 0, 
      "created": "2009-12-01 00:14:47", 
      "body_markup": "<p>I added the Twitter updates to the site and then realized that the URL's in the tweets come as plain text and not as &lt;a /&gt; links. So I created a function to detect URLs in a given string and convert them into links. It uses a regular expression for the URL detection...</p>\r\n\r\n<pre class=\"prettyprint\"><code>private string ConvertUrlsToLinks(string msg) {\r\n        string regex = @\"((www\\.|(http|https|ftp|news|file)+\\:\\/\\/)[&amp;#95;.a-z0-9-]+\\.[a-z0-9\\/&amp;#95;:@=.+?,##%&amp;~-]*[^.|\\'|\\# |!|\\(|?|,| |&gt;|&lt;|;|\\)])\";\r\n        Regex r = new Regex(regex, RegexOptions.IgnoreCase);\r\n        return r.Replace(msg, \"&lt;a href=\\\"$1\\\" title=\\\"Click to open in a new window or tab\\\" target=\\\"&amp;#95;blank\\\"&gt;$1&lt;/a&gt;\").Replace(\"href=\\\"www\", \"href=\\\"http://www\");\r\n    }\r\n</code></pre>", 
      "publish": "2008-09-12 00:00:00", 
      "title": "Converting a URL into a Link in C# Using Regular Expressions", 
      "slug": "converting-a-url-into-a-link-in-csharp-using-regular-expressions", 
      "tags": "snippet regex csharp "
    }
  }, 
  {
    "pk": 12, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>I thought it would be cool to have my Twitter status show up on the site so I looked up the <a href=\"http://apiwiki.twitter.com/\">Twitter API documentation</a> and got to work. It is very simple and easy to use, especially if you are just retrieving public tweets. It allows you to retrieve the timeline(s) in different formats such as JSON, XML, RSS, etc. Since I will be making the call from the server side in ASP.NET, I chose the XML format and used LINQ to XML to get the status:</p>\r\n\r\n<pre class=\"prettyprint\"><code>public string GetTwitterStatus() {\r\n\r\n        XDocument feed = XDocument.Load(\"http://twitter.com/statuses/user&#95;timeline/r1cky.xml?count=1\");\r\n\r\n        return (from item in feed.Descendants(\"status\")\r\n            select item.Element(\"text\").Value).SingleOrDefault();\r\n    }\r\n</code></pre>\r\n\r\n<p>As you can see, the code is very similar to the code for <a href=\"http://rickyrosario.com/blog/consuming-a-delicious-rss-feed-using-linq-to-xml\" title=\"Consuming a (delicious) RSS Feed Using LINQ to XML\">retrieving my delicious RSS feed</a>. Be sure to cache the result because Twitter throttles the use of the API.</p>\r\n\r\n<p>If you are going to do more complex actions, like updating your status or looking up private/protected timelines, then you need to authenticate. At this point, the authentication is just <a href=\"http://en.wikipedia.org/wiki/Basic&#95;access&#95;authentication\" title=\"Basic access authentication (Wikipedia)\">Basic HTTP Auth</a> so its not very secure but not hard to implement either ;).</p>\r\n\r\n<p>\r\n<strong>Update (9/8/08):</strong> In case you need it, below is the code to parse the created&#95;at date from the Twitter XML format. \r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>DateTime.ParseExact(item.Element(\"created&#95;at\").Value, \"ddd MMM dd HH:mm:ss zzz yyyy\", CultureInfo.InvariantCulture);\r\n</code></pre>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "How to retrieve your twitter status using .net and linq to xml...", 
      "categories": [], 
      "modified": "2009-12-01 00:10:40", 
      "visits": 0, 
      "created": "2009-12-01 00:10:40", 
      "body_markup": "<p>I thought it would be cool to have my Twitter status show up on the site so I looked up the <a href=\"http://apiwiki.twitter.com/\">Twitter API documentation</a> and got to work. It is very simple and easy to use, especially if you are just retrieving public tweets. It allows you to retrieve the timeline(s) in different formats such as JSON, XML, RSS, etc. Since I will be making the call from the server side in ASP.NET, I chose the XML format and used LINQ to XML to get the status:</p>\r\n\r\n<pre class=\"prettyprint\"><code>public string GetTwitterStatus() {\r\n\r\n        XDocument feed = XDocument.Load(\"http://twitter.com/statuses/user&#95;timeline/r1cky.xml?count=1\");\r\n\r\n        return (from item in feed.Descendants(\"status\")\r\n            select item.Element(\"text\").Value).SingleOrDefault();\r\n    }\r\n</code></pre>\r\n\r\n<p>As you can see, the code is very similar to the code for <a href=\"http://rickyrosario.com/blog/consuming-a-delicious-rss-feed-using-linq-to-xml\" title=\"Consuming a (delicious) RSS Feed Using LINQ to XML\">retrieving my delicious RSS feed</a>. Be sure to cache the result because Twitter throttles the use of the API.</p>\r\n\r\n<p>If you are going to do more complex actions, like updating your status or looking up private/protected timelines, then you need to authenticate. At this point, the authentication is just <a href=\"http://en.wikipedia.org/wiki/Basic&#95;access&#95;authentication\" title=\"Basic access authentication (Wikipedia)\">Basic HTTP Auth</a> so its not very secure but not hard to implement either ;).</p>\r\n\r\n<p>\r\n<strong>Update (9/8/08):</strong> In case you need it, below is the code to parse the created&#95;at date from the Twitter XML format. \r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>DateTime.ParseExact(item.Element(\"created&#95;at\").Value, \"ddd MMM dd HH:mm:ss zzz yyyy\", CultureInfo.InvariantCulture);\r\n</code></pre>", 
      "publish": "2008-09-06 00:00:00", 
      "title": "Retrieving Twitter Status (\"Tweets\") Via Twitter API Using LINQ to XML", 
      "slug": "retrieving-twitter-your-status-via-twitter-api", 
      "tags": "snippet linq2xml twitter "
    }
  }, 
  {
    "pk": 11, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nLike every other web developer/professional and their grandma, I downloaded and installed the shiny new <a href=\"http://www.google.com/chrome\" title=\"Download Google Chrome browser\">Google Chrome</a> browser as soon as I found out \r\nit was available. The install was very fast and painless, \r\nI even missed the option where you can tell it not to \r\nimport settings from your default browser (argh)...\r\n</p>\r\n\r\n<p>\r\nSurfing the web with Chrome is a treat. The internet(s) \r\nfeel so much faster and the browser itself, being so \r\nsimple and minimal, stays out of the way. My feeling is \r\nthat this browser is game changing. If there was any \r\nremaining doubt about JavaScript, this squashes it and \r\ntakes the language to the next level for developing full \r\nblown enterpise applications.\r\n</p>\r\n\r\n<p>\r\nMy first test was to try my \r\nfavorite IM application - <a href=\"http://meebo.com\" \r\ntitle=\"Check out Meebo\">meebo</a>, which I know is a \r\nresource hog. FF3 is consuming 100K+ of \r\nRAM to run meebo while Chrome is consuming 28K for \r\nmeebo, 24K for the Browser and 6.5K for Flash (I guess \r\nmeebo is using Flash), for a total of less than 60K. That \r\nis a very significant improvement.\r\n</p>\r\n\r\n<p>\r\nNot only is this browser nicer to my RAM, <a href=\"http://news.cnet.com/8301-1001&#95;3-10030888-92.html\" title=\"Speed test: Google Chrome beats Firefox, IE, Safari\">it is very speedy</a> (orders of magnitude better than the other browsers out there).\r\n</p>\r\n\r\n<p>\r\n<strong>Will this new browser be able to gain a significant market share of the browser market?</strong> If anything, this browser will push the other browsers vendors to improve their products. But I believe Chrome will be here to stay. In less than a day, <a href=\"http://getclicky.com/chrome\" title=\"Google Chrome market share\">it has almost 3% market share</a> according to <a href=\"http://getclicky.com/\" title=\"Get Clicky web analytics\">GetClicky</a>.\r\n</p>\r\n\r\n<p>\r\nEverybody's guess is that Chrome will eat into Firefox's market share. This might be true at first, since the technical community will be the early adopters. But if there is anybody that can get IE6 users to try out a new browser, it is Google. And I hope they succeed at doing so!\r\n</p>\r\n\r\n<p>\r\n<strong>Will I be using Chrome?</strong> No doubt I will. At a minimum to run meebo so that I can save some resources on my laptop. <strong>Will it completely replace my Firefox usage?</strong> No way! At least not right now. It is still missing the Addon architecture. I can't live without Firebug, the Delicious toolbar, the web dev toolbar, http live headers, add n edit cookies, etc. I am sure it will get there, but for now I will split time between the browsers.\r\n</p>\r\n\r\n<p><strong>Update (9/3/08):</strong> John Resig got busy and did some <a href=\"http://ejohn.org/blog/javascript-performance-rundown/\" title=\"JavaScript Performance Rundown\">performance testing</a>.</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "My initial impression of Google Chrome", 
      "categories": [], 
      "modified": "2009-12-01 00:12:11", 
      "visits": 0, 
      "created": "2009-12-01 00:09:21", 
      "body_markup": "<p>\r\nLike every other web developer/professional and their grandma, I downloaded and installed the shiny new <a href=\"http://www.google.com/chrome\" title=\"Download Google Chrome browser\">Google Chrome</a> browser as soon as I found out \r\nit was available. The install was very fast and painless, \r\nI even missed the option where you can tell it not to \r\nimport settings from your default browser (argh)...\r\n</p>\r\n\r\n<p>\r\nSurfing the web with Chrome is a treat. The internet(s) \r\nfeel so much faster and the browser itself, being so \r\nsimple and minimal, stays out of the way. My feeling is \r\nthat this browser is game changing. If there was any \r\nremaining doubt about JavaScript, this squashes it and \r\ntakes the language to the next level for developing full \r\nblown enterpise applications.\r\n</p>\r\n\r\n<p>\r\nMy first test was to try my \r\nfavorite IM application - <a href=\"http://meebo.com\" \r\ntitle=\"Check out Meebo\">meebo</a>, which I know is a \r\nresource hog. FF3 is consuming 100K+ of \r\nRAM to run meebo while Chrome is consuming 28K for \r\nmeebo, 24K for the Browser and 6.5K for Flash (I guess \r\nmeebo is using Flash), for a total of less than 60K. That \r\nis a very significant improvement.\r\n</p>\r\n\r\n<p>\r\nNot only is this browser nicer to my RAM, <a href=\"http://news.cnet.com/8301-1001&#95;3-10030888-92.html\" title=\"Speed test: Google Chrome beats Firefox, IE, Safari\">it is very speedy</a> (orders of magnitude better than the other browsers out there).\r\n</p>\r\n\r\n<p>\r\n<strong>Will this new browser be able to gain a significant market share of the browser market?</strong> If anything, this browser will push the other browsers vendors to improve their products. But I believe Chrome will be here to stay. In less than a day, <a href=\"http://getclicky.com/chrome\" title=\"Google Chrome market share\">it has almost 3% market share</a> according to <a href=\"http://getclicky.com/\" title=\"Get Clicky web analytics\">GetClicky</a>.\r\n</p>\r\n\r\n<p>\r\nEverybody's guess is that Chrome will eat into Firefox's market share. This might be true at first, since the technical community will be the early adopters. But if there is anybody that can get IE6 users to try out a new browser, it is Google. And I hope they succeed at doing so!\r\n</p>\r\n\r\n<p>\r\n<strong>Will I be using Chrome?</strong> No doubt I will. At a minimum to run meebo so that I can save some resources on my laptop. <strong>Will it completely replace my Firefox usage?</strong> No way! At least not right now. It is still missing the Addon architecture. I can't live without Firebug, the Delicious toolbar, the web dev toolbar, http live headers, add n edit cookies, etc. I am sure it will get there, but for now I will split time between the browsers.\r\n</p>\r\n\r\n<p><strong>Update (9/3/08):</strong> John Resig got busy and did some <a href=\"http://ejohn.org/blog/javascript-performance-rundown/\" title=\"JavaScript Performance Rundown\">performance testing</a>.</p>", 
      "publish": "2008-09-03 00:00:00", 
      "title": "Firefox is dead... VIVA LA FIREFOX!", 
      "slug": "firefox-is-dead-viva-la-firefox", 
      "tags": "google chrome browser firefox "
    }
  }, 
  {
    "pk": 10, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>I just upgraded the site to the latest (pre)release of the <a href=\"http://www.codeplex.com/aspnet\">ASP.NET MVC Framework</a>. It was quick and painless and seems to be working great. All I had to do was swap out the assemblies and change some of the assembly versions in the Web.config from 0.0.0.0 to 3.5.0.0.</p>\r\n\r\n<p>I love when upgrades are this painless. Now I'll go check out what they added. I will start with Haack's post: <a href=\"http://haacked.com/archive/2008/08/29/how-a-method-becomes-an-action.aspx\">How a Method Becomes An Action</a>. I am also expecting the mandatory <a href=\"http://weblogs.asp.net/scottgu/\" title=\"Scott Guthrie's Blog\">ScottGu</a> 12 page post on the release :).</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "Upgraded to MVC Preview 5 and it was easy!", 
      "categories": [], 
      "modified": "2009-12-01 00:07:19", 
      "visits": 0, 
      "created": "2009-12-01 00:07:19", 
      "body_markup": "<p>I just upgraded the site to the latest (pre)release of the <a href=\"http://www.codeplex.com/aspnet\">ASP.NET MVC Framework</a>. It was quick and painless and seems to be working great. All I had to do was swap out the assemblies and change some of the assembly versions in the Web.config from 0.0.0.0 to 3.5.0.0.</p>\r\n\r\n<p>I love when upgrades are this painless. Now I'll go check out what they added. I will start with Haack's post: <a href=\"http://haacked.com/archive/2008/08/29/how-a-method-becomes-an-action.aspx\">How a Method Becomes An Action</a>. I am also expecting the mandatory <a href=\"http://weblogs.asp.net/scottgu/\" title=\"Scott Guthrie's Blog\">ScottGu</a> 12 page post on the release :).</p>", 
      "publish": "2008-08-29 00:00:00", 
      "title": "Upgraded to ASP.NET MVC Preview 5", 
      "slug": "upgraded-to-asp-net-mvc--preview-5", 
      "tags": "aspnetmvc "
    }
  }, 
  {
    "pk": 9, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nThe HTML NOSCRIPT element is very simple and straightforward:\r\n</p>\r\n\r\n<blockquote>\r\n<a href=\"http://www.w3.org/TR/html401/interact/scripts.html#edef-NOSCRIPT\" title=\"Go to W3C definition of NOSCRIPT element\">18.3.1 The NOSCRIPT element</a>\r\n<p>\r\nThe NOSCRIPT element allows authors to provide alternate content when a script is not executed.\r\nThe content of a NOSCRIPT element should only be rendered by a script-aware user agent in the following cases:\r\n</p>\r\n<ul>\r\n    <li>The user agent is configured not to evaluate scripts.</li>\r\n    <li>The user agent doesn't support a scripting language invoked by a SCRIPT element earlier in the document.</li>\r\n</ul>\r\n<p>User agents that do not support client-side scripts must render this element's contents.</p>\r\n</blockquote>\r\n\r\n<p>\r\nThere is no HTML element that will do the opposite of this. The SCRIPT element will <strong>execute</strong>\r\nits contents, not <strong>render</strong> it. Of course, we could use document.write() to insert content in the\r\npage only when JavaScript is enabled:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;script type=&quot;text/javascript&quot;&gt;\r\n//&lt;![CDATA[\r\n    document.write(&quot;&lt;p&gt;Hello World! JavaScript is enabled.&lt;/p&gt;&quot;);\r\n//]]&gt;\r\n&lt;/script&gt;\r\n&lt;noscript&gt;\r\n    &lt;p&gt;Hello World! JavaScript is disabled.&lt;/p&gt;\r\n&lt;/noscript&gt;\r\n\r\n</code></pre>\r\n\r\n<p>\r\nThat will work just fine in some cases, but it isn't valid XHTML and it \r\n<a href=\"http://ln.hixie.ch/?start=1091626816&amp;count=1\" title=\" Why document.write() doesn't work in XML\">breaks</a>\r\nwhen serving the page with the XHTML/XML MIME type. Plus, it is just nasty and ugly looking... :)\r\n</p>\r\n\r\n<blockquote>\r\n<a href=\"http://www.w3.org/MarkUp/2004/xhtml-faq#docwrite\" title=\"W3C HTML and XHTML Frequently Answered Questions\">Does document.write work in XHTML?</a>\r\n<p>No. Because of the way XML is defined, it is not possible to do tricks like this, where markup is generated by scripting while the parser is still parsing the markup.</p>\r\n<p>You can still achieve the same effects, but you have to do it by using the DOM to add and delete elements.</p>\r\n</blockquote>\r\n\r\n<p>\r\nAs stated above, there are DOM method\r\n<a href=\"http://www.sitepoint.com/blogs/2007/07/11/insert-in-place-without-documentwrite/\" title=\"Insert in place without document.write\">alternatives</a>\r\nthat can be used to implement this functionality. But again, this creates a mix of\r\nHTML and JavaScript that is unmaintainable (especially if the content is data driven and/or being managed by business users).\r\n</p>\r\n\r\n<p>\r\nA cleaner way would be to include the content in the page as you normally would, have it hidden by CSS and then show it via JavaScript.\r\nIf there is no JavaScript, then it will not be rendered.\r\n</p>\r\n\r\n<p><strong>HTML:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;p class=&quot;YesScript&quot;&gt;\r\n    Hello World! JavaScript is enabled.\r\n&lt;/p&gt;\r\n</code></pre>\r\n\r\n<p><strong>CSS:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>.YesScript { display:none; }\r\n</code></pre>\r\n\r\n<p><strong>JavaScript (jQuery syntax):</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>$(document).ready(function(){\r\n    $('.YesScript').show();\r\n});\r\n</code></pre>\r\n\r\n<p>\r\nThis does the trick, but in some cases (especially IE) the page will render before the JavaScript, causing the page to \"flicker\" when the content all of a sudden appears.\r\nThis is very undesireable, as it can cause epileptic seizures... Uhm, on a more serious note, it is just very annoying to the eye. So, what\r\nif we could apply CSS rules based on the availability of JavaScript? Here is how to do it with one line of JavaScript in the HEAD of the HTML document:\r\n</p>\r\n\r\n<p><strong>HTML:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;title&gt;...&lt;/title&gt;\r\n        &lt;script type=\"text/javascript\"&gt;\r\n        //&lt;![CDATA[\r\n            document.getElementsByTagName('html')[0].className='jsOn';\r\n        //]]&gt;\r\n        &lt;/script&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;p class=&quot;YesScript&quot;&gt;\r\n            Hello World! JavaScript is enabled.\r\n        &lt;/p&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\r\n\r\n<p><strong>CSS:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>.YesScript { display:none; }\r\n.jsOn .YesScript { display:block; }\r\n</code></pre>\r\n\r\n<p>\r\nThis is the best solution I have found. You add a class to the HTML element via JavaScript in the HEAD of the document and then \r\nuse that to target your CSS rules and styling. This can also be used to hide elements that you need to have in the DOM but don't\r\nwant them to initially render (elements declared in the NOSCRIPT tag will not be available in the DOM if JavaScript is enabled).\r\nA use case for this would be for Tab content (you want all the panels hidden except the active one).\r\n</p>\r\n\r\n<p>\r\nCheers!\r\n</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "In search of the opposite of NOSCRIPT...", 
      "categories": [], 
      "modified": "2009-12-01 00:05:08", 
      "visits": 0, 
      "created": "2009-12-01 00:05:08", 
      "body_markup": "<p>\r\nThe HTML NOSCRIPT element is very simple and straightforward:\r\n</p>\r\n\r\n<blockquote>\r\n<a href=\"http://www.w3.org/TR/html401/interact/scripts.html#edef-NOSCRIPT\" title=\"Go to W3C definition of NOSCRIPT element\">18.3.1 The NOSCRIPT element</a>\r\n<p>\r\nThe NOSCRIPT element allows authors to provide alternate content when a script is not executed.\r\nThe content of a NOSCRIPT element should only be rendered by a script-aware user agent in the following cases:\r\n</p>\r\n<ul>\r\n    <li>The user agent is configured not to evaluate scripts.</li>\r\n    <li>The user agent doesn't support a scripting language invoked by a SCRIPT element earlier in the document.</li>\r\n</ul>\r\n<p>User agents that do not support client-side scripts must render this element's contents.</p>\r\n</blockquote>\r\n\r\n<p>\r\nThere is no HTML element that will do the opposite of this. The SCRIPT element will <strong>execute</strong>\r\nits contents, not <strong>render</strong> it. Of course, we could use document.write() to insert content in the\r\npage only when JavaScript is enabled:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;script type=&quot;text/javascript&quot;&gt;\r\n//&lt;![CDATA[\r\n    document.write(&quot;&lt;p&gt;Hello World! JavaScript is enabled.&lt;/p&gt;&quot;);\r\n//]]&gt;\r\n&lt;/script&gt;\r\n&lt;noscript&gt;\r\n    &lt;p&gt;Hello World! JavaScript is disabled.&lt;/p&gt;\r\n&lt;/noscript&gt;\r\n\r\n</code></pre>\r\n\r\n<p>\r\nThat will work just fine in some cases, but it isn't valid XHTML and it \r\n<a href=\"http://ln.hixie.ch/?start=1091626816&amp;count=1\" title=\" Why document.write() doesn't work in XML\">breaks</a>\r\nwhen serving the page with the XHTML/XML MIME type. Plus, it is just nasty and ugly looking... :)\r\n</p>\r\n\r\n<blockquote>\r\n<a href=\"http://www.w3.org/MarkUp/2004/xhtml-faq#docwrite\" title=\"W3C HTML and XHTML Frequently Answered Questions\">Does document.write work in XHTML?</a>\r\n<p>No. Because of the way XML is defined, it is not possible to do tricks like this, where markup is generated by scripting while the parser is still parsing the markup.</p>\r\n<p>You can still achieve the same effects, but you have to do it by using the DOM to add and delete elements.</p>\r\n</blockquote>\r\n\r\n<p>\r\nAs stated above, there are DOM method\r\n<a href=\"http://www.sitepoint.com/blogs/2007/07/11/insert-in-place-without-documentwrite/\" title=\"Insert in place without document.write\">alternatives</a>\r\nthat can be used to implement this functionality. But again, this creates a mix of\r\nHTML and JavaScript that is unmaintainable (especially if the content is data driven and/or being managed by business users).\r\n</p>\r\n\r\n<p>\r\nA cleaner way would be to include the content in the page as you normally would, have it hidden by CSS and then show it via JavaScript.\r\nIf there is no JavaScript, then it will not be rendered.\r\n</p>\r\n\r\n<p><strong>HTML:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;p class=&quot;YesScript&quot;&gt;\r\n    Hello World! JavaScript is enabled.\r\n&lt;/p&gt;\r\n</code></pre>\r\n\r\n<p><strong>CSS:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>.YesScript { display:none; }\r\n</code></pre>\r\n\r\n<p><strong>JavaScript (jQuery syntax):</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>$(document).ready(function(){\r\n    $('.YesScript').show();\r\n});\r\n</code></pre>\r\n\r\n<p>\r\nThis does the trick, but in some cases (especially IE) the page will render before the JavaScript, causing the page to \"flicker\" when the content all of a sudden appears.\r\nThis is very undesireable, as it can cause epileptic seizures... Uhm, on a more serious note, it is just very annoying to the eye. So, what\r\nif we could apply CSS rules based on the availability of JavaScript? Here is how to do it with one line of JavaScript in the HEAD of the HTML document:\r\n</p>\r\n\r\n<p><strong>HTML:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;title&gt;...&lt;/title&gt;\r\n        &lt;script type=\"text/javascript\"&gt;\r\n        //&lt;![CDATA[\r\n            document.getElementsByTagName('html')[0].className='jsOn';\r\n        //]]&gt;\r\n        &lt;/script&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;p class=&quot;YesScript&quot;&gt;\r\n            Hello World! JavaScript is enabled.\r\n        &lt;/p&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\r\n\r\n<p><strong>CSS:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>.YesScript { display:none; }\r\n.jsOn .YesScript { display:block; }\r\n</code></pre>\r\n\r\n<p>\r\nThis is the best solution I have found. You add a class to the HTML element via JavaScript in the HEAD of the document and then \r\nuse that to target your CSS rules and styling. This can also be used to hide elements that you need to have in the DOM but don't\r\nwant them to initially render (elements declared in the NOSCRIPT tag will not be available in the DOM if JavaScript is enabled).\r\nA use case for this would be for Tab content (you want all the panels hidden except the active one).\r\n</p>\r\n\r\n<p>\r\nCheers!\r\n</p>", 
      "publish": "2008-08-28 00:00:00", 
      "title": "The Opposite of the NOSCRIPT Element (YesScript? / ScriptOnly?)", 
      "slug": "the-opposite-of-the-noscript-element-yesscript-scriptonly", 
      "tags": "javascript html css noscript "
    }
  }, 
  {
    "pk": 8, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>Today once again, I had to write some JavaScript to fix some backend bugs... I love how some backend devs feel everything can and should be fixed in JavaScript :-/</p>\r\n\r\n<p>Basically, I had to create, read and update cookies based on the products the user is browsing. So I created this little utility to do the job:</p>\r\n\r\n<pre class=\"prettyprint\"><code>var CookieUtil = {\r\n  createCookie:function(name,value,days) {\r\n    if (days) {\r\n        var date = new Date();\r\n        date.setTime(date.getTime()+(days*24*60*60*1000));\r\n        var expires = \"; expires=\"+date.toGMTString();\r\n    }\r\n    else var expires = \"\";\r\n    document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n  },\r\n  readCookie:function(name) {\r\n    var nameEQ = name + \"=\";\r\n    var ca = document.cookie.split(';');\r\n    for(var i=0;i &lt; ca.length;i++) {\r\n        var c = ca[i];\r\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\r\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n    }\r\n    return null;\r\n  },\r\n  eraseCookie:function(name) {\r\n    CookieUtil.createCookie(name,\"\",-1);\r\n  }\r\n};\r\n</code></pre>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "javascript cookie utility functions", 
      "categories": [], 
      "modified": "2009-12-01 00:02:33", 
      "visits": 0, 
      "created": "2009-12-01 00:02:33", 
      "body_markup": "<p>Today once again, I had to write some JavaScript to fix some backend bugs... I love how some backend devs feel everything can and should be fixed in JavaScript :-/</p>\r\n\r\n<p>Basically, I had to create, read and update cookies based on the products the user is browsing. So I created this little utility to do the job:</p>\r\n\r\n<pre class=\"prettyprint\"><code>var CookieUtil = {\r\n  createCookie:function(name,value,days) {\r\n    if (days) {\r\n        var date = new Date();\r\n        date.setTime(date.getTime()+(days*24*60*60*1000));\r\n        var expires = \"; expires=\"+date.toGMTString();\r\n    }\r\n    else var expires = \"\";\r\n    document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n  },\r\n  readCookie:function(name) {\r\n    var nameEQ = name + \"=\";\r\n    var ca = document.cookie.split(';');\r\n    for(var i=0;i &lt; ca.length;i++) {\r\n        var c = ca[i];\r\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\r\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n    }\r\n    return null;\r\n  },\r\n  eraseCookie:function(name) {\r\n    CookieUtil.createCookie(name,\"\",-1);\r\n  }\r\n};\r\n</code></pre>", 
      "publish": "2008-08-27 00:00:00", 
      "title": "JavaScript Cookie Utility", 
      "slug": "javascript-cookie-utility", 
      "tags": "javascript snippet cookies "
    }
  }, 
  {
    "pk": 7, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nThe HTML &lt;button/&gt; element is a rarely used but \r\nvery &quot;styleable&quot; substitute to the &lt;input type=\"submit\"/&gt;,\r\nthe standard button for submitting a form.\r\n</p>\r\n\r\n<blockquote>\r\n<a href=\"\" title=\"Go to W3C Recommendation on Forms\">\r\n17.5 The BUTTON Element (W3C Recommendation - Forms)\r\n</a>\r\n<br />\r\nButtons created with the BUTTON element function just like\r\nbuttons created with the INPUT element, but they offer\r\nricher rendering possibilities: the BUTTON element may have\r\ncontent. For example, a BUTTON element that contains an\r\nimage functions like and may resemble an INPUT element\r\nwhose type is set to &quot;image&quot;, but the BUTTON\r\nelement type allows content.\r\n</blockquote>\r\n\r\n<p>\r\nAllowing child html elements (div's, span's, img's)\r\ncreates a lot more possiblities for styling using CSS.\r\nFor example, the <a href=\"http://www.alistapart.com/articles/slidingdoors/\" title=\"A List Apart article on the Sliding Doors of CSS\">Sliding Doors</a> \r\nof CSS technique to create round buttons that\r\nwere only possible before by using the \r\n&lt;input type=\"image\" /&gt; element or using links that\r\ntriggered the form submission via JavaScript.\r\n</p>\r\n\r\n<h3>The HTML:</h3>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;button type=&quot;submit&quot; title=&quot;Search&quot;&gt;\r\n    &lt;div class=&quot;o&quot;&gt;&lt;div class=&quot;i&quot;&gt;\r\n        Search\r\n    &lt;/div&gt;&lt;/div&gt;\r\n&lt;/button&gt;\r\n&lt;button type=&quot;submit&quot; title=&quot;Click Here&quot;&gt;\r\n    &lt;div class=&quot;o&quot;&gt;&lt;div class=&quot;i&quot;&gt;\r\n        Click Here\r\n    &lt;/div&gt;&lt;/div&gt;\r\n&lt;/button&gt;\r\n&lt;button type=&quot;submit&quot; title=&quot;Go&quot;&gt;\r\n    &lt;div class=&quot;o&quot;&gt;&lt;div class=&quot;i&quot;&gt;\r\n        Go\r\n    &lt;/div&gt;&lt;/div&gt;\r\n&lt;/button&gt;\r\n\r\n</code></pre>\r\n\r\n<h3>The CSS:</h3>\r\n\r\n<pre class=\"prettyprint\"><code>button{\r\n    background:none;\r\n    border:none;\r\n    color:#ffffff;\r\n    font-weight:bold;\r\n    text-align:left;\r\n}\r\nbutton div.o{\r\n    padding-left:20px;\r\n    background:transparent url(button.gif) no-repeat left top;\r\n}\r\nbutton div.i{\r\n    padding-right:20px;\r\n    background:transparent url(button.gif) no-repeat right -36px;\r\n    height:36px;\r\n    line-height:36px;\r\n    white-space:nowrap;\r\n}\r\n\r\n</code></pre>\r\n\r\n<h3>The Result:</h3>\r\n<inline type=\"media.photo\" id=\"1\" class=\"\" />\r\n\r\n<p>\r\nAs you can see above, the BUTTON is inline\r\nbut it contains block elements within it, which is way cool. This doesn't\r\nwork in any other case I know of. Try putting a div inside\r\nof a span... First of all, it is not valid markup. And second,\r\nthe rendered result will vary by browser and will not be what\r\nyou would expect.\r\n</p>\r\n\r\n<h3>BEWARE IE6!</h3>\r\n\r\n<p>\r\nThe BUTTON element works in IE6, BUT as usual there are some\r\nbugs. If there are multiple BUTTON element in a form, the\r\nform gets submitted with the name/value's of all of them \r\ninstead of just the one clicked. This issue got me good in a\r\nproject but I was able to work around it with some JavaScript (using jQuery):\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>if ($.browser.msie &amp;&amp; $.browser.version == '6.0') {\r\n    $('button').click(function(){\r\n        // disable all the buttons on the page\r\n        $('button').attr('disabled', 'disabled');\r\n\r\n        // reenable the button just clicked\r\n        $(this).removeAttr('disabled');\r\n    });\r\n}\r\n\r\n</code></pre>\r\n\r\n<p>\r\nIf you need to support IE6 without JavaScript enabled AND\r\nwill have a form with multiple buttons, then the BUTTON\r\nelement is probably not for you. Otherwise, there is no reason not\r\nto use it.\r\n</p>\r\n", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "The benefits of using the HTML BUTTON element", 
      "categories": [], 
      "modified": "2009-11-30 23:55:14", 
      "visits": 0, 
      "created": "2009-11-30 23:42:16", 
      "body_markup": "<p>\r\nThe HTML &lt;button/&gt; element is a rarely used but \r\nvery &quot;styleable&quot; substitute to the &lt;input type=\"submit\"/&gt;,\r\nthe standard button for submitting a form.\r\n</p>\r\n\r\n<blockquote>\r\n<a href=\"\" title=\"Go to W3C Recommendation on Forms\">\r\n17.5 The BUTTON Element (W3C Recommendation - Forms)\r\n</a>\r\n<br />\r\nButtons created with the BUTTON element function just like\r\nbuttons created with the INPUT element, but they offer\r\nricher rendering possibilities: the BUTTON element may have\r\ncontent. For example, a BUTTON element that contains an\r\nimage functions like and may resemble an INPUT element\r\nwhose type is set to &quot;image&quot;, but the BUTTON\r\nelement type allows content.\r\n</blockquote>\r\n\r\n<p>\r\nAllowing child html elements (div's, span's, img's)\r\ncreates a lot more possiblities for styling using CSS.\r\nFor example, the <a href=\"http://www.alistapart.com/articles/slidingdoors/\" title=\"A List Apart article on the Sliding Doors of CSS\">Sliding Doors</a> \r\nof CSS technique to create round buttons that\r\nwere only possible before by using the \r\n&lt;input type=\"image\" /&gt; element or using links that\r\ntriggered the form submission via JavaScript.\r\n</p>\r\n\r\n<h3>The HTML:</h3>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;button type=&quot;submit&quot; title=&quot;Search&quot;&gt;\r\n    &lt;div class=&quot;o&quot;&gt;&lt;div class=&quot;i&quot;&gt;\r\n        Search\r\n    &lt;/div&gt;&lt;/div&gt;\r\n&lt;/button&gt;\r\n&lt;button type=&quot;submit&quot; title=&quot;Click Here&quot;&gt;\r\n    &lt;div class=&quot;o&quot;&gt;&lt;div class=&quot;i&quot;&gt;\r\n        Click Here\r\n    &lt;/div&gt;&lt;/div&gt;\r\n&lt;/button&gt;\r\n&lt;button type=&quot;submit&quot; title=&quot;Go&quot;&gt;\r\n    &lt;div class=&quot;o&quot;&gt;&lt;div class=&quot;i&quot;&gt;\r\n        Go\r\n    &lt;/div&gt;&lt;/div&gt;\r\n&lt;/button&gt;\r\n\r\n</code></pre>\r\n\r\n<h3>The CSS:</h3>\r\n\r\n<pre class=\"prettyprint\"><code>button{\r\n    background:none;\r\n    border:none;\r\n    color:#ffffff;\r\n    font-weight:bold;\r\n    text-align:left;\r\n}\r\nbutton div.o{\r\n    padding-left:20px;\r\n    background:transparent url(button.gif) no-repeat left top;\r\n}\r\nbutton div.i{\r\n    padding-right:20px;\r\n    background:transparent url(button.gif) no-repeat right -36px;\r\n    height:36px;\r\n    line-height:36px;\r\n    white-space:nowrap;\r\n}\r\n\r\n</code></pre>\r\n\r\n<h3>The Result:</h3>\r\n<inline type=\"media.photo\" id=\"1\" class=\"\" />\r\n\r\n<p>\r\nAs you can see above, the BUTTON is inline\r\nbut it contains block elements within it, which is way cool. This doesn't\r\nwork in any other case I know of. Try putting a div inside\r\nof a span... First of all, it is not valid markup. And second,\r\nthe rendered result will vary by browser and will not be what\r\nyou would expect.\r\n</p>\r\n\r\n<h3>BEWARE IE6!</h3>\r\n\r\n<p>\r\nThe BUTTON element works in IE6, BUT as usual there are some\r\nbugs. If there are multiple BUTTON element in a form, the\r\nform gets submitted with the name/value's of all of them \r\ninstead of just the one clicked. This issue got me good in a\r\nproject but I was able to work around it with some JavaScript (using jQuery):\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>if ($.browser.msie &amp;&amp; $.browser.version == '6.0') {\r\n    $('button').click(function(){\r\n        // disable all the buttons on the page\r\n        $('button').attr('disabled', 'disabled');\r\n\r\n        // reenable the button just clicked\r\n        $(this).removeAttr('disabled');\r\n    });\r\n}\r\n\r\n</code></pre>\r\n\r\n<p>\r\nIf you need to support IE6 without JavaScript enabled AND\r\nwill have a form with multiple buttons, then the BUTTON\r\nelement is probably not for you. Otherwise, there is no reason not\r\nto use it.\r\n</p>\r\n", 
      "publish": "2008-08-24 00:00:00", 
      "title": "Using the HTML <button /> element in place of <input type=\"submit\" />", 
      "slug": "using-the-html-button-element-in-place-of-input-type-submit", 
      "tags": "html button css "
    }
  }, 
  {
    "pk": 6, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nToday I had to do a quick and dirty sort-by-value of the &lt;option /&gt;'s in a &lt;select /&gt;. I am not proud of having to do this since it should be done on the server-side, but that's a different story.\r\n</p>\r\n\r\n<p>\r\nThere are probably a dozen ways to skin this cat, but this is how I did it (I was already using jQuery on this site):\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>// get the select\r\nvar $dd = $('#select-id');\r\nif ($dd.length &gt; 0) { // make sure we found the select we were looking for\r\n\r\n    // save the selected value\r\n    var selectedVal = $dd.val();\r\n\r\n    // get the options and loop through them\r\n    var $options = $('option', $dd);\r\n    var arrVals = [];\r\n    $options.each(function(){\r\n        // push each option value and text into an array\r\n        arrVals.push({\r\n            val: $(this).val(),\r\n            text: $(this).text()\r\n        });\r\n    });\r\n\r\n    // sort the array by the value (change val to text to sort by text instead)\r\n    arrVals.sort(function(a, b){\r\n        return a.val - b.val;\r\n    });\r\n\r\n    // loop through the sorted array and set the text/values to the options\r\n    for (var i = 0, l = arrVals.length; i &lt; l; i++) {\r\n        $($options[i]).val(arrVals[i].val).text(arrVals[i].text);\r\n    }\r\n\r\n    // set the selected value back\r\n    $dd.val(selectedVal);\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\n<strong>Update (8/20/2009)</strong>: The above code will only work if the option values are numbers. If the values are alphanumeric and we are doing an alphabetical sort, then the sort function should be replaced with:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>arrVals.sort(function(a, b){\r\n    if(a.val&gt;b.val){\r\n        return 1;\r\n    }\r\n    else if (a.val==b.val){\r\n        return 0;\r\n    }\r\n    else {\r\n        return -1;\r\n    }\r\n});\r\n\r\n</code></pre>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "A snippet of JavaScript to sort a select dropdown using jQuery", 
      "categories": [], 
      "modified": "2009-11-30 23:38:30", 
      "visits": 0, 
      "created": "2009-11-30 23:38:30", 
      "body_markup": "<p>\r\nToday I had to do a quick and dirty sort-by-value of the &lt;option /&gt;'s in a &lt;select /&gt;. I am not proud of having to do this since it should be done on the server-side, but that's a different story.\r\n</p>\r\n\r\n<p>\r\nThere are probably a dozen ways to skin this cat, but this is how I did it (I was already using jQuery on this site):\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>// get the select\r\nvar $dd = $('#select-id');\r\nif ($dd.length &gt; 0) { // make sure we found the select we were looking for\r\n\r\n    // save the selected value\r\n    var selectedVal = $dd.val();\r\n\r\n    // get the options and loop through them\r\n    var $options = $('option', $dd);\r\n    var arrVals = [];\r\n    $options.each(function(){\r\n        // push each option value and text into an array\r\n        arrVals.push({\r\n            val: $(this).val(),\r\n            text: $(this).text()\r\n        });\r\n    });\r\n\r\n    // sort the array by the value (change val to text to sort by text instead)\r\n    arrVals.sort(function(a, b){\r\n        return a.val - b.val;\r\n    });\r\n\r\n    // loop through the sorted array and set the text/values to the options\r\n    for (var i = 0, l = arrVals.length; i &lt; l; i++) {\r\n        $($options[i]).val(arrVals[i].val).text(arrVals[i].text);\r\n    }\r\n\r\n    // set the selected value back\r\n    $dd.val(selectedVal);\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\n<strong>Update (8/20/2009)</strong>: The above code will only work if the option values are numbers. If the values are alphanumeric and we are doing an alphabetical sort, then the sort function should be replaced with:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>arrVals.sort(function(a, b){\r\n    if(a.val&gt;b.val){\r\n        return 1;\r\n    }\r\n    else if (a.val==b.val){\r\n        return 0;\r\n    }\r\n    else {\r\n        return -1;\r\n    }\r\n});\r\n\r\n</code></pre>", 
      "publish": "2008-08-19 00:00:00", 
      "title": "Sorting (dropdown) Select Options Using jQuery", 
      "slug": "sorting-dropdown-select-options-using-jquery", 
      "tags": "jquery javascript html snippet "
    }
  }, 
  {
    "pk": 5, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nOnce I implemented blog posts and comments, I needed something to fill up all the empty space on the right.\r\nSo, I decided to list out my recent <a href=\"http://delicious.com/rlrosario\" title=\"Check out all my delicious bookmarks\">delicious bookmarks</a>. I had been wanting to play around with LINQ to XML, and this was a perfect use for it.\r\n</p>\r\n\r\n<p>\r\nI first created a DeliciousLink <a href=\"http://www.ayende.com/Blog/archive/2007/03/20/Plain-old-.Net-classes.aspx\" title=\"Ayende's post on POCO classes\">POCO class</a> with the three properties I was interested in: Title, Url, and Description. This is all I need to create the bookmark list.\r\n</p>\r\n\r\n<p>\r\nI then added a new method to one of my Service classes. This method loads my delicious rss feed and then loops through the items creating a list of DeliciousLink's:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>public IEnumerable&lt;DeliciousLink&gt; GetDeliciousLatest(int quantity) {\r\n\r\n    XDocument rssFeed = XDocument.Load(\"http://feeds.delicious.com/v2/rss/rlrosario\");\r\n\r\n    return from item in rssFeed.Descendants(\"item\")\r\n            select new DeliciousLink\r\n            {\r\n                Title = item.Element(\"title\").Value,\r\n                Url = item.Element(\"link\").Value,\r\n                Description = (item.Element(\"description\") != null) ? item.Element(\"description\").Value : \"\"\r\n            };\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThen I created a controller Action that retrieves and caches the links using the service. This action can then be called by any View using the Html.RenderAction method.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>public ActionResult GetDeliciousLatest(int quantity) {\r\n    IEnumerable&lt;DeliciousLink&gt; posts = HttpContext.Cache[\"DELICIOUS&#95;LINKS\"] as IEnumerable&lt;DeliciousLink&gt;;\r\n    if (posts == null) {\r\n        try {\r\n            posts = _miscService.GetDeliciousLatest(quantity);\r\n            HttpContext.Cache.Insert(\"DELICIOUS&#95;LINKS\", posts, null, DateTime.Now.AddMinutes(15), System.Web.Caching.Cache.NoSlidingExpiration);\r\n\r\n        } catch { }\r\n    }\r\n\r\n    return View(\"&#95;Delicious\", posts.Take(quantity));\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThe last piece was to create _Delicious.aspx, which is a Partial View.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;&#95;Delicious.aspx.cs&quot; Inherits=&quot;rr.web.Views.Misc.&#95;Delicious&quot; %&gt;\r\n&lt;ul&gt;\r\n&lt;% foreach (rr.data.misc.DeliciousLink link in ViewData.Model) { %&gt;\r\n  &lt;li&gt;\r\n  &lt;a href=&quot;&lt;%= Html.AttributeEncode(link.Url) %&gt;&quot; title=&quot;&lt;%= Html.AttributeEncode(link.Description) %&gt;&quot;&gt;\r\n  &lt;%= Html.Encode(link.Title) %&gt;\r\n  &lt;/a&gt;\r\n  &lt;/li&gt;\r\n&lt;% } %&gt;\r\n&lt;/ul&gt;\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThis ended up being a lot easier than I thought it would be. No tedious XML parsing was necessary :).\r\n</p>\r\n\r\n<p>\r\nThis is already my fifth post so I am going to have to implement paging soon!\r\n</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "An example of using LINQ to XML for consuming an RSS feed", 
      "categories": [], 
      "modified": "2009-11-30 23:35:06", 
      "visits": 0, 
      "created": "2009-11-30 23:35:06", 
      "body_markup": "<p>\r\nOnce I implemented blog posts and comments, I needed something to fill up all the empty space on the right.\r\nSo, I decided to list out my recent <a href=\"http://delicious.com/rlrosario\" title=\"Check out all my delicious bookmarks\">delicious bookmarks</a>. I had been wanting to play around with LINQ to XML, and this was a perfect use for it.\r\n</p>\r\n\r\n<p>\r\nI first created a DeliciousLink <a href=\"http://www.ayende.com/Blog/archive/2007/03/20/Plain-old-.Net-classes.aspx\" title=\"Ayende's post on POCO classes\">POCO class</a> with the three properties I was interested in: Title, Url, and Description. This is all I need to create the bookmark list.\r\n</p>\r\n\r\n<p>\r\nI then added a new method to one of my Service classes. This method loads my delicious rss feed and then loops through the items creating a list of DeliciousLink's:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>public IEnumerable&lt;DeliciousLink&gt; GetDeliciousLatest(int quantity) {\r\n\r\n    XDocument rssFeed = XDocument.Load(\"http://feeds.delicious.com/v2/rss/rlrosario\");\r\n\r\n    return from item in rssFeed.Descendants(\"item\")\r\n            select new DeliciousLink\r\n            {\r\n                Title = item.Element(\"title\").Value,\r\n                Url = item.Element(\"link\").Value,\r\n                Description = (item.Element(\"description\") != null) ? item.Element(\"description\").Value : \"\"\r\n            };\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThen I created a controller Action that retrieves and caches the links using the service. This action can then be called by any View using the Html.RenderAction method.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>public ActionResult GetDeliciousLatest(int quantity) {\r\n    IEnumerable&lt;DeliciousLink&gt; posts = HttpContext.Cache[\"DELICIOUS&#95;LINKS\"] as IEnumerable&lt;DeliciousLink&gt;;\r\n    if (posts == null) {\r\n        try {\r\n            posts = _miscService.GetDeliciousLatest(quantity);\r\n            HttpContext.Cache.Insert(\"DELICIOUS&#95;LINKS\", posts, null, DateTime.Now.AddMinutes(15), System.Web.Caching.Cache.NoSlidingExpiration);\r\n\r\n        } catch { }\r\n    }\r\n\r\n    return View(\"&#95;Delicious\", posts.Take(quantity));\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThe last piece was to create _Delicious.aspx, which is a Partial View.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;&#95;Delicious.aspx.cs&quot; Inherits=&quot;rr.web.Views.Misc.&#95;Delicious&quot; %&gt;\r\n&lt;ul&gt;\r\n&lt;% foreach (rr.data.misc.DeliciousLink link in ViewData.Model) { %&gt;\r\n  &lt;li&gt;\r\n  &lt;a href=&quot;&lt;%= Html.AttributeEncode(link.Url) %&gt;&quot; title=&quot;&lt;%= Html.AttributeEncode(link.Description) %&gt;&quot;&gt;\r\n  &lt;%= Html.Encode(link.Title) %&gt;\r\n  &lt;/a&gt;\r\n  &lt;/li&gt;\r\n&lt;% } %&gt;\r\n&lt;/ul&gt;\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThis ended up being a lot easier than I thought it would be. No tedious XML parsing was necessary :).\r\n</p>\r\n\r\n<p>\r\nThis is already my fifth post so I am going to have to implement paging soon!\r\n</p>", 
      "publish": "2008-08-18 00:00:00", 
      "title": "Consuming a (delicious) RSS Feed Using LINQ to XML", 
      "slug": "consuming-a-delicious-rss-feed-using-linq-to-xml", 
      "tags": "snippet rss linq2xml delicious aspnetmvc "
    }
  }, 
  {
    "pk": 4, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nThis blog was missing the third most important feature of a blog: <a href=\"http://en.wikipedia.org/wiki/RSS&#95;%28file&#95;format%29\" title=\"Read about Really Simple Syndication on Wikipedia\">RSS</a>. (The first two most important features are posts and comments because <a href=\"http://www.codinghorror.com/blog/archives/000538.html\" title=\"Go read Jeff Atwood's post on this\">a blog without comments is not a blog</a>. I am still waiting for comments on this blog but I am sure it will take time.)</p>\r\n<p>\r\nThere are probably many ultra fancy ways to create an RSS feed using <a href=\"http://www.rssdotnet.com/\" title=\"Check out RSS.NET\">existing</a> <a href=\"http://www.codeplex.com/ASPNETRSSToolkit\" title=\"Check out AspNet RSS Toolkit\">libraries</a> for .Net. For example, one could create a new ActionResult that returned RSS: RssResult (analogous to JsonResult for returning JSON). This isn't rocket science, so I decided to keep it simple and just create a new View for RSS.\r\n</p>\r\n\r\n<p>\r\nThe first step was to create a new Action in my Blog Controller that retrieves the latest (12 in my case) posts and passes them on to the View:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>public ActionResult PostFeed(string type) {\r\n    if (type.ToLower().Equals(\"rss\")) {\r\n        return View(\"PostRSS\", _blogService.GetPosts(0,12));\r\n    } else {\r\n        return RedirectToAction(\"Index\", \"Home\");\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThe (syndication) type is passed in so that I can easily add <a href=\"http://en.wikipedia.org/wiki/Atom&#95;Syndication&#95;Format\" title=\"Read about Atom standard on Wikipedia\">Atom</a> or any other format in the future. If an invalid type is passed in then I just redirect the user to the home page. Maybe I should redirect to the RSS feed instead?\r\n</p>\r\n\r\n<p>\r\nThe next step is to create the View (PostRSS.aspx), which is simply a template for the RSS XML with a foreach loop to go through the posts. Note that I had to put the &lt;?xml ... ?&gt; declaration on the same line and to the right of the &lt;%@ Page ... %&gt;. Otherwise, a blank line is rendered at the top of the page and the XML becomes invalid :-|.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;%@ Page ContentType=&quot;application/rss+xml&quot; Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;PostRSS.aspx.cs&quot; Inherits=&quot;rr.web.Views.Blog.PostRSS&quot; %&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\r\n&lt;rss version=&quot;2.0&quot;&gt;\r\n&lt;channel&gt;\r\n&lt;title&gt;ricky rosario's blog&lt;/title&gt;\r\n&lt;link&gt;http://&lt;%= Request.Url.Host %&gt;&lt;/link&gt;\r\n&lt;description&gt;Blog RSS feed for rickyrosario.com&lt;/description&gt;\r\n&lt;lastBuildDate&gt;&lt;%= ViewData.Model.First().DatePublished.Value.ToUniversalTime().ToString(&quot;r&quot;) %&gt;&lt;/lastBuildDate&gt;\r\n&lt;language&gt;en-us&lt;/language&gt;\r\n&lt;% foreach (Post p in ViewData.Model) { %&gt;\r\n    &lt;item&gt;\r\n    &lt;title&gt;&lt;%= Html.Encode(p.Title) %&gt;&lt;/title&gt;\r\n    &lt;link&gt;http://&lt;%= Request.Url.Host + Url.Action(&quot;ViewPostByName&quot;, new RouteValueDictionary(new { name = p.Name })) %&gt;&lt;/link&gt;\r\n    &lt;guid&gt;http://&lt;%= Request.Url.Host + Url.Action(&quot;ViewPostByName&quot;, new RouteValueDictionary(new { name = p.Name })) %&gt;&lt;/guid&gt;\r\n    &lt;pubDate&gt;&lt;%= p.DatePublished.Value.ToUniversalTime().ToString(&quot;r&quot;) %&gt;&lt;/pubDate&gt;\r\n    &lt;description&gt;&lt;%= Html.Encode(p.Content) %&gt;&lt;/description&gt;\r\n    &lt;/item&gt;\r\n&lt;% } %&gt;\r\n&lt;/channel&gt;\r\n&lt;/rss&gt;\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nAfter this you can add a route if you want to customize your feed URL to be something like yoursite.com/feed/rss/:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>routes.MapRoute(\r\n    \"PostFeed\",\r\n    \"Feed/{type}\",\r\n    new { controller = \"Blog\", action = \"PostFeed\", type = \"rss\" }\r\n);\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThat's it! Most bloggers seem to use <a href=\"http://www.feedburner.com/\" title=\"Go to feedburner.com\">feedburner</a> to manage their RSS feeds, so I did that as well and it was very straightforward. They provide a bunch of HTML snippets to advertise your feed.\r\n</p>\r\n\r\n<p>\r\nBTW, writing this post is making me realize how bad I need to integrate some kind of editor for creating blog posts, rather than typing into a textarea and manually encoding the xml code above. I also need to pick a syntax highlighter and plug it in for easier reading. Nobody is reading yet though, so it's ok ;).\r\n</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "A short tutorial of a simple implementation of an RSS feed in an ASP.NET MVC site", 
      "categories": [], 
      "modified": "2009-11-30 23:36:59", 
      "visits": 0, 
      "created": "2009-11-30 23:31:21", 
      "body_markup": "<p>\r\nThis blog was missing the third most important feature of a blog: <a href=\"http://en.wikipedia.org/wiki/RSS&#95;%28file&#95;format%29\" title=\"Read about Really Simple Syndication on Wikipedia\">RSS</a>. (The first two most important features are posts and comments because <a href=\"http://www.codinghorror.com/blog/archives/000538.html\" title=\"Go read Jeff Atwood's post on this\">a blog without comments is not a blog</a>. I am still waiting for comments on this blog but I am sure it will take time.)</p>\r\n<p>\r\nThere are probably many ultra fancy ways to create an RSS feed using <a href=\"http://www.rssdotnet.com/\" title=\"Check out RSS.NET\">existing</a> <a href=\"http://www.codeplex.com/ASPNETRSSToolkit\" title=\"Check out AspNet RSS Toolkit\">libraries</a> for .Net. For example, one could create a new ActionResult that returned RSS: RssResult (analogous to JsonResult for returning JSON). This isn't rocket science, so I decided to keep it simple and just create a new View for RSS.\r\n</p>\r\n\r\n<p>\r\nThe first step was to create a new Action in my Blog Controller that retrieves the latest (12 in my case) posts and passes them on to the View:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>public ActionResult PostFeed(string type) {\r\n    if (type.ToLower().Equals(\"rss\")) {\r\n        return View(\"PostRSS\", _blogService.GetPosts(0,12));\r\n    } else {\r\n        return RedirectToAction(\"Index\", \"Home\");\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThe (syndication) type is passed in so that I can easily add <a href=\"http://en.wikipedia.org/wiki/Atom&#95;Syndication&#95;Format\" title=\"Read about Atom standard on Wikipedia\">Atom</a> or any other format in the future. If an invalid type is passed in then I just redirect the user to the home page. Maybe I should redirect to the RSS feed instead?\r\n</p>\r\n\r\n<p>\r\nThe next step is to create the View (PostRSS.aspx), which is simply a template for the RSS XML with a foreach loop to go through the posts. Note that I had to put the &lt;?xml ... ?&gt; declaration on the same line and to the right of the &lt;%@ Page ... %&gt;. Otherwise, a blank line is rendered at the top of the page and the XML becomes invalid :-|.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;%@ Page ContentType=&quot;application/rss+xml&quot; Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;PostRSS.aspx.cs&quot; Inherits=&quot;rr.web.Views.Blog.PostRSS&quot; %&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\r\n&lt;rss version=&quot;2.0&quot;&gt;\r\n&lt;channel&gt;\r\n&lt;title&gt;ricky rosario's blog&lt;/title&gt;\r\n&lt;link&gt;http://&lt;%= Request.Url.Host %&gt;&lt;/link&gt;\r\n&lt;description&gt;Blog RSS feed for rickyrosario.com&lt;/description&gt;\r\n&lt;lastBuildDate&gt;&lt;%= ViewData.Model.First().DatePublished.Value.ToUniversalTime().ToString(&quot;r&quot;) %&gt;&lt;/lastBuildDate&gt;\r\n&lt;language&gt;en-us&lt;/language&gt;\r\n&lt;% foreach (Post p in ViewData.Model) { %&gt;\r\n    &lt;item&gt;\r\n    &lt;title&gt;&lt;%= Html.Encode(p.Title) %&gt;&lt;/title&gt;\r\n    &lt;link&gt;http://&lt;%= Request.Url.Host + Url.Action(&quot;ViewPostByName&quot;, new RouteValueDictionary(new { name = p.Name })) %&gt;&lt;/link&gt;\r\n    &lt;guid&gt;http://&lt;%= Request.Url.Host + Url.Action(&quot;ViewPostByName&quot;, new RouteValueDictionary(new { name = p.Name })) %&gt;&lt;/guid&gt;\r\n    &lt;pubDate&gt;&lt;%= p.DatePublished.Value.ToUniversalTime().ToString(&quot;r&quot;) %&gt;&lt;/pubDate&gt;\r\n    &lt;description&gt;&lt;%= Html.Encode(p.Content) %&gt;&lt;/description&gt;\r\n    &lt;/item&gt;\r\n&lt;% } %&gt;\r\n&lt;/channel&gt;\r\n&lt;/rss&gt;\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nAfter this you can add a route if you want to customize your feed URL to be something like yoursite.com/feed/rss/:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>routes.MapRoute(\r\n    \"PostFeed\",\r\n    \"Feed/{type}\",\r\n    new { controller = \"Blog\", action = \"PostFeed\", type = \"rss\" }\r\n);\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThat's it! Most bloggers seem to use <a href=\"http://www.feedburner.com/\" title=\"Go to feedburner.com\">feedburner</a> to manage their RSS feeds, so I did that as well and it was very straightforward. They provide a bunch of HTML snippets to advertise your feed.\r\n</p>\r\n\r\n<p>\r\nBTW, writing this post is making me realize how bad I need to integrate some kind of editor for creating blog posts, rather than typing into a textarea and manually encoding the xml code above. I also need to pick a syntax highlighter and plug it in for easier reading. Nobody is reading yet though, so it's ok ;).\r\n</p>", 
      "publish": "2008-08-17 00:00:00", 
      "title": "Creating an RSS Feed in ASP.NET MVC", 
      "slug": "creating-an-rss-feed-in-aspnet-mvc", 
      "tags": "rss aspnetmvc "
    }
  }, 
  {
    "pk": 3, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nHere is a list of public facing features that I plan on adding to this site (and blog about) in the near future:</p>\r\n<ul>\r\n<li><a href=\"http://en.wikipedia.org/wiki/RSS&#95;(file&#95;format)\" title=\"Go to wikipedia entry on Really Simple Syndication\">RSS</a> - can't have a blog without it</li>\r\n<li><a href=\"http://www.gravatar.com\" title=\"Go to gravatar.com\">Gravatars</a> for comments</li>\r\n<li>Some sort of comment filter/spam catcher</li>\r\n<li><a href=\"http://wmd-editor.com/\" title=\"WMD: The Wysiwym Markdown Editor\">Markdown Editor</a> for comments</li>\r\n<li>Blog post paging (I can't have them all show up on the home page)</li>\r\n<li>Post Tags</li>\r\n<li>Post-specific metadata (meta keywords and description)</li>\r\n<li>Search</li>\r\n<li>Archives</li>\r\n<li><a href=\"http://code.google.com/p/syntaxhighlighter/\" title=\"Free syntax highlighter written in JavaScript\">Syntax highlighting</a> for code in blog posts and comments</li>\r\n<li><a href=\"http://www.hanselman.com/blog/MakeYourWebsiteMobileAndIPhoneFriendlyAddHomeScreenIPhoneIconsAndAdjustTheViewPort.aspx\" title=\"Make your Website Mobile and iPhone Friendly - Add Home Screen iPhone Icons and Adjust the ViewPort\">Mobile friendly</a></li>\r\n<li>Threaded comments (still undecided if I really want this)</li>\r\n<li>JavaScript/AJAX (my favorite part)</li>\r\n<li>Some integration with Twitter, Flickr, etc.</li>\r\n<li>Accessibility features (alternate font sizes, high contrast version, <a href=\"http://www.w3.org/WAI/intro/aria\" title=\"Learn about ARIA\">ARIA</a>, etc.)</li>\r\n</ul>\r\n<p>\r\nI have made it a point to not put in any JavaScript (other than the Google Analytics snippet) until I am\r\nhappy with the set of features. This way I will ensure that the site works fully without it, and I will\r\nthen <a href=\"http://en.wikipedia.org/wiki/Progressive&#95;Enhancement\" title=\"Learn more about Progressive Enhancement\">&quot;progressively\r\nenhance&quot;</a> the experience from there. It is one of the big benefits of the MVC framework over WebForms, which throw\r\nin a bunch of ghetto JavaScript on the page for doing postbacks, etc.\r\n</p>\r\n\r\n<p>\r\nThere are also a ton of backend/admin features that I will need to add to the blog in order to make\r\nit easy to maintain. For example, the <a href=\"http://www.rfc-editor.org/rfc/rfc5023.txt\" title=\"The Atom Publishing Protocol specification\">Atom Publishing\r\nProtocol</a> looks interesting for creating and editing posts from tools such as \r\n<a href=\"http://get.live.com/writer/overview\" title=\"Check out Windows Live Writer\">Windows Live Writer</a>.\r\nBut I really won't know what I need or want until I do this enough.\r\n</p>\r\n\r\n<p>\r\nWhat else am I missing?\r\n</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "This is my initial list of wanted features for this site", 
      "categories": [], 
      "modified": "2009-11-30 23:32:06", 
      "visits": 2, 
      "created": "2009-11-30 23:25:28", 
      "body_markup": "<p>\r\nHere is a list of public facing features that I plan on adding to this site (and blog about) in the near future:</p>\r\n<ul>\r\n<li><a href=\"http://en.wikipedia.org/wiki/RSS&#95;(file&#95;format)\" title=\"Go to wikipedia entry on Really Simple Syndication\">RSS</a> - can't have a blog without it</li>\r\n<li><a href=\"http://www.gravatar.com\" title=\"Go to gravatar.com\">Gravatars</a> for comments</li>\r\n<li>Some sort of comment filter/spam catcher</li>\r\n<li><a href=\"http://wmd-editor.com/\" title=\"WMD: The Wysiwym Markdown Editor\">Markdown Editor</a> for comments</li>\r\n<li>Blog post paging (I can't have them all show up on the home page)</li>\r\n<li>Post Tags</li>\r\n<li>Post-specific metadata (meta keywords and description)</li>\r\n<li>Search</li>\r\n<li>Archives</li>\r\n<li><a href=\"http://code.google.com/p/syntaxhighlighter/\" title=\"Free syntax highlighter written in JavaScript\">Syntax highlighting</a> for code in blog posts and comments</li>\r\n<li><a href=\"http://www.hanselman.com/blog/MakeYourWebsiteMobileAndIPhoneFriendlyAddHomeScreenIPhoneIconsAndAdjustTheViewPort.aspx\" title=\"Make your Website Mobile and iPhone Friendly - Add Home Screen iPhone Icons and Adjust the ViewPort\">Mobile friendly</a></li>\r\n<li>Threaded comments (still undecided if I really want this)</li>\r\n<li>JavaScript/AJAX (my favorite part)</li>\r\n<li>Some integration with Twitter, Flickr, etc.</li>\r\n<li>Accessibility features (alternate font sizes, high contrast version, <a href=\"http://www.w3.org/WAI/intro/aria\" title=\"Learn about ARIA\">ARIA</a>, etc.)</li>\r\n</ul>\r\n<p>\r\nI have made it a point to not put in any JavaScript (other than the Google Analytics snippet) until I am\r\nhappy with the set of features. This way I will ensure that the site works fully without it, and I will\r\nthen <a href=\"http://en.wikipedia.org/wiki/Progressive&#95;Enhancement\" title=\"Learn more about Progressive Enhancement\">&quot;progressively\r\nenhance&quot;</a> the experience from there. It is one of the big benefits of the MVC framework over WebForms, which throw\r\nin a bunch of ghetto JavaScript on the page for doing postbacks, etc.\r\n</p>\r\n\r\n<p>\r\nThere are also a ton of backend/admin features that I will need to add to the blog in order to make\r\nit easy to maintain. For example, the <a href=\"http://www.rfc-editor.org/rfc/rfc5023.txt\" title=\"The Atom Publishing Protocol specification\">Atom Publishing\r\nProtocol</a> looks interesting for creating and editing posts from tools such as \r\n<a href=\"http://get.live.com/writer/overview\" title=\"Check out Windows Live Writer\">Windows Live Writer</a>.\r\nBut I really won't know what I need or want until I do this enough.\r\n</p>\r\n\r\n<p>\r\nWhat else am I missing?\r\n</p>", 
      "publish": "2008-08-16 00:00:00", 
      "title": "Feature Wishlist", 
      "slug": "feature-wishlist", 
      "tags": "blog"
    }
  }, 
  {
    "pk": 2, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>\r\nI am implementing this blog (and site) from scratch~ish. I want to blog about my experience implementing this, so I got the functionality to a bare minimum for a blog and this is it. There is support for posts and comments and not much else. As I add more features over the next few weeks, I will blog about some of the details. I have never blogged before so hopefully I don't suck too much and improve quickly :). Improving my writing skills is one of my main goals with blogging.\r\n</p>\r\n\r\n<p>\r\nThe technology behind this site is the <a href=\"http://asp.net/mvc\" title=\"Go to the official ASP.NET MVC site\">ASP.NET MVC</a> framework (currently running on Preview 4), SQL Server 2005 and LINQ to SQL for the data access. The architecture is heavily influenced by <a href=\"http://blog.wekeroad.com/\" title=\"Visit Rob Connery's website\">Rob Connery</a> and his <a href=\"http://blog.wekeroad.com/mvc-storefront/\" title=\"Checkout Rob's MVC Storefront blog posts\">MVC Storefront series</a>, who I am a big fan of. I am using <a href=\"http://structuremap.sourceforge.net/Default.htm\" title=\"Go to the Structure Map website\">Structure Map</a> for <a href=\"http://en.wikipedia.org/wiki/Dependency&#95;injection\" title=\"Dependency Injection on Wikipedia\">Dependency Injection</a>, the pseudo-repository pattern with IQueryables, etc.\r\n</p>\r\n\r\n<p>\r\nThanks to the following <span class=\"strike\">softies</span> bloggers for their <a href=\"http://blog.wekeroad.com/blog/aspnet-mvc-preview-using-the-mvc-ui-helpers/\" title=\"MVC Storefront: Dependency Injection\">great</a> <a href=\"http://weblogs.asp.net/scottgu/archive/2008/07/14/asp-net-mvc-preview-4-release-part-1.aspx\" title=\"ASP.NET MVC Preview 4 Release (Part 1)\">posts</a> on the MVC framework:\r\n</p>\r\n\r\n<ul>\r\n<li>\r\n  <a href=\"http://haacked.com/\" title=\"Go to Phil Haack's site\">Phil Haack</a>\r\n</li>\r\n<li>\r\n  <a href=\"http://blog.wekeroad.com/\" title=\"Go to robcon's site\">Rob Conery</a>\r\n</li>\r\n<li>\r\n  <a href=\"http://www.hanselman.com/blog/\" title=\"Go to ScottHa's site\">Scott Hanselman</a>\r\n</li>\r\n<li>\r\n  <a href=\"http://weblogs.asp.net/scottgu/default.aspx\" title=\"Go to ScottGu's site\">Scott Guthrie</a>\r\n</li>\r\n</ul>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "What this site is all about...", 
      "categories": [], 
      "modified": "2009-11-30 23:37:18", 
      "visits": 0, 
      "created": "2009-11-30 23:16:39", 
      "body_markup": "<p>\r\nI am implementing this blog (and site) from scratch~ish. I want to blog about my experience implementing this, so I got the functionality to a bare minimum for a blog and this is it. There is support for posts and comments and not much else. As I add more features over the next few weeks, I will blog about some of the details. I have never blogged before so hopefully I don't suck too much and improve quickly :). Improving my writing skills is one of my main goals with blogging.\r\n</p>\r\n\r\n<p>\r\nThe technology behind this site is the <a href=\"http://asp.net/mvc\" title=\"Go to the official ASP.NET MVC site\">ASP.NET MVC</a> framework (currently running on Preview 4), SQL Server 2005 and LINQ to SQL for the data access. The architecture is heavily influenced by <a href=\"http://blog.wekeroad.com/\" title=\"Visit Rob Connery's website\">Rob Connery</a> and his <a href=\"http://blog.wekeroad.com/mvc-storefront/\" title=\"Checkout Rob's MVC Storefront blog posts\">MVC Storefront series</a>, who I am a big fan of. I am using <a href=\"http://structuremap.sourceforge.net/Default.htm\" title=\"Go to the Structure Map website\">Structure Map</a> for <a href=\"http://en.wikipedia.org/wiki/Dependency&#95;injection\" title=\"Dependency Injection on Wikipedia\">Dependency Injection</a>, the pseudo-repository pattern with IQueryables, etc.\r\n</p>\r\n\r\n<p>\r\nThanks to the following <span class=\"strike\">softies</span> bloggers for their <a href=\"http://blog.wekeroad.com/blog/aspnet-mvc-preview-using-the-mvc-ui-helpers/\" title=\"MVC Storefront: Dependency Injection\">great</a> <a href=\"http://weblogs.asp.net/scottgu/archive/2008/07/14/asp-net-mvc-preview-4-release-part-1.aspx\" title=\"ASP.NET MVC Preview 4 Release (Part 1)\">posts</a> on the MVC framework:\r\n</p>\r\n\r\n<ul>\r\n<li>\r\n  <a href=\"http://haacked.com/\" title=\"Go to Phil Haack's site\">Phil Haack</a>\r\n</li>\r\n<li>\r\n  <a href=\"http://blog.wekeroad.com/\" title=\"Go to robcon's site\">Rob Conery</a>\r\n</li>\r\n<li>\r\n  <a href=\"http://www.hanselman.com/blog/\" title=\"Go to ScottHa's site\">Scott Hanselman</a>\r\n</li>\r\n<li>\r\n  <a href=\"http://weblogs.asp.net/scottgu/default.aspx\" title=\"Go to ScottGu's site\">Scott Guthrie</a>\r\n</li>\r\n</ul>", 
      "publish": "2008-08-15 00:00:00", 
      "title": "About This Site and Blog", 
      "slug": "about-this-site-and-blog", 
      "tags": "blog about "
    }
  }, 
  {
    "pk": 1, 
    "model": "blog.post", 
    "fields": {
      "body": "<p>My very first blog post...</p>\r\n<p>\r\nIf there is anybody reading this, hi there!\r\n</p>", 
      "status": 2, 
      "allow_comments": true, 
      "author": null, 
      "markup": "none", 
      "tease": "My first blog post on this site.", 
      "categories": [], 
      "modified": "2009-11-30 23:17:40", 
      "visits": 5, 
      "created": "2009-11-30 22:25:17", 
      "body_markup": "<p>My very first blog post...</p>\r\n<p>\r\nIf there is anybody reading this, hi there!\r\n</p>", 
      "publish": "2008-08-14 00:00:00", 
      "title": "Hello World", 
      "slug": "hello-world", 
      "tags": "helloworld"
    }
  }, 
  {
    "pk": 1, 
    "model": "blog.settings", 
    "fields": {
      "meta_description": "Ricky Rosario is a passionate web developer with experience in a diverse set of technologies.", 
      "rss_url": "http://feeds.feedburner.com/rickyrosario", 
      "about": "Hi there.", 
      "meta_keywords": "ricky rosario, javascript, python, django asp.net, mvc, presentation layer, software, web development", 
      "site_name": "rickyrosario.com", 
      "copyright": "Ricky Rosario", 
      "twitter_url": "http://twitter.com/r1cky", 
      "ping_google": true, 
      "site": 1, 
      "author_name": "Ricky Rosario", 
      "page_size": 10, 
      "disqus_shortname": "rickyrosario", 
      "email_subscribe_url": ""
    }
  }, 
  {
    "pk": 1, 
    "model": "media.photo", 
    "fields": {
      "uploaded": "2009-11-30 23:53:48", 
      "description": "", 
      "license": "", 
      "title": "Buttons", 
      "_exif": "", 
      "photo": "photos/blog-post-buttons.gif", 
      "tags": "", 
      "modified": "2009-11-30 23:53:48", 
      "slug": "buttons", 
      "taken_by": ""
    }
  }, 
  {
    "pk": 2, 
    "model": "media.photo", 
    "fields": {
      "uploaded": "2009-12-01 00:38:28", 
      "description": "", 
      "license": "", 
      "title": "Google Custom Search", 
      "_exif": "", 
      "photo": "photos/google-cse.jpg", 
      "tags": "", 
      "modified": "2009-12-01 00:38:28", 
      "slug": "google-custom-search", 
      "taken_by": ""
    }
  }, 
  {
    "pk": 4, 
    "model": "media.photo", 
    "fields": {
      "uploaded": "2009-12-01 00:55:23", 
      "description": "", 
      "license": "", 
      "title": "Hover Magic Sucks", 
      "_exif": "", 
      "photo": "photos/hover-suck.jpg", 
      "tags": "", 
      "modified": "2009-12-01 00:55:23", 
      "slug": "hover-magic-sucks", 
      "taken_by": ""
    }
  }, 
  {
    "pk": 5, 
    "model": "media.photo", 
    "fields": {
      "uploaded": "2009-12-01 01:10:31", 
      "description": "", 
      "license": "", 
      "title": "Twitapi.com Screenshot", 
      "_exif": "", 
      "photo": "photos/twitapi-screenshot.jpg", 
      "tags": "", 
      "modified": "2009-12-01 01:10:31", 
      "slug": "twitapicom-screenshot", 
      "taken_by": ""
    }
  }, 
  {
    "pk": 1, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://\\S*?flickr.com/\\S*", 
      "endpoint": "http://www.flickr.com/services/oembed/", 
      "name": "Flickr", 
      "format": 1
    }
  }, 
  {
    "pk": 2, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://\\S*?viddler.com/\\S*", 
      "endpoint": "http://lab.viddler.com/services/oembed/", 
      "name": "Viddler", 
      "format": 1
    }
  }, 
  {
    "pk": 3, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://qik.com/\\S*", 
      "endpoint": "http://qik.com/api/oembed.json", 
      "name": "Qik", 
      "format": 1
    }
  }, 
  {
    "pk": 4, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://\\S*?pownce.com/\\S*", 
      "endpoint": "http://api.pownce.com/2.1/oembed.json", 
      "name": "Pownce", 
      "format": 1
    }
  }, 
  {
    "pk": 5, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://\\S*?revision3.com/\\S*", 
      "endpoint": "http://revision3.com/api/oembed/", 
      "name": "Revision3", 
      "format": 1
    }
  }, 
  {
    "pk": 6, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://\\S*.amazon.(com|co.uk|de|ca|jp)/\\S*/(gp/product|o/ASIN|obidos/ASIN|dp)/\\S*", 
      "endpoint": "http://oohembed.com/oohembed/", 
      "name": "Amazon Product Image (OohEmbed)", 
      "format": 1
    }
  }, 
  {
    "pk": 7, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://\\S*.collegehumor.com/video:\\S*", 
      "endpoint": "http://oohembed.com/oohembed/", 
      "name": "CollegeHumor Video (OohEmbed)", 
      "format": 1
    }
  }, 
  {
    "pk": 8, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://\\S*.funnyordie.com/videos/\\S*", 
      "endpoint": "http://oohembed.com/oohembed/", 
      "name": "Funny or Die Video (OohEmbed)", 
      "format": 1
    }
  }, 
  {
    "pk": 9, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://video.google.com/videoplay?\\S*", 
      "endpoint": "http://oohembed.com/oohembed/", 
      "name": "Google Video (OohEmbed)", 
      "format": 1
    }
  }, 
  {
    "pk": 10, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://www.hulu.com/watch/\\S*", 
      "endpoint": "http://oohembed.com/oohembed/", 
      "name": "Hulu (OohEmbed)", 
      "format": 1
    }
  }, 
  {
    "pk": 11, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://\\S*.metacafe.com/watch/\\S*", 
      "endpoint": "http://oohembed.com/oohembed/", 
      "name": "Metacafe (OohEmbed)", 
      "format": 1
    }
  }, 
  {
    "pk": 12, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://twitter.com/\\S*/statuses/\\S*", 
      "endpoint": "http://oohembed.com/oohembed/", 
      "name": "Twitter Status (OohEmbed)", 
      "format": 1
    }
  }, 
  {
    "pk": 13, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://\\S*.wikipedia.org/wiki/\\S*", 
      "endpoint": "http://oohembed.com/oohembed/", 
      "name": "Wikipedia (OohEmbed)", 
      "format": 1
    }
  }, 
  {
    "pk": 14, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://\\S*.youtube.com/watch\\S*", 
      "endpoint": "http://oohembed.com/oohembed/", 
      "name": "YouTube (OohEmbed)", 
      "format": 1
    }
  }, 
  {
    "pk": 15, 
    "model": "oembed.providerrule", 
    "fields": {
      "regex": "http://vimeo.com/\\S*", 
      "endpoint": "http://vimeo.com/api/oembed.json", 
      "name": "Vimeo", 
      "format": 1
    }
  }, 
  {
    "pk": 2, 
    "model": "oembed.storedoembed", 
    "fields": {
      "max_height": 240, 
      "date_added": "2009-12-01 00:46:00", 
      "html": "<a href=\"http://www.flickr.com/photos/boricua/3102592560/\" title=\"November 27 by rlr77, on Flickr\"><img src=\"http://farm4.static.flickr.com/3211/3102592560&#95;53396012be.jpg\" width=\"500\" height=\"334\" alt=\"November 27\" /></a>", 
      "max_width": 320, 
      "match": "http://www.flickr.com/photos/boricua/3102592560/"
    }
  }, 
  {
    "pk": 3, 
    "model": "oembed.storedoembed", 
    "fields": {
      "max_height": 240, 
      "date_added": "2009-12-01 00:46:02", 
      "html": "http://en.wikipedia.org/wiki/Design_Patterns\">design", 
      "max_width": 320, 
      "match": "http://en.wikipedia.org/wiki/Design_Patterns\">design"
    }
  }, 
  {
    "pk": 1, 
    "model": "flatblocks.flatblock", 
    "fields": {
      "content": "<p>Powered by my hackings on <a href=\"http://github.com/montylounge/django-mingus/tree/master\" title=\"Mingus blog engine\">Django-Mingus</a> a <a href=\"http://djangoproject.com\" title=\"Django - web framework for perfectionists with deadlines.\">Django</a> project. </p>\r\n<p class=\"copyright\">\r\n <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/3.0/us/\" title=\"Creative Commons License\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"http://i.creativecommons.org/l/by/3.0/us/80x15.png\" /></a>\r\n&copy; Copyright 2009, Ricky Rosario.\r\n</p>\r\n<p class=\"disclaimer\">\r\n<strong>Disclaimer:</strong>\r\nThe opinions expressed herein are my own personal opinions and do not represent my employer's view in any way.\r\n</p>\r\n<p class=\"val\">    \r\n<a href=\"http://html5.validator.nu/?doc=http%3a%2f%2frickyrosario.com%2fblog%2fpage%2f7\" title=\"Validate the markup of this page\" rel=\"nofollow\">html5</a> |\r\n<a href=\"#pg\" class=\"accessibility\" title=\"Go back to top of page\">top</a>\r\n</p>", 
      "header": "", 
      "slug": "footer"
    }
  }, 
  {
    "pk": 1, 
    "model": "navbar.navbarentry", 
    "fields": {
      "name": "about", 
      "parent": null, 
      "title": "about", 
      "url": "/about/", 
      "user_type": "E", 
      "groups": [], 
      "path_type": "A", 
      "order": 0
    }
  }, 
  {
    "pk": 4, 
    "model": "navbar.navbarentry", 
    "fields": {
      "name": "blog", 
      "parent": null, 
      "title": "my blog posts", 
      "url": "/blog/", 
      "user_type": "E", 
      "groups": [], 
      "path_type": "A", 
      "order": 1
    }
  }, 
  {
    "pk": 2, 
    "model": "navbar.navbarentry", 
    "fields": {
      "name": "contact", 
      "parent": null, 
      "title": "contact", 
      "url": "/contact/", 
      "user_type": "E", 
      "groups": [], 
      "path_type": "A", 
      "order": 2
    }
  }, 
  {
    "pk": 1, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>My very first blog post...</p>\r\n<p>\r\nIf there is anybody reading this, hi there!\r\n</p>", 
      "tags": "helloworld", 
      "title": "Hello World", 
      "object_id": 1, 
      "created_on": "2009-11-30 22:25:17", 
      "content_type": 15, 
      "updated_on": "2009-11-30 23:17:40", 
      "pub_date": "2008-08-14 00:00:00"
    }
  }, 
  {
    "pk": 2, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nI am implementing this blog (and site) from scratch~ish. I want to blog about my experience implementing this, so I got the functionality to a bare minimum for a blog and this is it. There is support for posts and comments and not much else. As I add more features over the next few weeks, I will blog about some of the details. I have never blogged before so hopefully I don't suck too much and improve quickly :). Improving my writing skills is one of my main goals with blogging.\r\n</p>\r\n\r\n<p>\r\nThe technology behind this site is the <a href=\"http://asp.net/mvc\" title=\"Go to the official ASP.NET MVC site\">ASP.NET MVC</a> framework (currently running on Preview 4), SQL Server 2005 and LINQ to SQL for the data access. The architecture is heavily influenced by <a href=\"http://blog.wekeroad.com/\" title=\"Visit Rob Connery's website\">Rob Connery</a> and his <a href=\"http://blog.wekeroad.com/mvc-storefront/\" title=\"Checkout Rob's MVC Storefront blog posts\">MVC Storefront series</a>, who I am a big fan of. I am using <a href=\"http://structuremap.sourceforge.net/Default.htm\" title=\"Go to the Structure Map website\">Structure Map</a> for <a href=\"http://en.wikipedia.org/wiki/Dependency&#95;injection\" title=\"Dependency Injection on Wikipedia\">Dependency Injection</a>, the pseudo-repository pattern with IQueryables, etc.\r\n</p>\r\n\r\n<p>\r\nThanks to the following <span class=\"strike\">softies</span> bloggers for their <a href=\"http://blog.wekeroad.com/blog/aspnet-mvc-preview-using-the-mvc-ui-helpers/\" title=\"MVC Storefront: Dependency Injection\">great</a> <a href=\"http://weblogs.asp.net/scottgu/archive/2008/07/14/asp-net-mvc-preview-4-release-part-1.aspx\" title=\"ASP.NET MVC Preview 4 Release (Part 1)\">posts</a> on the MVC framework:\r\n</p>\r\n\r\n<ul>\r\n<li>\r\n  <a href=\"http://haacked.com/\" title=\"Go to Phil Haack's site\">Phil Haack</a>\r\n</li>\r\n<li>\r\n  <a href=\"http://blog.wekeroad.com/\" title=\"Go to robcon's site\">Rob Conery</a>\r\n</li>\r\n<li>\r\n  <a href=\"http://www.hanselman.com/blog/\" title=\"Go to ScottHa's site\">Scott Hanselman</a>\r\n</li>\r\n<li>\r\n  <a href=\"http://weblogs.asp.net/scottgu/default.aspx\" title=\"Go to ScottGu's site\">Scott Guthrie</a>\r\n</li>\r\n</ul>", 
      "tags": "blog about ", 
      "title": "About This Site and Blog", 
      "object_id": 2, 
      "created_on": "2009-11-30 23:16:39", 
      "content_type": 15, 
      "updated_on": "2009-11-30 23:37:18", 
      "pub_date": "2008-08-15 00:00:00"
    }
  }, 
  {
    "pk": 3, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nHere is a list of public facing features that I plan on adding to this site (and blog about) in the near future:</p>\r\n<ul>\r\n<li><a href=\"http://en.wikipedia.org/wiki/RSS&#95;(file&#95;format)\" title=\"Go to wikipedia entry on Really Simple Syndication\">RSS</a> - can't have a blog without it</li>\r\n<li><a href=\"http://www.gravatar.com\" title=\"Go to gravatar.com\">Gravatars</a> for comments</li>\r\n<li>Some sort of comment filter/spam catcher</li>\r\n<li><a href=\"http://wmd-editor.com/\" title=\"WMD: The Wysiwym Markdown Editor\">Markdown Editor</a> for comments</li>\r\n<li>Blog post paging (I can't have them all show up on the home page)</li>\r\n<li>Post Tags</li>\r\n<li>Post-specific metadata (meta keywords and description)</li>\r\n<li>Search</li>\r\n<li>Archives</li>\r\n<li><a href=\"http://code.google.com/p/syntaxhighlighter/\" title=\"Free syntax highlighter written in JavaScript\">Syntax highlighting</a> for code in blog posts and comments</li>\r\n<li><a href=\"http://www.hanselman.com/blog/MakeYourWebsiteMobileAndIPhoneFriendlyAddHomeScreenIPhoneIconsAndAdjustTheViewPort.aspx\" title=\"Make your Website Mobile and iPhone Friendly - Add Home Screen iPhone Icons and Adjust the ViewPort\">Mobile friendly</a></li>\r\n<li>Threaded comments (still undecided if I really want this)</li>\r\n<li>JavaScript/AJAX (my favorite part)</li>\r\n<li>Some integration with Twitter, Flickr, etc.</li>\r\n<li>Accessibility features (alternate font sizes, high contrast version, <a href=\"http://www.w3.org/WAI/intro/aria\" title=\"Learn about ARIA\">ARIA</a>, etc.)</li>\r\n</ul>\r\n<p>\r\nI have made it a point to not put in any JavaScript (other than the Google Analytics snippet) until I am\r\nhappy with the set of features. This way I will ensure that the site works fully without it, and I will\r\nthen <a href=\"http://en.wikipedia.org/wiki/Progressive&#95;Enhancement\" title=\"Learn more about Progressive Enhancement\">&quot;progressively\r\nenhance&quot;</a> the experience from there. It is one of the big benefits of the MVC framework over WebForms, which throw\r\nin a bunch of ghetto JavaScript on the page for doing postbacks, etc.\r\n</p>\r\n\r\n<p>\r\nThere are also a ton of backend/admin features that I will need to add to the blog in order to make\r\nit easy to maintain. For example, the <a href=\"http://www.rfc-editor.org/rfc/rfc5023.txt\" title=\"The Atom Publishing Protocol specification\">Atom Publishing\r\nProtocol</a> looks interesting for creating and editing posts from tools such as \r\n<a href=\"http://get.live.com/writer/overview\" title=\"Check out Windows Live Writer\">Windows Live Writer</a>.\r\nBut I really won't know what I need or want until I do this enough.\r\n</p>\r\n\r\n<p>\r\nWhat else am I missing?\r\n</p>", 
      "tags": "blog", 
      "title": "Feature Wishlist", 
      "object_id": 3, 
      "created_on": "2009-11-30 23:25:28", 
      "content_type": 15, 
      "updated_on": "2009-11-30 23:32:06", 
      "pub_date": "2008-08-16 00:00:00"
    }
  }, 
  {
    "pk": 4, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nThis blog was missing the third most important feature of a blog: <a href=\"http://en.wikipedia.org/wiki/RSS&#95;%28file&#95;format%29\" title=\"Read about Really Simple Syndication on Wikipedia\">RSS</a>. (The first two most important features are posts and comments because <a href=\"http://www.codinghorror.com/blog/archives/000538.html\" title=\"Go read Jeff Atwood's post on this\">a blog without comments is not a blog</a>. I am still waiting for comments on this blog but I am sure it will take time.)</p>\r\n<p>\r\nThere are probably many ultra fancy ways to create an RSS feed using <a href=\"http://www.rssdotnet.com/\" title=\"Check out RSS.NET\">existing</a> <a href=\"http://www.codeplex.com/ASPNETRSSToolkit\" title=\"Check out AspNet RSS Toolkit\">libraries</a> for .Net. For example, one could create a new ActionResult that returned RSS: RssResult (analogous to JsonResult for returning JSON). This isn't rocket science, so I decided to keep it simple and just create a new View for RSS.\r\n</p>\r\n\r\n<p>\r\nThe first step was to create a new Action in my Blog Controller that retrieves the latest (12 in my case) posts and passes them on to the View:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>public ActionResult PostFeed(string type) {\r\n    if (type.ToLower().Equals(\"rss\")) {\r\n        return View(\"PostRSS\", _blogService.GetPosts(0,12));\r\n    } else {\r\n        return RedirectToAction(\"Index\", \"Home\");\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThe (syndication) type is passed in so that I can easily add <a href=\"http://en.wikipedia.org/wiki/Atom&#95;Syndication&#95;Format\" title=\"Read about Atom standard on Wikipedia\">Atom</a> or any other format in the future. If an invalid type is passed in then I just redirect the user to the home page. Maybe I should redirect to the RSS feed instead?\r\n</p>\r\n\r\n<p>\r\nThe next step is to create the View (PostRSS.aspx), which is simply a template for the RSS XML with a foreach loop to go through the posts. Note that I had to put the &lt;?xml ... ?&gt; declaration on the same line and to the right of the &lt;%@ Page ... %&gt;. Otherwise, a blank line is rendered at the top of the page and the XML becomes invalid :-|.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;%@ Page ContentType=&quot;application/rss+xml&quot; Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;PostRSS.aspx.cs&quot; Inherits=&quot;rr.web.Views.Blog.PostRSS&quot; %&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\r\n&lt;rss version=&quot;2.0&quot;&gt;\r\n&lt;channel&gt;\r\n&lt;title&gt;ricky rosario's blog&lt;/title&gt;\r\n&lt;link&gt;http://&lt;%= Request.Url.Host %&gt;&lt;/link&gt;\r\n&lt;description&gt;Blog RSS feed for rickyrosario.com&lt;/description&gt;\r\n&lt;lastBuildDate&gt;&lt;%= ViewData.Model.First().DatePublished.Value.ToUniversalTime().ToString(&quot;r&quot;) %&gt;&lt;/lastBuildDate&gt;\r\n&lt;language&gt;en-us&lt;/language&gt;\r\n&lt;% foreach (Post p in ViewData.Model) { %&gt;\r\n    &lt;item&gt;\r\n    &lt;title&gt;&lt;%= Html.Encode(p.Title) %&gt;&lt;/title&gt;\r\n    &lt;link&gt;http://&lt;%= Request.Url.Host + Url.Action(&quot;ViewPostByName&quot;, new RouteValueDictionary(new { name = p.Name })) %&gt;&lt;/link&gt;\r\n    &lt;guid&gt;http://&lt;%= Request.Url.Host + Url.Action(&quot;ViewPostByName&quot;, new RouteValueDictionary(new { name = p.Name })) %&gt;&lt;/guid&gt;\r\n    &lt;pubDate&gt;&lt;%= p.DatePublished.Value.ToUniversalTime().ToString(&quot;r&quot;) %&gt;&lt;/pubDate&gt;\r\n    &lt;description&gt;&lt;%= Html.Encode(p.Content) %&gt;&lt;/description&gt;\r\n    &lt;/item&gt;\r\n&lt;% } %&gt;\r\n&lt;/channel&gt;\r\n&lt;/rss&gt;\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nAfter this you can add a route if you want to customize your feed URL to be something like yoursite.com/feed/rss/:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>routes.MapRoute(\r\n    \"PostFeed\",\r\n    \"Feed/{type}\",\r\n    new { controller = \"Blog\", action = \"PostFeed\", type = \"rss\" }\r\n);\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThat's it! Most bloggers seem to use <a href=\"http://www.feedburner.com/\" title=\"Go to feedburner.com\">feedburner</a> to manage their RSS feeds, so I did that as well and it was very straightforward. They provide a bunch of HTML snippets to advertise your feed.\r\n</p>\r\n\r\n<p>\r\nBTW, writing this post is making me realize how bad I need to integrate some kind of editor for creating blog posts, rather than typing into a textarea and manually encoding the xml code above. I also need to pick a syntax highlighter and plug it in for easier reading. Nobody is reading yet though, so it's ok ;).\r\n</p>", 
      "tags": "rss aspnetmvc ", 
      "title": "Creating an RSS Feed in ASP.NET MVC", 
      "object_id": 4, 
      "created_on": "2009-11-30 23:31:22", 
      "content_type": 15, 
      "updated_on": "2009-11-30 23:36:59", 
      "pub_date": "2008-08-17 00:00:00"
    }
  }, 
  {
    "pk": 5, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nOnce I implemented blog posts and comments, I needed something to fill up all the empty space on the right.\r\nSo, I decided to list out my recent <a href=\"http://delicious.com/rlrosario\" title=\"Check out all my delicious bookmarks\">delicious bookmarks</a>. I had been wanting to play around with LINQ to XML, and this was a perfect use for it.\r\n</p>\r\n\r\n<p>\r\nI first created a DeliciousLink <a href=\"http://www.ayende.com/Blog/archive/2007/03/20/Plain-old-.Net-classes.aspx\" title=\"Ayende's post on POCO classes\">POCO class</a> with the three properties I was interested in: Title, Url, and Description. This is all I need to create the bookmark list.\r\n</p>\r\n\r\n<p>\r\nI then added a new method to one of my Service classes. This method loads my delicious rss feed and then loops through the items creating a list of DeliciousLink's:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>public IEnumerable&lt;DeliciousLink&gt; GetDeliciousLatest(int quantity) {\r\n\r\n    XDocument rssFeed = XDocument.Load(\"http://feeds.delicious.com/v2/rss/rlrosario\");\r\n\r\n    return from item in rssFeed.Descendants(\"item\")\r\n            select new DeliciousLink\r\n            {\r\n                Title = item.Element(\"title\").Value,\r\n                Url = item.Element(\"link\").Value,\r\n                Description = (item.Element(\"description\") != null) ? item.Element(\"description\").Value : \"\"\r\n            };\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThen I created a controller Action that retrieves and caches the links using the service. This action can then be called by any View using the Html.RenderAction method.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>public ActionResult GetDeliciousLatest(int quantity) {\r\n    IEnumerable&lt;DeliciousLink&gt; posts = HttpContext.Cache[\"DELICIOUS&#95;LINKS\"] as IEnumerable&lt;DeliciousLink&gt;;\r\n    if (posts == null) {\r\n        try {\r\n            posts = _miscService.GetDeliciousLatest(quantity);\r\n            HttpContext.Cache.Insert(\"DELICIOUS&#95;LINKS\", posts, null, DateTime.Now.AddMinutes(15), System.Web.Caching.Cache.NoSlidingExpiration);\r\n\r\n        } catch { }\r\n    }\r\n\r\n    return View(\"&#95;Delicious\", posts.Take(quantity));\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThe last piece was to create _Delicious.aspx, which is a Partial View.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;&#95;Delicious.aspx.cs&quot; Inherits=&quot;rr.web.Views.Misc.&#95;Delicious&quot; %&gt;\r\n&lt;ul&gt;\r\n&lt;% foreach (rr.data.misc.DeliciousLink link in ViewData.Model) { %&gt;\r\n  &lt;li&gt;\r\n  &lt;a href=&quot;&lt;%= Html.AttributeEncode(link.Url) %&gt;&quot; title=&quot;&lt;%= Html.AttributeEncode(link.Description) %&gt;&quot;&gt;\r\n  &lt;%= Html.Encode(link.Title) %&gt;\r\n  &lt;/a&gt;\r\n  &lt;/li&gt;\r\n&lt;% } %&gt;\r\n&lt;/ul&gt;\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nThis ended up being a lot easier than I thought it would be. No tedious XML parsing was necessary :).\r\n</p>\r\n\r\n<p>\r\nThis is already my fifth post so I am going to have to implement paging soon!\r\n</p>", 
      "tags": "snippet rss linq2xml delicious aspnetmvc ", 
      "title": "Consuming a (delicious) RSS Feed Using LINQ to XML", 
      "object_id": 5, 
      "created_on": "2009-11-30 23:35:07", 
      "content_type": 15, 
      "updated_on": "2009-11-30 23:35:07", 
      "pub_date": "2008-08-18 00:00:00"
    }
  }, 
  {
    "pk": 6, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nToday I had to do a quick and dirty sort-by-value of the &lt;option /&gt;'s in a &lt;select /&gt;. I am not proud of having to do this since it should be done on the server-side, but that's a different story.\r\n</p>\r\n\r\n<p>\r\nThere are probably a dozen ways to skin this cat, but this is how I did it (I was already using jQuery on this site):\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>// get the select\r\nvar $dd = $('#select-id');\r\nif ($dd.length &gt; 0) { // make sure we found the select we were looking for\r\n\r\n    // save the selected value\r\n    var selectedVal = $dd.val();\r\n\r\n    // get the options and loop through them\r\n    var $options = $('option', $dd);\r\n    var arrVals = [];\r\n    $options.each(function(){\r\n        // push each option value and text into an array\r\n        arrVals.push({\r\n            val: $(this).val(),\r\n            text: $(this).text()\r\n        });\r\n    });\r\n\r\n    // sort the array by the value (change val to text to sort by text instead)\r\n    arrVals.sort(function(a, b){\r\n        return a.val - b.val;\r\n    });\r\n\r\n    // loop through the sorted array and set the text/values to the options\r\n    for (var i = 0, l = arrVals.length; i &lt; l; i++) {\r\n        $($options[i]).val(arrVals[i].val).text(arrVals[i].text);\r\n    }\r\n\r\n    // set the selected value back\r\n    $dd.val(selectedVal);\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>\r\n<strong>Update (8/20/2009)</strong>: The above code will only work if the option values are numbers. If the values are alphanumeric and we are doing an alphabetical sort, then the sort function should be replaced with:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>arrVals.sort(function(a, b){\r\n    if(a.val&gt;b.val){\r\n        return 1;\r\n    }\r\n    else if (a.val==b.val){\r\n        return 0;\r\n    }\r\n    else {\r\n        return -1;\r\n    }\r\n});\r\n\r\n</code></pre>", 
      "tags": "jquery javascript html snippet ", 
      "title": "Sorting (dropdown) Select Options Using jQuery", 
      "object_id": 6, 
      "created_on": "2009-11-30 23:38:30", 
      "content_type": 15, 
      "updated_on": "2009-11-30 23:38:30", 
      "pub_date": "2008-08-19 00:00:00"
    }
  }, 
  {
    "pk": 7, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nThe HTML &lt;button/&gt; element is a rarely used but \r\nvery &quot;styleable&quot; substitute to the &lt;input type=\"submit\"/&gt;,\r\nthe standard button for submitting a form.\r\n</p>\r\n\r\n<blockquote>\r\n<a href=\"\" title=\"Go to W3C Recommendation on Forms\">\r\n17.5 The BUTTON Element (W3C Recommendation - Forms)\r\n</a>\r\n<br />\r\nButtons created with the BUTTON element function just like\r\nbuttons created with the INPUT element, but they offer\r\nricher rendering possibilities: the BUTTON element may have\r\ncontent. For example, a BUTTON element that contains an\r\nimage functions like and may resemble an INPUT element\r\nwhose type is set to &quot;image&quot;, but the BUTTON\r\nelement type allows content.\r\n</blockquote>\r\n\r\n<p>\r\nAllowing child html elements (div's, span's, img's)\r\ncreates a lot more possiblities for styling using CSS.\r\nFor example, the <a href=\"http://www.alistapart.com/articles/slidingdoors/\" title=\"A List Apart article on the Sliding Doors of CSS\">Sliding Doors</a> \r\nof CSS technique to create round buttons that\r\nwere only possible before by using the \r\n&lt;input type=\"image\" /&gt; element or using links that\r\ntriggered the form submission via JavaScript.\r\n</p>\r\n\r\n<h3>The HTML:</h3>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;button type=&quot;submit&quot; title=&quot;Search&quot;&gt;\r\n    &lt;div class=&quot;o&quot;&gt;&lt;div class=&quot;i&quot;&gt;\r\n        Search\r\n    &lt;/div&gt;&lt;/div&gt;\r\n&lt;/button&gt;\r\n&lt;button type=&quot;submit&quot; title=&quot;Click Here&quot;&gt;\r\n    &lt;div class=&quot;o&quot;&gt;&lt;div class=&quot;i&quot;&gt;\r\n        Click Here\r\n    &lt;/div&gt;&lt;/div&gt;\r\n&lt;/button&gt;\r\n&lt;button type=&quot;submit&quot; title=&quot;Go&quot;&gt;\r\n    &lt;div class=&quot;o&quot;&gt;&lt;div class=&quot;i&quot;&gt;\r\n        Go\r\n    &lt;/div&gt;&lt;/div&gt;\r\n&lt;/button&gt;\r\n\r\n</code></pre>\r\n\r\n<h3>The CSS:</h3>\r\n\r\n<pre class=\"prettyprint\"><code>button{\r\n    background:none;\r\n    border:none;\r\n    color:#ffffff;\r\n    font-weight:bold;\r\n    text-align:left;\r\n}\r\nbutton div.o{\r\n    padding-left:20px;\r\n    background:transparent url(button.gif) no-repeat left top;\r\n}\r\nbutton div.i{\r\n    padding-right:20px;\r\n    background:transparent url(button.gif) no-repeat right -36px;\r\n    height:36px;\r\n    line-height:36px;\r\n    white-space:nowrap;\r\n}\r\n\r\n</code></pre>\r\n\r\n<h3>The Result:</h3>\r\n<inline type=\"media.photo\" id=\"1\" class=\"\" />\r\n\r\n<p>\r\nAs you can see above, the BUTTON is inline\r\nbut it contains block elements within it, which is way cool. This doesn't\r\nwork in any other case I know of. Try putting a div inside\r\nof a span... First of all, it is not valid markup. And second,\r\nthe rendered result will vary by browser and will not be what\r\nyou would expect.\r\n</p>\r\n\r\n<h3>BEWARE IE6!</h3>\r\n\r\n<p>\r\nThe BUTTON element works in IE6, BUT as usual there are some\r\nbugs. If there are multiple BUTTON element in a form, the\r\nform gets submitted with the name/value's of all of them \r\ninstead of just the one clicked. This issue got me good in a\r\nproject but I was able to work around it with some JavaScript (using jQuery):\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>if ($.browser.msie &amp;&amp; $.browser.version == '6.0') {\r\n    $('button').click(function(){\r\n        // disable all the buttons on the page\r\n        $('button').attr('disabled', 'disabled');\r\n\r\n        // reenable the button just clicked\r\n        $(this).removeAttr('disabled');\r\n    });\r\n}\r\n\r\n</code></pre>\r\n\r\n<p>\r\nIf you need to support IE6 without JavaScript enabled AND\r\nwill have a form with multiple buttons, then the BUTTON\r\nelement is probably not for you. Otherwise, there is no reason not\r\nto use it.\r\n</p>\r\n", 
      "tags": "html button css ", 
      "title": "Using the HTML <button /> element in place of <input type=\"submit\" />", 
      "object_id": 7, 
      "created_on": "2009-11-30 23:42:16", 
      "content_type": 15, 
      "updated_on": "2009-11-30 23:55:14", 
      "pub_date": "2008-08-24 00:00:00"
    }
  }, 
  {
    "pk": 8, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>Today once again, I had to write some JavaScript to fix some backend bugs... I love how some backend devs feel everything can and should be fixed in JavaScript :-/</p>\r\n\r\n<p>Basically, I had to create, read and update cookies based on the products the user is browsing. So I created this little utility to do the job:</p>\r\n\r\n<pre class=\"prettyprint\"><code>var CookieUtil = {\r\n  createCookie:function(name,value,days) {\r\n    if (days) {\r\n        var date = new Date();\r\n        date.setTime(date.getTime()+(days*24*60*60*1000));\r\n        var expires = \"; expires=\"+date.toGMTString();\r\n    }\r\n    else var expires = \"\";\r\n    document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n  },\r\n  readCookie:function(name) {\r\n    var nameEQ = name + \"=\";\r\n    var ca = document.cookie.split(';');\r\n    for(var i=0;i &lt; ca.length;i++) {\r\n        var c = ca[i];\r\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\r\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n    }\r\n    return null;\r\n  },\r\n  eraseCookie:function(name) {\r\n    CookieUtil.createCookie(name,\"\",-1);\r\n  }\r\n};\r\n</code></pre>", 
      "tags": "javascript snippet cookies ", 
      "title": "JavaScript Cookie Utility", 
      "object_id": 8, 
      "created_on": "2009-12-01 00:02:33", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:02:33", 
      "pub_date": "2008-08-27 00:00:00"
    }
  }, 
  {
    "pk": 9, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nThe HTML NOSCRIPT element is very simple and straightforward:\r\n</p>\r\n\r\n<blockquote>\r\n<a href=\"http://www.w3.org/TR/html401/interact/scripts.html#edef-NOSCRIPT\" title=\"Go to W3C definition of NOSCRIPT element\">18.3.1 The NOSCRIPT element</a>\r\n<p>\r\nThe NOSCRIPT element allows authors to provide alternate content when a script is not executed.\r\nThe content of a NOSCRIPT element should only be rendered by a script-aware user agent in the following cases:\r\n</p>\r\n<ul>\r\n    <li>The user agent is configured not to evaluate scripts.</li>\r\n    <li>The user agent doesn't support a scripting language invoked by a SCRIPT element earlier in the document.</li>\r\n</ul>\r\n<p>User agents that do not support client-side scripts must render this element's contents.</p>\r\n</blockquote>\r\n\r\n<p>\r\nThere is no HTML element that will do the opposite of this. The SCRIPT element will <strong>execute</strong>\r\nits contents, not <strong>render</strong> it. Of course, we could use document.write() to insert content in the\r\npage only when JavaScript is enabled:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;script type=&quot;text/javascript&quot;&gt;\r\n//&lt;![CDATA[\r\n    document.write(&quot;&lt;p&gt;Hello World! JavaScript is enabled.&lt;/p&gt;&quot;);\r\n//]]&gt;\r\n&lt;/script&gt;\r\n&lt;noscript&gt;\r\n    &lt;p&gt;Hello World! JavaScript is disabled.&lt;/p&gt;\r\n&lt;/noscript&gt;\r\n\r\n</code></pre>\r\n\r\n<p>\r\nThat will work just fine in some cases, but it isn't valid XHTML and it \r\n<a href=\"http://ln.hixie.ch/?start=1091626816&amp;count=1\" title=\" Why document.write() doesn't work in XML\">breaks</a>\r\nwhen serving the page with the XHTML/XML MIME type. Plus, it is just nasty and ugly looking... :)\r\n</p>\r\n\r\n<blockquote>\r\n<a href=\"http://www.w3.org/MarkUp/2004/xhtml-faq#docwrite\" title=\"W3C HTML and XHTML Frequently Answered Questions\">Does document.write work in XHTML?</a>\r\n<p>No. Because of the way XML is defined, it is not possible to do tricks like this, where markup is generated by scripting while the parser is still parsing the markup.</p>\r\n<p>You can still achieve the same effects, but you have to do it by using the DOM to add and delete elements.</p>\r\n</blockquote>\r\n\r\n<p>\r\nAs stated above, there are DOM method\r\n<a href=\"http://www.sitepoint.com/blogs/2007/07/11/insert-in-place-without-documentwrite/\" title=\"Insert in place without document.write\">alternatives</a>\r\nthat can be used to implement this functionality. But again, this creates a mix of\r\nHTML and JavaScript that is unmaintainable (especially if the content is data driven and/or being managed by business users).\r\n</p>\r\n\r\n<p>\r\nA cleaner way would be to include the content in the page as you normally would, have it hidden by CSS and then show it via JavaScript.\r\nIf there is no JavaScript, then it will not be rendered.\r\n</p>\r\n\r\n<p><strong>HTML:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;p class=&quot;YesScript&quot;&gt;\r\n    Hello World! JavaScript is enabled.\r\n&lt;/p&gt;\r\n</code></pre>\r\n\r\n<p><strong>CSS:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>.YesScript { display:none; }\r\n</code></pre>\r\n\r\n<p><strong>JavaScript (jQuery syntax):</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>$(document).ready(function(){\r\n    $('.YesScript').show();\r\n});\r\n</code></pre>\r\n\r\n<p>\r\nThis does the trick, but in some cases (especially IE) the page will render before the JavaScript, causing the page to \"flicker\" when the content all of a sudden appears.\r\nThis is very undesireable, as it can cause epileptic seizures... Uhm, on a more serious note, it is just very annoying to the eye. So, what\r\nif we could apply CSS rules based on the availability of JavaScript? Here is how to do it with one line of JavaScript in the HEAD of the HTML document:\r\n</p>\r\n\r\n<p><strong>HTML:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;title&gt;...&lt;/title&gt;\r\n        &lt;script type=\"text/javascript\"&gt;\r\n        //&lt;![CDATA[\r\n            document.getElementsByTagName('html')[0].className='jsOn';\r\n        //]]&gt;\r\n        &lt;/script&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;p class=&quot;YesScript&quot;&gt;\r\n            Hello World! JavaScript is enabled.\r\n        &lt;/p&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\r\n\r\n<p><strong>CSS:</strong></p>\r\n\r\n<pre class=\"prettyprint\"><code>.YesScript { display:none; }\r\n.jsOn .YesScript { display:block; }\r\n</code></pre>\r\n\r\n<p>\r\nThis is the best solution I have found. You add a class to the HTML element via JavaScript in the HEAD of the document and then \r\nuse that to target your CSS rules and styling. This can also be used to hide elements that you need to have in the DOM but don't\r\nwant them to initially render (elements declared in the NOSCRIPT tag will not be available in the DOM if JavaScript is enabled).\r\nA use case for this would be for Tab content (you want all the panels hidden except the active one).\r\n</p>\r\n\r\n<p>\r\nCheers!\r\n</p>", 
      "tags": "javascript html css noscript ", 
      "title": "The Opposite of the NOSCRIPT Element (YesScript? / ScriptOnly?)", 
      "object_id": 9, 
      "created_on": "2009-12-01 00:05:08", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:05:08", 
      "pub_date": "2008-08-28 00:00:00"
    }
  }, 
  {
    "pk": 10, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>I just upgraded the site to the latest (pre)release of the <a href=\"http://www.codeplex.com/aspnet\">ASP.NET MVC Framework</a>. It was quick and painless and seems to be working great. All I had to do was swap out the assemblies and change some of the assembly versions in the Web.config from 0.0.0.0 to 3.5.0.0.</p>\r\n\r\n<p>I love when upgrades are this painless. Now I'll go check out what they added. I will start with Haack's post: <a href=\"http://haacked.com/archive/2008/08/29/how-a-method-becomes-an-action.aspx\">How a Method Becomes An Action</a>. I am also expecting the mandatory <a href=\"http://weblogs.asp.net/scottgu/\" title=\"Scott Guthrie's Blog\">ScottGu</a> 12 page post on the release :).</p>", 
      "tags": "aspnetmvc ", 
      "title": "Upgraded to ASP.NET MVC Preview 5", 
      "object_id": 10, 
      "created_on": "2009-12-01 00:07:19", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:07:19", 
      "pub_date": "2008-08-29 00:00:00"
    }
  }, 
  {
    "pk": 11, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nLike every other web developer/professional and their grandma, I downloaded and installed the shiny new <a href=\"http://www.google.com/chrome\" title=\"Download Google Chrome browser\">Google Chrome</a> browser as soon as I found out \r\nit was available. The install was very fast and painless, \r\nI even missed the option where you can tell it not to \r\nimport settings from your default browser (argh)...\r\n</p>\r\n\r\n<p>\r\nSurfing the web with Chrome is a treat. The internet(s) \r\nfeel so much faster and the browser itself, being so \r\nsimple and minimal, stays out of the way. My feeling is \r\nthat this browser is game changing. If there was any \r\nremaining doubt about JavaScript, this squashes it and \r\ntakes the language to the next level for developing full \r\nblown enterpise applications.\r\n</p>\r\n\r\n<p>\r\nMy first test was to try my \r\nfavorite IM application - <a href=\"http://meebo.com\" \r\ntitle=\"Check out Meebo\">meebo</a>, which I know is a \r\nresource hog. FF3 is consuming 100K+ of \r\nRAM to run meebo while Chrome is consuming 28K for \r\nmeebo, 24K for the Browser and 6.5K for Flash (I guess \r\nmeebo is using Flash), for a total of less than 60K. That \r\nis a very significant improvement.\r\n</p>\r\n\r\n<p>\r\nNot only is this browser nicer to my RAM, <a href=\"http://news.cnet.com/8301-1001&#95;3-10030888-92.html\" title=\"Speed test: Google Chrome beats Firefox, IE, Safari\">it is very speedy</a> (orders of magnitude better than the other browsers out there).\r\n</p>\r\n\r\n<p>\r\n<strong>Will this new browser be able to gain a significant market share of the browser market?</strong> If anything, this browser will push the other browsers vendors to improve their products. But I believe Chrome will be here to stay. In less than a day, <a href=\"http://getclicky.com/chrome\" title=\"Google Chrome market share\">it has almost 3% market share</a> according to <a href=\"http://getclicky.com/\" title=\"Get Clicky web analytics\">GetClicky</a>.\r\n</p>\r\n\r\n<p>\r\nEverybody's guess is that Chrome will eat into Firefox's market share. This might be true at first, since the technical community will be the early adopters. But if there is anybody that can get IE6 users to try out a new browser, it is Google. And I hope they succeed at doing so!\r\n</p>\r\n\r\n<p>\r\n<strong>Will I be using Chrome?</strong> No doubt I will. At a minimum to run meebo so that I can save some resources on my laptop. <strong>Will it completely replace my Firefox usage?</strong> No way! At least not right now. It is still missing the Addon architecture. I can't live without Firebug, the Delicious toolbar, the web dev toolbar, http live headers, add n edit cookies, etc. I am sure it will get there, but for now I will split time between the browsers.\r\n</p>\r\n\r\n<p><strong>Update (9/3/08):</strong> John Resig got busy and did some <a href=\"http://ejohn.org/blog/javascript-performance-rundown/\" title=\"JavaScript Performance Rundown\">performance testing</a>.</p>", 
      "tags": "google chrome browser firefox ", 
      "title": "Firefox is dead... VIVA LA FIREFOX!", 
      "object_id": 11, 
      "created_on": "2009-12-01 00:09:21", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:12:11", 
      "pub_date": "2008-09-03 00:00:00"
    }
  }, 
  {
    "pk": 12, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>I thought it would be cool to have my Twitter status show up on the site so I looked up the <a href=\"http://apiwiki.twitter.com/\">Twitter API documentation</a> and got to work. It is very simple and easy to use, especially if you are just retrieving public tweets. It allows you to retrieve the timeline(s) in different formats such as JSON, XML, RSS, etc. Since I will be making the call from the server side in ASP.NET, I chose the XML format and used LINQ to XML to get the status:</p>\r\n\r\n<pre class=\"prettyprint\"><code>public string GetTwitterStatus() {\r\n\r\n        XDocument feed = XDocument.Load(\"http://twitter.com/statuses/user&#95;timeline/r1cky.xml?count=1\");\r\n\r\n        return (from item in feed.Descendants(\"status\")\r\n            select item.Element(\"text\").Value).SingleOrDefault();\r\n    }\r\n</code></pre>\r\n\r\n<p>As you can see, the code is very similar to the code for <a href=\"http://rickyrosario.com/blog/consuming-a-delicious-rss-feed-using-linq-to-xml\" title=\"Consuming a (delicious) RSS Feed Using LINQ to XML\">retrieving my delicious RSS feed</a>. Be sure to cache the result because Twitter throttles the use of the API.</p>\r\n\r\n<p>If you are going to do more complex actions, like updating your status or looking up private/protected timelines, then you need to authenticate. At this point, the authentication is just <a href=\"http://en.wikipedia.org/wiki/Basic&#95;access&#95;authentication\" title=\"Basic access authentication (Wikipedia)\">Basic HTTP Auth</a> so its not very secure but not hard to implement either ;).</p>\r\n\r\n<p>\r\n<strong>Update (9/8/08):</strong> In case you need it, below is the code to parse the created&#95;at date from the Twitter XML format. \r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>DateTime.ParseExact(item.Element(\"created&#95;at\").Value, \"ddd MMM dd HH:mm:ss zzz yyyy\", CultureInfo.InvariantCulture);\r\n</code></pre>", 
      "tags": "snippet linq2xml twitter ", 
      "title": "Retrieving Twitter Status (\"Tweets\") Via Twitter API Using LINQ to XML", 
      "object_id": 12, 
      "created_on": "2009-12-01 00:10:40", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:10:40", 
      "pub_date": "2008-09-06 00:00:00"
    }
  }, 
  {
    "pk": 13, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>I added the Twitter updates to the site and then realized that the URL's in the tweets come as plain text and not as &lt;a /&gt; links. So I created a function to detect URLs in a given string and convert them into links. It uses a regular expression for the URL detection...</p>\r\n\r\n<pre class=\"prettyprint\"><code>private string ConvertUrlsToLinks(string msg) {\r\n        string regex = @\"((www\\.|(http|https|ftp|news|file)+\\:\\/\\/)[&amp;#95;.a-z0-9-]+\\.[a-z0-9\\/&amp;#95;:@=.+?,##%&amp;~-]*[^.|\\'|\\# |!|\\(|?|,| |&gt;|&lt;|;|\\)])\";\r\n        Regex r = new Regex(regex, RegexOptions.IgnoreCase);\r\n        return r.Replace(msg, \"&lt;a href=\\\"$1\\\" title=\\\"Click to open in a new window or tab\\\" target=\\\"&amp;#95;blank\\\"&gt;$1&lt;/a&gt;\").Replace(\"href=\\\"www\", \"href=\\\"http://www\");\r\n    }\r\n</code></pre>", 
      "tags": "snippet regex csharp ", 
      "title": "Converting a URL into a Link in C# Using Regular Expressions", 
      "object_id": 13, 
      "created_on": "2009-12-01 00:14:47", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:14:47", 
      "pub_date": "2008-09-12 00:00:00"
    }
  }, 
  {
    "pk": 14, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>I am on my third implementation of paging for blog posts, and finally am happy~ish with the implementation :). I first had an inline for loop (not very reusable), then I moved the code to a partial view (it was ok, but didn't feel quite right), and now I have finally settled on extending the HtmlHelper object.</p>\r\n\r\n<p>I started off with <a href=\"http://weblogs.asp.net/scottgu/\" title=\"The Gu's Blog\">ScottGu</a>'s PagedList&lt;T&gt; that I found on <a href=\"http://blog.wekeroad.com/2007/12/10/aspnet-mvc-pagedlistt/\" title=\"ASP.NET MVC: PagedList&lt;T&gt;\">Rob Conery's blog</a>. I made some small modifications based on my needs and preferences: <a href=\"/Content/assets/mvc-paging/PagedList.cs.txt\" title=\"download PagedList.cs\">download here</a>. I basically ended up with IPagedList and IPagedList&lt;T&gt; interfaces and the PagedList&lt;T&gt; implementation itself. I needed the IPagedList&lt;T&gt; so that I could have strongly typed objects in the View, but the pager itself doesn't need to know the type. So, it gets the plain IPagedList.</p>\r\n\r\n<p>Here is my Paging extension method:</p>\r\n\r\n<pre class=\"prettyprint\"><code>public static string Paging(this HtmlHelper html, IPagedList pagedList,\r\n     string url, string pagePlaceHolder) {\r\n\r\n     StringBuilder sb = new StringBuilder();\r\n\r\n     // only show paging if we have more items than the page size\r\n     if (pagedList.ItemCount &gt; pagedList.PageSize) {\r\n\r\n        sb.Append(\"&lt;ul class=\\\"paging\\\"&gt;\");\r\n\r\n        if (pagedList.IsPreviousPage) { // previous link\r\n           sb.Append(\"&lt;li class=\\\"prev\\\"&gt;&lt;a href=\\\"\");\r\n           sb.Append(url.Replace(pagePlaceHolder, pagedList.PageIndex.ToString()));\r\n           sb.Append(\"\\\" title=\\\"Go to Previous Page\\\"&gt;prev&lt;/a&gt;&lt;/li&gt;\");\r\n        }\r\n\r\n        for (int i = 0; i &lt; pagedList.PageCount; i++) {\r\n           sb.Append(\"&lt;li&gt;\");\r\n           if (i == pagedList.PageIndex) {\r\n              sb.Append(\"&lt;span&gt;\").Append( (i+1).ToString() ).Append(\"&lt;/span&gt;\");\r\n           } else {\r\n              sb.Append(\"&lt;a href=\\\"\");\r\n              sb.Append(url.Replace(pagePlaceHolder, (i+1).ToString()));\r\n              sb.Append(\"\\\" title=\\\"Go to Page \").Append( (i+1).ToString() );\r\n              sb.Append(\"\\\"&gt;\").Append( (i+1).ToString() ).Append(\"&lt;/a&gt;\");\r\n           }\r\n           sb.Append(\"&lt;/li&gt;\");\r\n        }\r\n\r\n        if (pagedList.IsNextPage) { // next link\r\n           sb.Append(\"&lt;li class=\\\"next\\\"&gt;&lt;a href=\\\"\");\r\n           sb.Append(url.Replace(pagePlaceHolder, (pagedList.PageIndex + 2).ToString()));\r\n           sb.Append(\"\\\" title=\\\"Go to Next Page\\\"&gt;next&lt;/a&gt;&lt;/li&gt;\");\r\n        }\r\n\r\n        sb.Append(\"&lt;/ul&gt;\");\r\n     }\r\n\r\n     return sb.ToString();\r\n  }\r\n</code></pre>\r\n\r\n<p>This is how you would invoke the method from a view:</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;%= Html.Paging(ViewData.Model, Url.Action(&quot;Index&quot;,&quot;Blog&quot;, new { page = &quot;&#95;&#95;PAGENUM&#95;&#95;&quot; }), &quot;&#95;&#95;PAGENUM&#95;&#95;&quot;) %&gt;\r\n</code></pre>\r\n\r\n<p>\r\nAs you can see, the method takes in an IPagedList, a URL with a placeholder for the page number, and the placeholder value itself. This way the pager can easily create links to the pages by simple replacing the placeholder with the page number desired.\r\n</p>\r\n\r\n<p>\r\nAfter implementing this, I googled around to see if I had reinvented the wheel. I did find that <a href=\"http://blogs.taiga.nl/martijn/archive/2008/08/27/paging-with-asp.net-mvc.aspx\" title=\"Paging with ASP.NET MVC\">Martijn Boland implemented a pager thats a bit more sophisticated</a>. But does a pager class/method really need to know how to use the RouteTable to create URLs? I would prefer that it not. In fact, my code can be used in web forms and other non asp.net mvc projects.\r\n</p>\r\n\r\n<p>\r\n<strong>Update (9/18/2008):</strong> Two more MVC paging related blog posts:\r\n</p>\r\n\r\n<ul>\r\n<li><a href=\"http://weblogs.asp.net/stephenwalther/archive/2008/09/18/asp-net-mvc-tip-44-create-a-pager-html-helper.aspx\" title=\"ASP.NET MVC Tip #44 \u2013 Create a Pager HTML Helper\">ASP.NET MVC Tip #44 \u2013 Create a Pager HTML Helper</a></li>\r\n<li><a href=\"http://www.squaredroot.com/post/2008/07/08/PagedList-Strikes-Back.aspx\" title=\"PagedList Strikes Back\">PagedList Strikes Back</a></li>\r\n</ul>", 
      "tags": "aspnetmvc ", 
      "title": "Simple HtmlHelper Extension for Paging in ASP.Net MVC", 
      "object_id": 14, 
      "created_on": "2009-12-01 00:16:32", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:16:32", 
      "pub_date": "2008-09-16 00:00:00"
    }
  }, 
  {
    "pk": 15, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>I should have been logging information and errors from day 1, but I guess its never too late to start. Based on <a href=\"http://blog.wekeroad.com/mvc-storefront/mvcstore-part-20/\" title=\"MVC Storefront Part 20: Logging\">Rob Conery's &quot;endorsement&quot;</a>, I chose to try <a href=\"http://www.nlog-project.org/\" title=\"NLog - A .NET Logging Library\">NLog</a>.</p>\r\n\r\n<p>Step 1 was obviously to <a href=\"http://www.nlog-project.org/download.html\" title=\"Downloading NLog\">download</a> the library. Then, I added the reference to NLog.dll in my web project and configured it. For configuration, NLog uses its own configuration file separate from Web.config and you don't have to do any modifications to Web.config at all. Below is my NLog.config, which is set up to log everything of level Info and above to the file specified (NLog.config goes in the root of the web app). As you can see, it is very straightforward to configure for your own needs:</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\r\n&lt;nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" &gt;\r\n  &lt;targets&gt;\r\n    &lt;target name=\"console\" xsi:type=\"ColoredConsole\"\r\n      layout=\"${date:format=HH\\:mm\\:ss}|${level}|${stacktrace}|${message}\" /&gt;\r\n    &lt;target name=\"file\" xsi:type=\"File\" fileName=\"${basedir}/Logs/rrLog.log\"\r\n      layout=\"${date}: ${message}\" /&gt;\r\n  &lt;/targets&gt;\r\n  &lt;rules&gt;\r\n    &lt;logger name=\"*\" minlevel=\"Info\" writeTo=\"file\" /&gt;\r\n  &lt;/rules&gt;\r\n&lt;/nlog&gt;\r\n</code></pre>\r\n\r\n<p>After this, all that is left is to actually put in your log statements. So for example, to log all unhandled exceptions in your ASP.Net application, put the following in Global.asax.cs:</p>\r\n\r\n<pre class=\"prettyprint\"><code>protected void Application&#95;Error() {\r\n   Exception lastException = Server.GetLastError();\r\n   NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();\r\n   logger.Fatal(lastException);\r\n}\r\n</code></pre>\r\n\r\n<p>And that's it! It can't be any easier than that, so I am pretty happy with NLog right now. I might checkout <a href=\"http://logging.apache.org/log4net/index.html\" title=\"Apache Log4Net Home Page\">Log4Net</a> sometime to make a comparison, but I don't have any reason to do so at this point. BTW, I recommend creating your own Logger service that wraps NLog so that you can easily switch to a different library if needed. I'll be doing that right now.</p>", 
      "tags": "aspnet logging ", 
      "title": "ASP.Net Logging Using NLog", 
      "object_id": 15, 
      "created_on": "2009-12-01 00:22:16", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:22:16", 
      "pub_date": "2008-09-21 00:00:00"
    }
  }, 
  {
    "pk": 16, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>Lots of buzz around the two technologies I use the most: jQuery and ASP.Net... No need to repeat what has already been said:</p>\r\n\r\n<ul>\r\n<li>\r\n<a href=\"http://jquery.com/blog/2008/09/28/jquery-microsoft-nokia/\" title=\"Go to the jQuery Blog\">jQuery, Microsoft, and Nokia</a> - jQuery blog\r\n</li>\r\n<li>\r\n<a href=\"http://weblogs.asp.net/scottgu/archive/2008/09/28/jquery-and-microsoft.aspx\" title=\"Go to ScottGu's blog\">jQuery and Microsoft</a> - ScottGu's blog\r\n</li>\r\n<li>\r\n<a href=\"http://www.hanselman.com/blog/jQueryToShipWithASPNETMVCAndVisualStudio.aspx\" title=\"Go to ScottHa's blog\">jQuery to ship with ASP.NET MVC and Visual Studio</a> - ScottHa's blog\r\n</li>\r\n<li>\r\n<a href=\"http://blog.wekeroad.com/blog/jquery-and-visual-studio-bff/\" title=\"Go to RobCon's blog\">jQuery and Visual Studio BFF</a> - RobCon's blog\r\n</li>\r\n</ul>", 
      "tags": "jquery aspnet visualstudio ", 
      "title": "ASP.Net and jQuery Get Married", 
      "object_id": 16, 
      "created_on": "2009-12-01 00:24:23", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:24:23", 
      "pub_date": "2008-09-28 00:00:00"
    }
  }, 
  {
    "pk": 17, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>Apparently, ASP.Net MVC Beta 1 was quietly released yesterday and announced at VSLive in Vegas. Today, the blog posts came out and appeared in my reader:</p>\r\n\r\n<ul>\r\n<li><a href=\"http://weblogs.asp.net/scottgu/archive/2008/10/16/asp-net-mvc-beta-released.aspx\" title=\"ScottGu's Blog\">ScottGu's mandatory monster post - ASP.NET MVC Beta Released </a></li>\r\n<li><a href=\"http://haacked.com/archive/2008/10/16/aspnetmvc-beta-release.aspx\" title=\"Phil Haack's blog\">Phil Haack's (PM for ASP.NET MVC) post - ASP.NET MVC Beta Released!</a></li>\r\n<li><a href=\"http://www.hanselman.com/blog/ASPNETMVCBetaReleasedCoolnessEnsues.aspx\" title=\"Hanselman Powers\">ScottHa's post - ASP.NET MVC Beta released - Coolness Ensues</a></li>\r\n</ul>\r\n\r\n<p>I quickly downloaded the <a href=\"http://www.microsoft.com/downloads/details.aspx?FamilyId=A24D1E00-CD35-4F66-BAA0-2362BDDE0766&amp;displaylang=en\" title=\"Microsoft ASP.NET MVC Beta\">latest bits</a>, which for some reason are now hosted on microsoft.com instead of CodePlex (not sure why??). Also, since I am using extensions from the &quot;futures&quot; assembly, I downloaded the <a href=\"http://www.codeplex.com/aspnet/Release/ProjectReleases.aspx?ReleaseId=18459\" title=\"ASP.NET MVC Beta Futures \">latest Microsoft.Web.Mvc library</a> which is still available on codeplex.</p>\r\n\r\n<p>As far as updating my code for this site, it was pretty straightforward. I added the System.Web.Mvc.Html namespace to my Web.config:</p>\r\n\r\n<pre class=\"prettyprint\"><code>&lt;namespaces&gt;\r\n  &lt;add namespace=\"System.Web.Mvc\"/&gt;\r\n  &lt;add namespace=\"System.Web.Mvc.Html\"/&gt;\r\n  &lt;add namespace=\"Microsoft.Web.Mvc\"/&gt;\r\n</code></pre>\r\n\r\n<p>The reason for this new namespace is that a lot of the HtmlHelper methods are now implemented as extensions in this namesapce.</p>\r\n\r\n<p>The final change I had to make was changing the Html.Form() helper which is now Html.BeginForm(). ScottGu has all the juicy details in his <a href=\"http://weblogs.asp.net/scottgu/archive/2008/10/16/asp-net-mvc-beta-released.aspx\" title=\"ScottGu's Blog\">post</a>.</p>", 
      "tags": "aspnetmvc ", 
      "title": "ASP.NET MVC Beta 1 Released", 
      "object_id": 17, 
      "created_on": "2009-12-01 00:25:56", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:25:56", 
      "pub_date": "2008-10-16 00:00:00"
    }
  }, 
  {
    "pk": 18, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>I went to my first <a href=\"http://microsoftpdc.com\" title=\"PDC site\">PDC</a> last week and it didn't disappoint. The food was ok, the snacks and booze were good, and the talks were great!</p>\r\n\r\n<p>By now there are probably a <a href=\"http://www.iunknown.com/2008/10/pdc-2008-wrap-up.html\" title=\"PDC 2008 Wrap-up\">bunch</a> of <a href=\"http://www.lazycoder.com/weblog/2008/10/27/where-do-you-want-to-go-today-the-cloud-azure/\" title=\"WHERE DO YOU WANT TO GO TODAY? THE CLOUD - AZURE\">blogs</a> <a href=\"http://haacked.com/archive/2008/11/01/pdc2008.aspx\" title=\"Hazy Recollections of PDC 2008\">posts</a> about what went down (cloud computing/Azure, Win 7), so I will just list some great quotes I heard in the talks at PDC08 (they were funny in context at the time, now they don't seem so funny anymore).</p>\r\n\r\n<ul>\r\n<li>\r\n<em>\"this is real world development, it isnt always pretty... it's a sausage factory\"</em> - <a href=\"http://codinghorror.com\" title=\"coding horror - programming and human factors\">Jeff Atwood</a> while explaining the current ~5% test coverage of <a href=\"http://stackoverflow.com\" title=\"Check out the sweetness that is Stack Overflow\">stackoverflow</a>.</li>\r\n<li>\r\n<em>\"MVC is manual transmission and webforms is automatic\"</em> - <a href=\"http://haacked.com/\" title=\"you've been haacked and you like it\">Phil Haack</a> explain the MVC pattern.</li>\r\n<li>\r\n<em>\"there is some goodness in the language... suprisingly\"</em> - <a href=\"http://www.crockford.com/\" title=\"Douglas Crockford's Wrrrld Wide Web\">Douglas Crockford</a> referring to javascript during the future of programming languages panel.</li>\r\n<li>\r\n<em>\"This is available today, so you don't have to wait until 2012\"</em> - <a href=\"http://tirania.org/blog/\" title=\"Miguel de Icaza's web log\">Miguel de Icaza</a> during his Mono and .Net talk.</li>\r\n<li>\r\n<em>\"writing code is fun, we don't do it for money</em> - <a href=\"http://blogs.msdn.com/lucabol/default.aspx\" title=\"Luca Bolognese's WebLog\">Luca Bolognese</a> during his F# talk.\r\n</li>\r\n</ul>\r\n\r\n<p>I had a great time at PDC08 and am ready to book my tix for next year :). Be sure to check out all the talks on <a href=\"http://channel9.msdn.com/\" title=\"Channel 9 site\">channel 9</a> for <strong>FREEEEEEEEEEE</strong>.</p>", 
      "tags": "pdc microsoft ", 
      "title": "Five Quotes from #PDC08", 
      "object_id": 18, 
      "created_on": "2009-12-01 00:27:55", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:27:55", 
      "pub_date": "2008-11-02 00:00:00"
    }
  }, 
  {
    "pk": 19, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>I finally got myself an iphone today and this is my\r\nfirst attempt at blogging from it... So hard!</p>\r\n\r\n<p>Now I need to learn me some objective c.</p>\r\n\r\n<p>Oh, and make a mobile friendly version of this site.</p>", 
      "tags": "iphone mobile ", 
      "title": "Got iphone bug", 
      "object_id": 19, 
      "created_on": "2009-12-01 00:32:01", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:32:01", 
      "pub_date": "2008-11-09 00:00:00"
    }
  }, 
  {
    "pk": 20, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nWhen it comes to updating a specific region of a page, there are many possible approaches. The most obvious and simple of them being AJAH (Asynchronous \r\n\r\nJavascript and HTML). Make a request to the server and replace a part of the page with the HTML response:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>\r\n// using jQuery for the ajax calls and CSS selectors\r\n$.get(\r\n    'ajah.html',\r\n    function(data){\r\n        $('#id-of-element-to-update').html(data);\r\n    }\r\n);\r\n</code></pre>\r\n\r\n<p>\r\nCool, but what if you want to update multiple regions of a page as a result of the one call? Then using plain AJAH doesn't really work as above. So what are \r\n\r\nyour options?\r\n</p>\r\n\r\n<ul>\r\n<li>\r\n<h3>AJAJ (Asynchronous Javascript and JSON)</h3>\r\n<p>\r\nThe server can return JSON for an object with properties that contain the HTML for each region. Like, for example:\r\n</p>\r\n<pre class=\"prettyprint\"><code>\r\n{\r\n    &quot;region-1&quot;: &quot;&lt;div&gt;some html to replace region 1 on the page&lt;\\/div&gt;&quot;,\r\n    &quot;region-2&quot;: &quot;&lt;div&gt;more html to replace region 2 on the page&lt;\\/div&gt;&quot;,\r\n}\r\n</code></pre>\r\n<p>\r\nNow all you need to do is update the regions with the property values of the response object:\r\n</p>\r\n<pre class=\"prettyprint\"><code>\r\n$.getJSON(\r\n    'ajaj.json',\r\n    function(data){\r\n        $('#region-1-id').html(data[\"region-1\"]);\r\n        $('#region-2-id').html(data[\"region-2\"]);\r\n    }\r\n);\r\n</code></pre>\r\n<p>\r\n<strong>NOTE:</strong> You have to &quot;<a href=\"/tools/html-jsonifier\" title=\"My HTML JSONifier\">JSONify you HTML</a>&quot; (javascript escape?) so that \r\n\r\nthe JSON remains valid. This means escaping the backslash and forward slash, double quotes, removing line-breaks, etc.\r\n</p>\r\n<p>\r\nThere are also quite a <a href=\"http://jtemplates.tpython.com/\" title=\"jTemplates is a template engine for JavaScript.\">few</a> <a \r\n\r\nhref=\"http://www.devhd.com/item0002.htm\" title=\"Reference: Miro, A Light-weight Javascript Template Engine\">client-side</a> <a \r\n\r\nhref=\"http://ejohn.org/blog/javascript-micro-templating/\" title=\"JavaScript Micro-Templating\">template</a> libraries out there. You can apply those to your \r\n\r\nJSON response and update the regions appropriately. What I don't like about client-side templates is that it usually means that you have two versions of the \r\n\r\nui rendering logic for those page regions, one for the server-side and one for the client-side.\r\n</p>\r\n\r\n<p>\r\nI should also mention that you can just put the ui rendering logic for updating the regions inline (using DOM manipulation or building HTML strings and using \r\n\r\ninnerHTML) with the rest of your JavaScript. But this isn't recommended because it is hard to maintain.\r\n</p>\r\n</li>\r\n<li>\r\n<h3>AJAH (Asynchronous Javascript and HTML</h3>\r\n<p>\r\nYou can also update multiple page regions by returning the HTML of each of these regions in the response, wrapped in a containing div for convenience:\r\n</p>\r\n<pre class=\"prettyprint\"><code>\r\n&lt;div class=&quot;ajah-response&quot;&gt;\r\n    &lt;div id=&quot;region-1&quot;&gt;\r\n        &lt;strong&gt;Region 1 updated via AJAH&lt;/strong&gt;\r\n    &lt;/div&gt;\r\n    &lt;div id=&quot;region-2&quot;&gt;\r\n        &lt;strong&gt;Region 2 updated via AJAH&lt;/strong&gt;\r\n    &lt;/div&gt;\r\n&lt;/div>\r\n</code></pre>\r\nThen we can update the regions with this new content from the response:\r\n<pre class=\"prettyprint\"><code>\r\n$.get(\r\n    'ajah.html',\r\n    function(data){\r\n        var $ajah = $(data);\r\n        $('#region-1-id').replaceWith($('#region-1',$ajah));\r\n        $('#region-2-id').replaceWith($('#region-2',$ajah));\r\n    }\r\n);\r\n</code></pre>\r\n</li>\r\n</ul>\r\n\r\n<h3>Recommendation?</h3>\r\n\r\n<p>\r\nAs usual, <strong>it depends</strong>...\r\n</p>\r\n\r\n<p>\r\nIn terms of client-side performance, the AJAH approach will be the fastest because there is no need to eval the JSON first. You just put the response into \r\n\r\nthe DOM and replace the appropriate nodes. It also is the simplest, especially if you are reusing the server side ui components that you used to render the \r\n\r\npage initially.\r\n</p>\r\n\r\n<p>\r\nIf there is a need to return additional state information or data that the client-side needs keep track of, then definitely an AJAJ approach is the way to \r\n\r\ngo. And in many Rich Internet Application cases where there is no need for the server-side ui code, the best approach is to do client-side templating and \r\n\r\nkeep the bulk of the html generation on the client-side.\r\n</p>\r\n\r\n<p>\r\nIsn't it funny that the universal term for XHR is AJAX and AJAX is probably the least common of AJAJ, AJAH, AJAX, etc? We all know that in practice HTML !== \r\n\r\nXML :).\r\n</p>", 
      "tags": "jquery ajax ", 
      "title": "AJAH or AJAJ for Updating Multiple Page Regions", 
      "object_id": 20, 
      "created_on": "2009-12-01 00:35:46", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:35:46", 
      "pub_date": "2008-11-30 00:00:00"
    }
  }, 
  {
    "pk": 21, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nI've spent the past week tinkering with Python and Django. I went through the <a href=\"http://docs.python.org/tutorial/\" title=\"The Python Tutorial\">Python tutorial</a> and <a href=\"http://docs.djangoproject.com/en/dev/intro/tutorial01/?from=olddocs\" title=\"Writing your first Django app\">Django tutorial</a>.\r\n</p>\r\n\r\n<p>\r\nSo far I love it, so I'll be posting more about python/django in the near future. The good thing is that <a href=\"http://www.codeplex.com/IronPython\" title=\"IronPython Home\">Python</a> (and <a href=\"http://www.ironruby.net/\" title=\"IronRuby Home\">Ruby</a>) are now part of the .Net stack as well and play well with C# (or your favorite .Net language).\r\n</p>", 
      "tags": "python django ", 
      "title": "Another .Net Dev Defects to Python?", 
      "object_id": 21, 
      "created_on": "2009-12-01 00:37:20", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:37:20", 
      "pub_date": "2008-12-05 00:00:00"
    }
  }, 
  {
    "pk": 22, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>One of the features that I have been procrastinating to implement is search. Every site needs some kind of search. For a site with basic needs (like a blog), <a href=\"http://www.google.com/coop/cse/\" title=\"Go to Google Custom Search Engine site\">Google Custom Search Engine</a> is a great option. You offload all the indexing to the company that does it best, and its free! You can even make some money by enabling adsense in your search results.</p>\r\n\r\n<p>It was super easy to do, just fill in a form and copy/paste the html into the master page.</p>\r\n\r\n<p>I did find something a little funny and annoying on the custom search engine site (control panel). I was using the Chrome browser and got a great message at the top of the site saying that the site didn't support my browser:</p>\r\n\r\n<blockquote>\r\nThe control panel does not fully support this Web browser. We recommend\r\nat least Firefox 2 or Internet Explorer 6.\r\n</blockquote>\r\n\r\n<p></p>\r\n\r\n<inline type=\"media.photo\" id=\"2\" class=\"\" />\r\n\r\n<p>REALLY GOOGLE, WTF?</p>", 
      "tags": "google chrome search ", 
      "title": "Google Custom Search Engine for Your Site/Blog", 
      "object_id": 22, 
      "created_on": "2009-12-01 00:42:10", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:42:10", 
      "pub_date": "2008-12-14 00:00:00"
    }
  }, 
  {
    "pk": 23, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\n    I really can't think of anything to complain about this year that is about to end. What happened in 2008?\r\n</p>\r\n<ul>\r\n    <li>\r\n        <p>\r\n            My daughter had her first birthday and my wife and I completed our <a href=\"http://www.flickr.com/photos/boricua/sets/72157594444846251/\" title=\"natalia 365 flickr set\">Project 365</a>, where we took a picture of <a href=\"http://natalia365.com\" title=\"Natalia's Photo Blog\">our daughter</a>\r\n            every day in her first year of life. My daughter went on to grow from a baby to a toddler to a beautiful young girl.\r\n        </p>\r\n<p>\r\nhttp://www.flickr.com/photos/boricua/3102592560/\r\n</p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I bought a house and have been really enjoying it, and the pool that came along with it ;).\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I got promoted at <a href=\"http://razorfish.com\" title=\"razorfish\">work</a>\r\n            to <em>Presentation Layer Architect</em>.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            A <a href=\"http://belk.com\" title=\"Belk\">web site</a>\r\n            I worked on for 8-10 months (who's counting?) had a pretty successful launch.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I <a href=\"http://rickyrosario.com/blog/hello-world\" title=\"Hello World\">started</a>\r\n            <a href=\"http://rickyrosario.com\">this blog</a>\r\n            and posted 23 times including this last post\r\n            of the year.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I gave <a href=\"http://twitter.com/r1cky\">Twitter</a>\r\n            a try and got addicted. I am still loving it! As of right now I am following 66, have 47 followers and I updated 933 times.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I went to <a href=\"http://rickyrosario.com/blog/five-quotes-from-pdc08\" title=\"Five Quotes from #PDC08\">Microsoft PDC</a>\r\n            and it was awesome.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I got an <a href=\"http://rickyrosario.com/blog/got-iphone-bug\" title=\"http://rickyrosario.com/blog/got-iphone-bug\">iPhone</a>\r\n            and love it. Best app? <a href=\"http://ifartmobile.com\">iFart mobile</a>\r\n            ;)\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I picked up the basics of <a href=\"http://rickyrosario.com/blog/another-dotnet-dev-defects-to-python\" title=\"Another .Net Dev Defects to Python?\">python and django</a>\r\n            and am looking forward to doing some harm with them in 2009.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I feel that I am much better at web development, javascript, and software development in general by paying more attention to <a href=\"http://en.wikipedia.org/wiki/Design&#95;Patterns\">design patterns</a>, <a href=\"http://en.wikipedia.org/wiki/Object-oriented&#95;design\" title=\"Object Oriented Design\">OOD</a>\r\n            and <a href=\"http://en.wikipedia.org/wiki/Single&#95;responsibility&#95;principle\" title=\"Single responsibility principle\">S</a>.<a href=\"http://en.wikipedia.org/wiki/Open/closed&#95;principle\" title=\"Open/closed principle\">O</a>.<a href=\"http://en.wikipedia.org/wiki/Liskov&#95;substitution&#95;principle\" title=\"Liskov substitution principle\">L</a>.<a href=\"http://en.wikipedia.org/wiki/Interface&#95;segregation&#95;principle\" title=\"Interface segregation principle\">I</a>.<a href=\"http://en.wikipedia.org/wiki/Dependency&#95;inversion&#95;principle\" title=\"Dependency inversion principle\">D</a>. principles.\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            I dropped over 20 pounds from my all-time high weight last winter.\r\n            </p>\r\n        </li>\r\n        <li>\r\n            <p>\r\n                I went from barely being able to run 1 mile without stopping to recently completing 8 miles averaging 11 minutes/mile. Huge thanks to my <a href=\"http://nikeplus.com\">Nike+</a>\r\n                for keeping me motivated. I started using it in mid August and logged ~210 miles.\r\n            </p>\r\n        </li>\r\n    </ul>\r\n    <p style=\"font-size:116%;font-weight:bold;\">\r\n        Here is to a great 2009! KTHXBAI\r\n    </p>", 
      "tags": "2008 review ", 
      "title": "2008: Thanks and Goodbye!", 
      "object_id": 23, 
      "created_on": "2009-12-01 00:45:54", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:52:56", 
      "pub_date": "2008-12-31 00:00:00"
    }
  }, 
  {
    "pk": 24, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nOne of the common practices of &quot;web 2.0 sites&quot; (a kitten just died) is to have hidden user interface elements\r\nsuddenly show up on hover. This is horrible for many reasons:\r\n</p>\r\n\r\n<ul>\r\n<li>\r\n    It makes functionality harder to discover.\r\n</li>\r\n<li>\r\n    It is very annoying to have things showing up when casually moving the mouse pointer\r\n    over a web page.\r\n</li>\r\n<li>\r\n    There is no hover on touchscreen devices. This is becoming more and more important\r\n    with the popularity of the iPhone and other touchscreen phones. Also, with Windows 7\r\n    natively supporting multi-touch, we are likely to see much more touch devices for the\r\n    home in the near future.\r\n</li>\r\n<li>\r\n    It isn't accessible. If you can't access the functionality with your keyboard, it just\r\n    isn't going to be accessible to those using screenreaders.\r\n</li>\r\n</ul>\r\n\r\n<p>\r\n    A <del class=\"strike\">good</del> bad example of this is the <a href=\"http://twitter.com\">twitter web interface</a>.\r\n    When you hover over individual tweets in your feed, notice how the favorite and reply\r\n    icons show up on hover.\r\n</p>\r\n<inline type=\"media.photo\" id=\"4\" class=\"\" />\r\n<p>\r\n    Pretty cool right? Now turn on a screenreader, turn off your monitor, unplug your mouse,\r\n    and try replying or fav'ing a tweet. It's impossible. Was it really necessary to hide\r\n    those icons in the first place?\r\n</p>\r\n\r\n<p>\r\n&lt;/endofrant&gt;\r\n</p>\r\n\r\n<p>\r\nSave the <a href=\"http://icanhascheezburger.com/\">kittens</a>, save the World!\r\n</p>\r\n", 
      "tags": "hover rant ux ", 
      "title": "(DHTML) Hover Magic Sucks", 
      "object_id": 24, 
      "created_on": "2009-12-01 00:57:14", 
      "content_type": 15, 
      "updated_on": "2009-12-01 00:57:14", 
      "pub_date": "2009-01-19 00:00:00"
    }
  }, 
  {
    "pk": 25, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nI found this little known <a href=\"http://mike.verdone.ca/twitter/\">Twitter API library for Python</a> (<a href=\"http://github.com/sixohsix/twitter/tree/master\">on github</a>). It is minimalist and very simple which I love. It's so easy to interact with the Twitter API from your Python application, that I am almost embarrassed to blog about it.\r\n</p>\r\n\r\n<p>\r\nAfter <a href=\"http://github.com/sixohsix/twitter/tree/master\">downloading the library</a> and putting the twitter/ directory on your Python path, this is all code you have to write to update your Twitter status:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>from twitter.api import Twitter\r\n\r\ntwitter = Twitter('username','password')\r\ntwitter.statuses.update(status='I am tweeting from Python!')\r\n</code></pre>\r\n\r\n<p>\r\n<strong>Happy tweeting from Python!</strong>\r\n</p>", 
      "tags": "snippet twitter python ", 
      "title": "Posting to Twitter from Python", 
      "object_id": 25, 
      "created_on": "2009-12-01 00:59:20", 
      "content_type": 15, 
      "updated_on": "2009-12-01 15:26:32", 
      "pub_date": "2009-01-29 00:00:00"
    }
  }, 
  {
    "pk": 26, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nI finally got fed up with the amount of spam that is coming in through the comments form so decided to look into spam detection. It seems that <a href=\"http://akismet.com/\">Akismet</a> is pretty much the standard for this. There is a <a href=\"http://www.codeplex.com/AkismetApi\" title=\"Akismet .Net 2.0 API\">.Net library</a> that wraps around the Akismet API and I am pretty happy with how easy it was to get it hooked up.\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>Akismet api = new Akismet(&quot;AKISMET&#95;API&#95;KEY&quot;, &quot;http://rickyrosario.com&quot;, &quot;Ricky's Custom Blog/v1 | Akismet.Net 1.0.1&quot;);\r\nAkismetComment c = new AkismetComment();\r\nc.Blog = &quot;http://rickyrosario.com&quot;;\r\nc.UserIp = comment.AuthorIP;\r\nc.UserAgent = comment.AuthorUserAgentString;\r\nc.CommentContent = comment.Content;\r\nc.CommentType = &quot;comment&quot;;\r\nc.CommentAuthor = comment.Author;\r\nc.CommentAuthorEmail = comment.AuthorEmail;\r\nc.CommentAuthorUrl = comment.AuthorUrl;\r\n\r\nisSpam = api.CommentCheck(c);\r\n\r\nif (!isSpam) {\r\n   comment.IsRejected = false;\r\n} else {\r\n   comment.IsRejected = true;\r\n}\r\n</code></pre>", 
      "tags": "csharp aspnet akismet spam ", 
      "title": "Akismet Spam Detection in .Net", 
      "object_id": 26, 
      "created_on": "2009-12-01 01:01:55", 
      "content_type": 15, 
      "updated_on": "2009-12-01 18:20:38", 
      "pub_date": "2009-02-07 00:00:00"
    }
  }, 
  {
    "pk": 27, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nI found a <a href=\"http://www.hostip.info/\" title=\"My IP Address Lookup and GeoTargeting Community Geotarget IP Project \">free GeoIP lookup service</a>, that happens to have a simple API for getting the result in XML: <a href=\"http://api.hostip.info/?ip=65.34.176.69\">http://api.hostip.info/?ip=65.34.176.69</a>. The returned XML looks like this:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>\r\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; ?&gt;\r\n&lt;HostipLookupResultSet version=&quot;1.0.0&quot; xmlns=&quot;http://www.hostip.info/api&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.hostip.info/api/hostip-1.0.0.xsd&quot;&gt;\r\n &lt;gml:description&lt;This is the Hostip Lookup Service&lt;/gml:description&gt;\r\n &lt;gml:name&gt;hostip&lt;/gml:name&gt;\r\n &lt;gml:boundedBy&gt;\r\n  &lt;gml:Null&gt;inapplicable&lt;/gml:Null&gt;\r\n &lt;/gml:boundedBy&gt;\r\n &lt;gml:featureMember&gt;\r\n\r\n  &lt;Hostip&gt;\r\n   &lt;gml:name&gt;Miami, FL&lt;/gml:name&gt;\r\n   &lt;countryName&gt;UNITED STATES&lt;/countryName&gt;\r\n   &lt;countryAbbrev&gt;US&lt;/countryAbbrev&gt;\r\n   &lt;!-- Co-ordinates are available as lng,lat --&gt;\r\n   &lt;ipLocation&gt;\r\n    &lt;gml:PointProperty&gt;\r\n\r\n     &lt;gml:Point srsName=&quot;http://www.opengis.net/gml/srs/epsg.xml#4326&quot;&gt;\r\n      &lt;gml:coordinates&gt;-80.2108,25.7757&lt;/gml:coordinates&gt;\r\n     &lt;/gml:Point&gt;\r\n    &lt;/gml:PointProperty&gt;\r\n   &lt;/ipLocation&gt;\r\n  &lt;/Hostip&gt;\r\n &lt;/gml:featureMember&gt;\r\n&lt;/HostipLookupResultSet&gt;\r\n</code></pre>\r\n\r\n<p>\r\nI had never done anything with XML in python so I figured I would write a function to wrap the API call. A few google searches led me to <a href=\"http://docs.python.org/library/xml.dom.minidom.html\" title=\"xml.dom.minidom\">minidom</a> and the rest was cake. The function takes in an IP address (string) and returns a dictionary with the geo information. I am a python noob and this code feels a little sketchy to me, so any feedback is more than welcome!\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>\r\nimport urllib\r\nfrom xml.dom import minidom\r\n\r\nGEO&#95;IP&#95;LOOKUP&#95;URL = 'http://api.hostip.info/?ip=%s'\r\nGML&#95;NS = 'http://www.opengis.net/gml'\r\n\r\ndef geo&#95;ip&#95;lookup(ip&#95;address):\r\n    &quot;&quot;&quot;\r\n    Look up the geo information based on the IP address passed in\r\n    &quot;&quot;&quot;\r\n    dom = minidom.parse(urllib.urlopen(GEO&#95;IP&#95;LOOKUP&#95;URL % ip&#95;address))\r\n    elem = dom.getElementsByTagName('Hostip')[0]\r\n    location = elem.getElementsByTagNameNS(GML&#95;NS, 'name')[0].firstChild.data.partition(',')\r\n\r\n    try:\r\n        latlong = elem.getElementsByTagNameNS(GML&#95;NS, 'coordinates')[0].firstChild.data.partition(',')\r\n    except:\r\n        # lat/long isnt always returned\r\n        latlong = None\r\n\r\n    return {\r\n            'country&#95;code': elem.getElementsByTagName('countryAbbrev')[0].firstChild.data,\r\n            'country&#95;name': elem.getElementsByTagName('countryName')[0].firstChild.data,\r\n            'locality': location[0].strip(),\r\n            'region': location[2].strip(),\r\n            'longitude': latlong[0].strip() if latlong else '',\r\n            'latitude': latlong[2].strip() if latlong else ''\r\n    }\r\n</code></pre>\r\n\r\n<p> Calling it from the interpreter: </p>\r\n\r\n<pre><code>&gt;&gt;&gt; geo&#95;ip&#95;lookup('65.34.176.69')\r\n{'locality': u'Miami', 'region': u'FL', 'longitude': u'-80.2108', 'latitude': u'25.7757', 'country&#95;code': u'US', 'country&#95;name': u'UNITED STATES'}\r\n&gt;&gt;&gt;\r\n</code></pre>", 
      "tags": "python geoip ", 
      "title": "Quick and Dirty GeoIP Lookup Function in Python", 
      "object_id": 27, 
      "created_on": "2009-12-01 01:02:58", 
      "content_type": 15, 
      "updated_on": "2009-12-01 01:02:58", 
      "pub_date": "2009-03-10 00:00:00"
    }
  }, 
  {
    "pk": 28, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nThe other day I found another <a href=\"http://ipinfodb.com/ip&#95;location&#95;api&#95;json.php\">GeoIP lookup service</a> that happens to also return JSON, which is awesome given the great <a href=\"http://code.google.com/p/simplejson/\" title=\"simplejson\">JSON support</a> in Python. The JSON returned looks like this:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>{\r\n&quot;Ip&quot; : &quot;74.125.45.100&quot;,\r\n&quot;Status&quot; : &quot;OK&quot;,\r\n&quot;CountryCode&quot; : &quot;US&quot;,\r\n&quot;CountryName&quot; : &quot;United States&quot;,\r\n&quot;RegionCode&quot; : &quot;06&quot;,\r\n&quot;RegionName&quot; : &quot;California&quot;,\r\n&quot;City&quot; : &quot;Mountain View&quot;,\r\n&quot;ZipPostalCode&quot; : &quot;94043&quot;,\r\n&quot;Latitude&quot; : &quot;37.4192&quot;,\r\n&quot;Longitude&quot; : &quot;-122.057&quot;,\r\n}\r\n</code></pre>\r\n\r\n<p>Today, the <a href=\"http://www.hostip.info/\" title=\"My IP Address Lookup and GeoTargeting Community Geotarget IP Project \">service</a> I <a href=\"http://rickyrosario.com/blog/quick-and-dirty-geoip-lookup-function-in-python\" title=\"Quick and Dirty GeoIP Lookup Function in Python\">was using</a> seems to be dead so I quickly reimplemented my function and it turned out much cleaner.\r\n</p>\r\n<pre class=\"prettyprint\"><code>from urllib import urlopen, quote\r\nimport simplejson\r\n\r\nGEOIP&#95;LOOKUP&#95;URL = 'http://ipinfodb.com/ip&#95;query.php?ip=%s&amp;output=json'\r\n\r\ndef geo&#95;ip&#95;lookup(ip&#95;address):\r\n    &quot;&quot;&quot;\r\n    Look up the geo information based on the IP address passed in\r\n    &quot;&quot;&quot;\r\n    lookup&#95;url = GEOIP&#95;LOOKUP&#95;URL % ip&#95;address\r\n    json&#95;response = simplejson.loads(urlopen(lookup&#95;url).read())\r\n\r\n    return {\r\n            'country&#95;code': json&#95;response['CountryCode'],\r\n            'country&#95;name': json&#95;response['CountryName'],\r\n            'locality': json&#95;response['City'],\r\n            'region': json&#95;response['RegionName'],\r\n            'longitude': json&#95;response['Longitude'],\r\n            'latitude': json&#95;response['Latitude']\r\n    }\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nJust like before, from the interpreter:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&gt;&gt;&gt; geo&#95;ip&#95;lookup('81.83.5.11')\r\n{'locality': u'Gent', 'region': u'Oost-Vlaanderen', 'longitude': u'3.7167', 'latitude': u'51.05', 'country&#95;code': u'BE', 'country&#95;name': u'Belgium'}\r\n&gt;&gt;&gt;\r\n</code></pre>\r\n\r\n<p>JSON FTW!</p>", 
      "tags": "python geoip ", 
      "title": "Improved GeoIP Lookup Function in Python", 
      "object_id": 28, 
      "created_on": "2009-12-01 01:04:23", 
      "content_type": 15, 
      "updated_on": "2009-12-01 01:04:23", 
      "pub_date": "2009-04-28 00:00:00"
    }
  }, 
  {
    "pk": 29, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nToday, I came across a Ruby script that <a href=\"http://jerodsanto.net\">Jerod Santo</a> blogged about yesterday: <a href=\"http://blog.jerodsanto.net/2009/05/see-which-twitterers-dont-follow-youback-in-less-than-15-lines-of-ruby/\">See Which Twitterers Don\u2019t Follow You Back In Less Than 15 Lines of Ruby</a>. I quickly felt the need to implement the same in Python to see how much code it would take.\r\n</p>\r\n\r\n<p>\r\nI used the awesome <a href=\"http://github.com/sixohsix/twitter/tree/master\">Minimalist Twitter API for Python</a>, which I have used and <a href=\"http://rickyrosario.com/blog/posting-to-twitter-from-python\" title=\"Posting to Twitter from Python\">blogged about before</a>. After a couple refactorings, I ended up with <a href=\"http://gist.github.com/111409\" title=\"no&#95;follow&#95;back.py gist\">15 lines</a>:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>from twitter.api import Twitter\r\n\r\nUSERNAME = 'r1cky' # set to your/any username\r\n\r\ntwitter = Twitter() # username/password not required for these calls\r\nfriends = twitter.friends.ids(screen&#95;name=USERNAME)\r\nfollowers = twitter.followers.ids(screen&#95;name=USERNAME)\r\nguilty = [x for x in friends if x not in followers]\r\n\r\nprint \"There are %s tweeps you follow who do not follow you\" % len(guilty)\r\n\r\nfor user&#95;id in guilty:\r\n    user = twitter.users.show(user&#95;id=user&#95;id)\r\n    print \"%s follows %s and has %s followers.\" % \\\r\n              (user['name'], user['friends&#95;count'], user['followers&#95;count'] )\r\n</code></pre>\r\n\r\n<p>\r\nIt does seem like more code than the Ruby version. I especially like how you can subtract one array from the another in Ruby:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>guilty = base.friend&#95;ids - base.follower&#95;ids\r\n</code></pre>\r\n\r\n<p>\r\nI am not sure that this can be made as elegant in Python... Can it?\r\n</p>\r\n\r\n<p>\r\nTo make the code re-usable, I created a function that takes a username and returns the users that don't follow back:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>from twitter.api import Twitter\r\n\r\ndef no&#95;follow&#95;back(username):\r\n    twitter = Twitter()   # username/password not required for these calls\r\n    friends = twitter.friends.ids(screen&#95;name=username)\r\n    followers = twitter.followers.ids(screen&#95;name=username)\r\n\r\n    def get&#95;user&#95;by&#95;id(user&#95;id):\r\n        return twitter.users.show(user&#95;id=user&#95;id)\r\n\r\n    return [get&#95;user&#95;by&#95;id(x) for x in friends if x not in followers]\r\n</code></pre>\r\n\r\n<p>\r\nA usage example (I saved the function above in a file called twitfun.py):\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&gt;&gt;&gt; from twitfun import no&#95;follow&#95;back\r\n&gt;&gt;&gt; guilty = no&#95;follow&#95;back('papajuans')\r\n&gt;&gt;&gt; len(guilty)\r\n16\r\n&gt;&gt;&gt; guilty[0][\"screen&#95;name\"]\r\nu'shanselman'\r\n</code></pre>", 
      "tags": "snippet twitter python ", 
      "title": "See Which Twitterers Don\u2019t Follow You Back In 15 Lines of Python", 
      "object_id": 29, 
      "created_on": "2009-12-01 01:06:37", 
      "content_type": 15, 
      "updated_on": "2009-12-01 18:20:15", 
      "pub_date": "2009-05-13 00:00:00"
    }
  }, 
  {
    "pk": 30, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\nThe official <a href=\"http://apiwiki.twitter.com/\">Twitter API documentation</a> is not bad, but being in a wiki it's usability isn't great. I found myself frequently clicking back and forth to find different API methods. So, I spent a couple of nights creating a tool to learn and explore the Twitter API interactively.\n</p>\n\n<p>\n<strong>\n<a href=\"http://twitapi.com\" title=\"Twitter API Explorer\">TwitAPI.com</a>\n</strong>\n</p>\n\n<inline type=\"media.photo\" id=\"5\" class=\"\" />\n\n<p>\nIn addition to the (hopefully) better usability, you can enter parameters and call the methods to see the response.\n</p>\n\n<p>\nThe site itself was built on <a href=\"http://www.djangoproject.com/\">Django</a> and uses <a href=\"http://apiwiki.twitter.com/OAuth-FAQ\" title=\"Twitter OAuth FAQ\">Twitter OAuth</a> for authentication and for making authenticated API calls.\n</p>", 
      "tags": "twitter django twitapi ", 
      "title": "TwitAPI.com - Twitter API Explorer", 
      "object_id": 30, 
      "created_on": "2009-12-01 01:08:15", 
      "content_type": 15, 
      "updated_on": "2009-12-01 01:11:28", 
      "pub_date": "2009-05-27 00:00:00"
    }
  }, 
  {
    "pk": 31, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nJavaScript is missing the sometimes useful startsWith and endsWith functions that are available in Python, C#, etc. One can argue that startsWith is not necessary since its just as easy to check the index of the prefix and compare to 0:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>function strStartsWith(str, prefix) {\r\n    return str.indexOf(prefix) === 0;\r\n}\r\n</code></pre>\r\n\r\n<p>\r\nUsing indexOf to implement endsWith is possible as well but not as cool and short as using regular expressions:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>function strEndsWith(str, suffix) {\r\n    return str.match(suffix+&quot;$&quot;)==suffix;\r\n}\r\n</code></pre>\r\n\r\n<p>\r\nIf you are a fan of monkey-patching JavaScript's builtin classes: \r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>String.prototype.startsWith = function(prefix) {\r\n    return this.indexOf(prefix) === 0;\r\n}\r\n\r\nString.prototype.endsWith = function(suffix) {\r\n    return this.match(suffix+&quot;$&quot;) == suffix;\r\n};\r\n</code></pre>\r\n\r\n<p>\r\nThen you can do:\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>&gt;&gt;&gt; &quot;rickyrosario.com&quot;.startsWith(&quot;ricky&quot;)\r\ntrue\r\n&gt;&gt;&gt; &quot;rickyrosario.com&quot;.endsWith(&quot;.com&quot;)\r\ntrue\r\n</code></pre>", 
      "tags": "javascript ", 
      "title": "JavaScript startsWith and endsWith Implementation for Strings", 
      "object_id": 31, 
      "created_on": "2009-12-01 01:14:43", 
      "content_type": 15, 
      "updated_on": "2009-12-01 01:14:43", 
      "pub_date": "2009-07-01 00:00:00"
    }
  }, 
  {
    "pk": 32, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>\r\nI previously <a href=\"http://rickyrosario.com/blog/converting-a-url-into-a-link-in-csharp-using-regular-expressions\">implemented something similar in C#</a>, and now I have it in JavaScript. Pass in a bunch of text and get it back with the URLs converted into clickable links (&lt;a /&gt;'s).\r\n</p>\r\n\r\n<pre class=\"prettyprint\"><code>function linkify(text){\r\n    if (text) {\r\n        text = text.replace(\r\n            /((https?\\:\\/\\/)|(www\\.))(\\S+)(\\w{2,4})(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&amp;%@!\\-\\/]))?/gi,\r\n            function(url){\r\n                var full&#95;url = url;\r\n                if (!full&#95;url.match('^https?:\\/\\/')) {\r\n                    full&#95;url = 'http://' + full&#95;url;\r\n                }\r\n                return '&lt;a href=\"' + full&#95;url + '\"&gt;' + url + '&lt;/a&gt;';\r\n            }\r\n        );\r\n    }\r\n    return text;\r\n}\r\n</code></pre>", 
      "tags": "javascript", 
      "title": "Converting a URL into a Link in JavaScript - Linkify Function", 
      "object_id": 32, 
      "created_on": "2009-12-01 01:17:24", 
      "content_type": 15, 
      "updated_on": "2009-12-01 01:17:24", 
      "pub_date": "2009-08-12 00:00:00"
    }
  }, 
  {
    "pk": 33, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>I will be redoing this site (currently a custom ASP.Net MVC application) as part of <a href=\"http://sitesprint.info\">SiteSprint II</a>. I am not exactly sure what I am doing but it will very likely be <a href=\"http://djangoproject.com\">Django</a>-based. I'll probably start with <a href=\"http://github.com/montylounge/django-mingus/tree\">Mingus</a> for the blog and add some sort of lifestream and whatever else I can come up with. The design will probably be minimalist, dark on light, decent sized font, ...</p>\r\n\r\n<p>Stay tuned for progress.</p>", 
      "tags": "django sitesprint ", 
      "title": "Sprinting the #sitesprint", 
      "object_id": 33, 
      "created_on": "2009-12-01 01:18:14", 
      "content_type": 15, 
      "updated_on": "2009-12-01 01:18:14", 
      "pub_date": "2009-11-17 00:00:00"
    }
  }, 
  {
    "pk": 34, 
    "model": "django_proxy.proxy", 
    "fields": {
      "description": "<p>I've decided to start the reimplementation of this site using\r\n<a href=\"http://github.com/montylounge/django-mingus\">django-mingus</a> as a base,\r\nso I went ahead and forked\r\nit. It was very easy to get up and running locally following the\r\n<a href=\"http://github.com/montylounge/django-mingus/blob/master/docs/INSTALL.textile\">instructions provided</a>.\r\nThe first thing I am going to do is rework the templates to my liking.\r\nI am not a big fan of CSS grid frameworks, instead I take the sometimes less DRY\r\nsemantic markup approach and refactor later to DRY up a little. I guess I am a\r\nmasochist with CSS, but I don't like seeing my markup polluted with junk CSS\r\nclasses like grid&#95;*, pull&#95;*, etc&#95;*.</p>\r\n\r\n<p>While I rework the templates and CSS (based on the minimal theme), I will try\r\nto get familiar with all the functionality I get for free with mingus. Then I will\r\ndecide what I want to keep and what I need to add.</p>\r\n\r\n<p>I am already torn about using disqus for comments,\r\ncurrently leaning heavily against it as it is integrated via javascript.\r\nI think comments should definitely be indexed for search, so that\r\njustifies hosting the comments myself (using an existing comments app such as\r\n<a href=\"http://github.com/ericflo/django-threadedcomments\">django-threadedcomments</a>)\r\nand dealing with spam. Another interesting option is implementing disqus using the\r\nserver to server API. This way I wouldn't have to worry about spam at all (assuming\r\ndisqus is good) and I would just have to cache the comments to avoid API calls on\r\nevery request.</p>", 
      "tags": "django sitesprint ", 
      "title": "django-mingus forked #sitesprint", 
      "object_id": 34, 
      "created_on": "2009-12-01 01:19:09", 
      "content_type": 15, 
      "updated_on": "2009-12-01 15:39:05", 
      "pub_date": "2009-11-24 00:00:00"
    }
  }, 
  {
    "pk": 1, 
    "model": "google_analytics.analytics", 
    "fields": {
      "analytics_code": "UA-327441-4", 
      "site": 1
    }
  }, 
  {
    "pk": 1, 
    "model": "robots.url", 
    "fields": {
      "pattern": "/*"
    }
  }, 
  {
    "pk": 1, 
    "model": "robots.rule", 
    "fields": {
      "sites": [
        1
      ], 
      "crawl_delay": null, 
      "robot": "*", 
      "disallowed": [], 
      "allowed": [
        1
      ]
    }
  }, 
  {
    "pk": 2, 
    "model": "elsewhere.socialnetworkprofile", 
    "fields": {
      "url": "http://twitter.com/r1cky", 
      "category": 2, 
      "sort_order": 1, 
      "name": "twitter", 
      "description": ""
    }
  }, 
  {
    "pk": 6, 
    "model": "elsewhere.socialnetworkprofile", 
    "fields": {
      "url": "http://www.facebook.com/ricky.rosario", 
      "category": 2, 
      "sort_order": 2, 
      "name": "facebook", 
      "description": ""
    }
  }, 
  {
    "pk": 5, 
    "model": "elsewhere.socialnetworkprofile", 
    "fields": {
      "url": "http://delicious.com/rlrosario", 
      "category": 2, 
      "sort_order": 3, 
      "name": "delicious", 
      "description": ""
    }
  }, 
  {
    "pk": 7, 
    "model": "elsewhere.socialnetworkprofile", 
    "fields": {
      "url": "http://www.linkedin.com/in/rickyrosario", 
      "category": 2, 
      "sort_order": 4, 
      "name": "linkedin", 
      "description": ""
    }
  }, 
  {
    "pk": 1, 
    "model": "elsewhere.socialnetworkprofile", 
    "fields": {
      "url": "http://github.com/rlr", 
      "category": 1, 
      "sort_order": 5, 
      "name": "github", 
      "description": ""
    }
  }, 
  {
    "pk": 4, 
    "model": "elsewhere.socialnetworkprofile", 
    "fields": {
      "url": "http://bitbucket.org/rlr/", 
      "category": 1, 
      "sort_order": 6, 
      "name": "bitbucket", 
      "description": ""
    }
  }, 
  {
    "pk": 3, 
    "model": "elsewhere.socialnetworkprofile", 
    "fields": {
      "url": "http://sourceforge.net/users/rlr/", 
      "category": 1, 
      "sort_order": 7, 
      "name": "sourceforge", 
      "description": ""
    }
  }, 
  {
    "pk": 1, 
    "model": "elsewhere.category", 
    "fields": {
      "sort_order": 0, 
      "title": "Development"
    }
  }, 
  {
    "pk": 2, 
    "model": "elsewhere.category", 
    "fields": {
      "sort_order": 0, 
      "title": "Social"
    }
  }
]
